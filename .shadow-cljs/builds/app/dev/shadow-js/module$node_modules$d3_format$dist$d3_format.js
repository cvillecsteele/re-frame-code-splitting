["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-format/dist/d3-format.js"],"~:js","shadow$provide.module$node_modules$d3_format$dist$d3_format=function(da,fa,D,L,v){(function(a,b){\"object\"===typeof v&&\"undefined\"!==typeof L?b(v):\"function\"===typeof define&&define.amd?define([\"exports\"],b):b(a.d3=a.d3||{})})(this,function(a){function b(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var d=a.slice(0,b);return[1<d.length?d[0]+d.slice(2):d,+a.slice(b+1)]}function p(a){return a=b(Math.abs(a)),a?a[1]:NaN}function v(a,b){return function(d,e){for(var f=\nd.length,k=[],l=0,n=a[0],p=0;0<f&&0<n;){p+n+1>e&&(n=Math.max(1,e-p));k.push(d.substring(f-=n,f+n));if((p+=n+1)>e)break;n=a[l=(l+1)%a.length]}return k.reverse().join(b)}}function A(a){return function(b){return b.replace(/[0-9]/g,function(b){return a[+b]})}}function n(a){return new E(a)}function E(a){if(!(b=t.exec(a)))throw Error(\"invalid format: \"+a);var b;this.fill=b[1]||\" \";this.align=b[2]||\"\\x3e\";this.sign=b[3]||\"-\";this.symbol=b[4]||\"\";this.zero=!!b[5];this.width=b[6]&&+b[6];this.comma=!!b[7];\nthis.precision=b[8]&&+b[8].slice(1);this.trim=!!b[9];this.type=b[10]||\"\"}function y(a,e){e=b(a,e);if(!e)return a+\"\";a=e[0];e=e[1];return 0>e?\"0.\"+Array(-e).join(\"0\")+a:a.length>e+1?a.slice(0,e+1)+\".\"+a.slice(e+1):a+Array(e-a.length+2).join(\"0\")}function Q(a){return a}function f(a){function b(a){function b(a){var b=r,e=z,n,q;if(\"c\"===E)e=T(a)+e,a=\"\";else{a=+a;var C=0>a;a=T(Math.abs(a),v);if(H){var u=a.length,h=1,g=-1;a:for(;h<u;++h)switch(a[h]){case \".\":g=n=h;break;case \"0\":0===g&&(g=h);n=h;break;\ndefault:if(0<g){if(!+a[h])break a;g=0}}a=0<g?a.slice(0,g)+a.slice(n+1):a}C&&0===+a&&(C=!1);b=(C?\"(\"===y?y:\"-\":\"-\"===y||\"(\"===y?\"\":y)+b;e=(\"s\"===E?l[8+M/3]:\"\")+e+(C&&\"(\"===y?\")\":\"\");if(ia)for(C=-1,n=a.length;++C<n;)if(q=a.charCodeAt(C),48>q||57<q){e=(46===q?f+a.slice(C+1):a.slice(C))+e;a=a.slice(0,C);break}}x&&!A&&(a=d(a,Infinity));q=b.length+a.length+e.length;C=q<B?Array(B-q+1).join(k):\"\";x&&A&&(a=d(C+a,C.length?B-e.length:Infinity),C=\"\");switch(p){case \"\\x3c\":a=b+a+e+C;break;case \"\\x3d\":a=b+C+a+\ne;break;case \"^\":a=C.slice(0,q=C.length>>1)+b+a+e+C.slice(q);break;default:a=C+b+a+e}return t(a)}a=n(a);var k=a.fill,p=a.align,y=a.sign,q=a.symbol,A=a.zero,B=a.width,x=a.comma,v=a.precision,H=a.trim,E=a.type;\"n\"===E?(x=!0,E=\"g\"):P[E]||(null==v&&(v=12),H=!0,E=\"g\");if(A||\"0\"===k&&\"\\x3d\"===p)A=!0,k=\"0\",p=\"\\x3d\";var r=\"$\"===q?e[0]:\"#\"===q&&/[boxX]/.test(E)?\"0\"+E.toLowerCase():\"\",z=\"$\"===q?e[1]:/[%p]/.test(E)?C:\"\",T=P[E],ia=/[defgprs%]/.test(E);v=null==v?6:/[gprs]/.test(E)?Math.max(1,Math.min(21,v)):Math.max(0,\nMath.min(20,v));b.toString=function(){return a+\"\"};return b}var d=a.grouping&&a.thousands?v(a.grouping,a.thousands):Q,e=a.currency,f=a.decimal,t=a.numerals?A(a.numerals):Q,C=a.percent||\"%\";return{format:b,formatPrefix:function(a,d){var e=b((a=n(a),a.type=\"f\",a));a=3*Math.max(-8,Math.min(8,Math.floor(p(d)/3)));var f=Math.pow(10,-a),k=l[8+a/3];return function(a){return e(f*a)+k}}}}function e(b){J=f(b);a.format=J.format;a.formatPrefix=J.formatPrefix;return J}var t=/^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\nn.prototype=E.prototype;E.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?\"0\":\"\")+(null==this.width?\"\":Math.max(1,this.width|0))+(this.comma?\",\":\"\")+(null==this.precision?\"\":\".\"+Math.max(0,this.precision|0))+(this.trim?\"~\":\"\")+this.type};var M,P={\"%\":function(a,b){return(100*a).toFixed(b)},b:function(a){return Math.round(a).toString(2)},c:function(a){return a+\"\"},d:function(a){return Math.round(a).toString(10)},e:function(a,b){return a.toExponential(b)},\nf:function(a,b){return a.toFixed(b)},g:function(a,b){return a.toPrecision(b)},o:function(a){return Math.round(a).toString(8)},p:function(a,b){return y(100*a,b)},r:y,s:function(a,e){var d=b(a,e);if(!d)return a+\"\";var f=d[0];d=d[1];d=d-(M=3*Math.max(-8,Math.min(8,Math.floor(d/3))))+1;var k=f.length;return d===k?f:d>k?f+Array(d-k+1).join(\"0\"):0<d?f.slice(0,d)+\".\"+f.slice(d):\"0.\"+Array(1-d).join(\"0\")+b(a,Math.max(0,e+d-1))[0]},X:function(a){return Math.round(a).toString(16).toUpperCase()},x:function(a){return Math.round(a).toString(16)}},\nl=\"y z a f p n µ m  k M G T P E Z Y\".split(\" \"),J;e({decimal:\".\",thousands:\",\",grouping:[3],currency:[\"$\",\"\"]});a.formatDefaultLocale=e;a.formatLocale=f;a.formatSpecifier=n;a.precisionFixed=function(a){return Math.max(0,-p(Math.abs(a)))};a.precisionPrefix=function(a,b){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(p(b)/3)))-p(Math.abs(a)))};a.precisionRound=function(a,b){a=Math.abs(a);b=Math.abs(b)-a;return Math.max(0,p(b)-p(a))+1};Object.defineProperty(a,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_format$dist$d3_format\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-format/ v1.3.2 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nfunction formatDecimal(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n\nfunction exponent(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nfunction formatNumerals(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nfunction formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n\nvar formatTypes = {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n\nfunction identity(x) {\n  return x;\n}\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nfunction formatLocale(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\nvar locale;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  exports.format = locale.format;\n  exports.formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nexports.formatDefaultLocale = defaultLocale;\nexports.formatLocale = formatLocale;\nexports.formatSpecifier = formatSpecifier;\nexports.precisionFixed = precisionFixed;\nexports.precisionPrefix = precisionPrefix;\nexports.precisionRound = precisionRound;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["d","trim","s","width","align","precision","f","e","comma","grouping","prototype","p","currency","precisionPrefix","formatPrefix","x","__esModule","precisionRound","toString","d3","zero","formatLocale","value","thousands","fill","formatSpecifier","symbol","precisionFixed","type","b","r","g","X","formatDefaultLocale","sign","o","c","format","decimal"]],"~:compiled-at",1535846555720,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_format$dist$d3_format.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-format/dist/d3-format.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_format$dist$d3_format\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-format/ v1.3.2 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\\n(factory((global.d3 = global.d3 || {})));\\n}(this, (function (exports) { 'use strict';\\n\\n// Computes the decimal coefficient and exponent of the specified number x with\\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\\n// For example, formatDecimal(1.23) returns [\\\"123\\\", 0].\\nfunction formatDecimal(x, p) {\\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\\\"e\\\")) < 0) return null; // NaN, \\u00b1Infinity\\n  var i, coefficient = x.slice(0, i);\\n\\n  // The string returned by toExponential either has the form \\\\d\\\\.\\\\d+e[-+]\\\\d+\\n  // (e.g., 1.2e+3) or the form \\\\de[-+]\\\\d+ (e.g., 1e+3).\\n  return [\\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\\n    +x.slice(i + 1)\\n  ];\\n}\\n\\nfunction exponent(x) {\\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\\n}\\n\\nfunction formatGroup(grouping, thousands) {\\n  return function(value, width) {\\n    var i = value.length,\\n        t = [],\\n        j = 0,\\n        g = grouping[0],\\n        length = 0;\\n\\n    while (i > 0 && g > 0) {\\n      if (length + g + 1 > width) g = Math.max(1, width - length);\\n      t.push(value.substring(i -= g, i + g));\\n      if ((length += g + 1) > width) break;\\n      g = grouping[j = (j + 1) % grouping.length];\\n    }\\n\\n    return t.reverse().join(thousands);\\n  };\\n}\\n\\nfunction formatNumerals(numerals) {\\n  return function(value) {\\n    return value.replace(/[0-9]/g, function(i) {\\n      return numerals[+i];\\n    });\\n  };\\n}\\n\\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\\nvar re = /^(?:(.)?([<>=^]))?([+\\\\-( ])?([$#])?(0)?(\\\\d+)?(,)?(\\\\.\\\\d+)?(~)?([a-z%])?$/i;\\n\\nfunction formatSpecifier(specifier) {\\n  return new FormatSpecifier(specifier);\\n}\\n\\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\\n\\nfunction FormatSpecifier(specifier) {\\n  if (!(match = re.exec(specifier))) throw new Error(\\\"invalid format: \\\" + specifier);\\n  var match;\\n  this.fill = match[1] || \\\" \\\";\\n  this.align = match[2] || \\\">\\\";\\n  this.sign = match[3] || \\\"-\\\";\\n  this.symbol = match[4] || \\\"\\\";\\n  this.zero = !!match[5];\\n  this.width = match[6] && +match[6];\\n  this.comma = !!match[7];\\n  this.precision = match[8] && +match[8].slice(1);\\n  this.trim = !!match[9];\\n  this.type = match[10] || \\\"\\\";\\n}\\n\\nFormatSpecifier.prototype.toString = function() {\\n  return this.fill\\n      + this.align\\n      + this.sign\\n      + this.symbol\\n      + (this.zero ? \\\"0\\\" : \\\"\\\")\\n      + (this.width == null ? \\\"\\\" : Math.max(1, this.width | 0))\\n      + (this.comma ? \\\",\\\" : \\\"\\\")\\n      + (this.precision == null ? \\\"\\\" : \\\".\\\" + Math.max(0, this.precision | 0))\\n      + (this.trim ? \\\"~\\\" : \\\"\\\")\\n      + this.type;\\n};\\n\\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\\nfunction formatTrim(s) {\\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\\n    switch (s[i]) {\\n      case \\\".\\\": i0 = i1 = i; break;\\n      case \\\"0\\\": if (i0 === 0) i0 = i; i1 = i; break;\\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\\n    }\\n  }\\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\\n}\\n\\nvar prefixExponent;\\n\\nfunction formatPrefixAuto(x, p) {\\n  var d = formatDecimal(x, p);\\n  if (!d) return x + \\\"\\\";\\n  var coefficient = d[0],\\n      exponent = d[1],\\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\\n      n = coefficient.length;\\n  return i === n ? coefficient\\n      : i > n ? coefficient + new Array(i - n + 1).join(\\\"0\\\")\\n      : i > 0 ? coefficient.slice(0, i) + \\\".\\\" + coefficient.slice(i)\\n      : \\\"0.\\\" + new Array(1 - i).join(\\\"0\\\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\\n}\\n\\nfunction formatRounded(x, p) {\\n  var d = formatDecimal(x, p);\\n  if (!d) return x + \\\"\\\";\\n  var coefficient = d[0],\\n      exponent = d[1];\\n  return exponent < 0 ? \\\"0.\\\" + new Array(-exponent).join(\\\"0\\\") + coefficient\\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \\\".\\\" + coefficient.slice(exponent + 1)\\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\\\"0\\\");\\n}\\n\\nvar formatTypes = {\\n  \\\"%\\\": function(x, p) { return (x * 100).toFixed(p); },\\n  \\\"b\\\": function(x) { return Math.round(x).toString(2); },\\n  \\\"c\\\": function(x) { return x + \\\"\\\"; },\\n  \\\"d\\\": function(x) { return Math.round(x).toString(10); },\\n  \\\"e\\\": function(x, p) { return x.toExponential(p); },\\n  \\\"f\\\": function(x, p) { return x.toFixed(p); },\\n  \\\"g\\\": function(x, p) { return x.toPrecision(p); },\\n  \\\"o\\\": function(x) { return Math.round(x).toString(8); },\\n  \\\"p\\\": function(x, p) { return formatRounded(x * 100, p); },\\n  \\\"r\\\": formatRounded,\\n  \\\"s\\\": formatPrefixAuto,\\n  \\\"X\\\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\\n  \\\"x\\\": function(x) { return Math.round(x).toString(16); }\\n};\\n\\nfunction identity(x) {\\n  return x;\\n}\\n\\nvar prefixes = [\\\"y\\\",\\\"z\\\",\\\"a\\\",\\\"f\\\",\\\"p\\\",\\\"n\\\",\\\"\\u00b5\\\",\\\"m\\\",\\\"\\\",\\\"k\\\",\\\"M\\\",\\\"G\\\",\\\"T\\\",\\\"P\\\",\\\"E\\\",\\\"Z\\\",\\\"Y\\\"];\\n\\nfunction formatLocale(locale) {\\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\\n      currency = locale.currency,\\n      decimal = locale.decimal,\\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\\n      percent = locale.percent || \\\"%\\\";\\n\\n  function newFormat(specifier) {\\n    specifier = formatSpecifier(specifier);\\n\\n    var fill = specifier.fill,\\n        align = specifier.align,\\n        sign = specifier.sign,\\n        symbol = specifier.symbol,\\n        zero = specifier.zero,\\n        width = specifier.width,\\n        comma = specifier.comma,\\n        precision = specifier.precision,\\n        trim = specifier.trim,\\n        type = specifier.type;\\n\\n    // The \\\"n\\\" type is an alias for \\\",g\\\".\\n    if (type === \\\"n\\\") comma = true, type = \\\"g\\\";\\n\\n    // The \\\"\\\" type, and any invalid type, is an alias for \\\".12~g\\\".\\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \\\"g\\\";\\n\\n    // If zero fill is specified, padding goes after sign and before digits.\\n    if (zero || (fill === \\\"0\\\" && align === \\\"=\\\")) zero = true, fill = \\\"0\\\", align = \\\"=\\\";\\n\\n    // Compute the prefix and suffix.\\n    // For SI-prefix, the suffix is lazily computed.\\n    var prefix = symbol === \\\"$\\\" ? currency[0] : symbol === \\\"#\\\" && /[boxX]/.test(type) ? \\\"0\\\" + type.toLowerCase() : \\\"\\\",\\n        suffix = symbol === \\\"$\\\" ? currency[1] : /[%p]/.test(type) ? percent : \\\"\\\";\\n\\n    // What format function should we use?\\n    // Is this an integer type?\\n    // Can this type generate exponential notation?\\n    var formatType = formatTypes[type],\\n        maybeSuffix = /[defgprs%]/.test(type);\\n\\n    // Set the default precision if not specified,\\n    // or clamp the specified precision to the supported range.\\n    // For significant precision, it must be in [1, 21].\\n    // For fixed precision, it must be in [0, 20].\\n    precision = precision == null ? 6\\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\\n        : Math.max(0, Math.min(20, precision));\\n\\n    function format(value) {\\n      var valuePrefix = prefix,\\n          valueSuffix = suffix,\\n          i, n, c;\\n\\n      if (type === \\\"c\\\") {\\n        valueSuffix = formatType(value) + valueSuffix;\\n        value = \\\"\\\";\\n      } else {\\n        value = +value;\\n\\n        // Perform the initial formatting.\\n        var valueNegative = value < 0;\\n        value = formatType(Math.abs(value), precision);\\n\\n        // Trim insignificant zeros.\\n        if (trim) value = formatTrim(value);\\n\\n        // If a negative value rounds to zero during formatting, treat as positive.\\n        if (valueNegative && +value === 0) valueNegative = false;\\n\\n        // Compute the prefix and suffix.\\n        valuePrefix = (valueNegative ? (sign === \\\"(\\\" ? sign : \\\"-\\\") : sign === \\\"-\\\" || sign === \\\"(\\\" ? \\\"\\\" : sign) + valuePrefix;\\n        valueSuffix = (type === \\\"s\\\" ? prefixes[8 + prefixExponent / 3] : \\\"\\\") + valueSuffix + (valueNegative && sign === \\\"(\\\" ? \\\")\\\" : \\\"\\\");\\n\\n        // Break the formatted value into the integer \\u201cvalue\\u201d part that can be\\n        // grouped, and fractional or exponential \\u201csuffix\\u201d part that is not.\\n        if (maybeSuffix) {\\n          i = -1, n = value.length;\\n          while (++i < n) {\\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\\n              value = value.slice(0, i);\\n              break;\\n            }\\n          }\\n        }\\n      }\\n\\n      // If the fill character is not \\\"0\\\", grouping is applied before padding.\\n      if (comma && !zero) value = group(value, Infinity);\\n\\n      // Compute the padding.\\n      var length = valuePrefix.length + value.length + valueSuffix.length,\\n          padding = length < width ? new Array(width - length + 1).join(fill) : \\\"\\\";\\n\\n      // If the fill character is \\\"0\\\", grouping is applied after padding.\\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \\\"\\\";\\n\\n      // Reconstruct the final output based on the desired alignment.\\n      switch (align) {\\n        case \\\"<\\\": value = valuePrefix + value + valueSuffix + padding; break;\\n        case \\\"=\\\": value = valuePrefix + padding + value + valueSuffix; break;\\n        case \\\"^\\\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\\n        default: value = padding + valuePrefix + value + valueSuffix; break;\\n      }\\n\\n      return numerals(value);\\n    }\\n\\n    format.toString = function() {\\n      return specifier + \\\"\\\";\\n    };\\n\\n    return format;\\n  }\\n\\n  function formatPrefix(specifier, value) {\\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \\\"f\\\", specifier)),\\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\\n        k = Math.pow(10, -e),\\n        prefix = prefixes[8 + e / 3];\\n    return function(value) {\\n      return f(k * value) + prefix;\\n    };\\n  }\\n\\n  return {\\n    format: newFormat,\\n    formatPrefix: formatPrefix\\n  };\\n}\\n\\nvar locale;\\n\\ndefaultLocale({\\n  decimal: \\\".\\\",\\n  thousands: \\\",\\\",\\n  grouping: [3],\\n  currency: [\\\"$\\\", \\\"\\\"]\\n});\\n\\nfunction defaultLocale(definition) {\\n  locale = formatLocale(definition);\\n  exports.format = locale.format;\\n  exports.formatPrefix = locale.formatPrefix;\\n  return locale;\\n}\\n\\nfunction precisionFixed(step) {\\n  return Math.max(0, -exponent(Math.abs(step)));\\n}\\n\\nfunction precisionPrefix(step, value) {\\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\\n}\\n\\nfunction precisionRound(step, max) {\\n  step = Math.abs(step), max = Math.abs(max) - step;\\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\\n}\\n\\nexports.formatDefaultLocale = defaultLocale;\\nexports.formatLocale = formatLocale;\\nexports.formatSpecifier = formatSpecifier;\\nexports.precisionFixed = precisionFixed;\\nexports.precisionPrefix = precisionPrefix;\\nexports.precisionRound = precisionRound;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"formatDecimal\",\"x\",\"p\",\"i\",\"indexOf\",\"toExponential\",\"coefficient\",\"slice\",\"length\",\"exponent\",\"Math\",\"abs\",\"NaN\",\"formatGroup\",\"grouping\",\"thousands\",\"value\",\"width\",\"t\",\"j\",\"g\",\"max\",\"push\",\"substring\",\"reverse\",\"join\",\"formatNumerals\",\"numerals\",\"replace\",\"formatSpecifier\",\"specifier\",\"FormatSpecifier\",\"match\",\"re\",\"exec\",\"Error\",\"fill\",\"align\",\"sign\",\"symbol\",\"zero\",\"comma\",\"precision\",\"trim\",\"type\",\"formatRounded\",\"d\",\"Array\",\"identity\",\"formatLocale\",\"locale\",\"newFormat\",\"format\",\"valuePrefix\",\"prefix\",\"valueSuffix\",\"suffix\",\"n\",\"c\",\"formatType\",\"valueNegative\",\"s\",\"i0\",\"i1\",\"prefixes\",\"prefixExponent\",\"maybeSuffix\",\"charCodeAt\",\"decimal\",\"group\",\"Infinity\",\"padding\",\"formatTypes\",\"currency\",\"test\",\"toLowerCase\",\"percent\",\"min\",\"toString\",\"format.toString\",\"formatPrefix\",\"f\",\"e\",\"floor\",\"k\",\"pow\",\"defaultLocale\",\"definition\",\"prototype\",\"FormatSpecifier.prototype.toString\",\"%\",\"toFixed\",\"b\",\"round\",\"toPrecision\",\"o\",\"formatPrefixAuto\",\"X\",\"toUpperCase\",\"formatDefaultLocale\",\"precisionFixed\",\"step\",\"precisionPrefix\",\"precisionRound\",\"Object\",\"defineProperty\"]\n}\n"]
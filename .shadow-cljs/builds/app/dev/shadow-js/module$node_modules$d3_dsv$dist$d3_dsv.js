["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-dsv/dist/d3-dsv.js"],"~:js","shadow$provide.module$node_modules$d3_dsv$dist$d3_dsv=function(da,fa,D,L,v){(function(a,b){\"object\"===typeof v&&\"undefined\"!==typeof L?b(v):\"function\"===typeof define&&define.amd?define([\"exports\"],b):b(a.d3=a.d3||{})})(this,function(a){function b(a){return new Function(\"d\",\"return {\"+a.map(function(a,b){return JSON.stringify(a)+\": d[\"+b+\"]\"}).join(\",\")+\"}\")}function p(a,e){var l=b(a);return function(b,k){return e(l(b),k,a)}}function v(a){var b=Object.create(null),e=[];a.forEach(function(a){for(var d in a)d in\nb||e.push(b[d]=d)});return e}function A(a){function e(a,b){function d(){if(C)return E;if(B)return B=!1,n;var b,d=k,e;if(34===a.charCodeAt(d)){for(;k++<l&&34!==a.charCodeAt(k)||34===a.charCodeAt(++k););(b=k)>=l?C=!0:10===(e=a.charCodeAt(k++))?B=!0:13===e&&(B=!0,10===a.charCodeAt(k)&&++k);return a.slice(d+1,b-1).replace(/\"\"/g,'\"')}for(;k<l;){if(10===(e=a.charCodeAt(b=k++)))B=!0;else if(13===e)B=!0,10===a.charCodeAt(k)&&++k;else if(e!==t)continue;return a.slice(d,b)}return C=!0,a.slice(d,l)}var e=[],\nl=a.length,k=0,f=0,q,C=0>=l,B=!1;10===a.charCodeAt(l-1)&&--l;for(13===a.charCodeAt(l-1)&&--l;(q=d())!==E;){for(var x=[];q!==n&&q!==E;)x.push(q),q=d();b&&null==(x=b(x,f++))||e.push(x)}return e}function l(b){return b.map(d).join(a)}function d(a){return null==a?\"\":f.test(a+=\"\")?'\"'+a.replace(/\"/g,'\"\"')+'\"':a}var f=new RegExp('[\"'+a+\"\\n\\r]\"),t=a.charCodeAt(0);return{parse:function(a,d){var l,k;a=e(a,function(a,e){if(l)return l(a,e-1);k=a;l=d?p(a,d):b(a)});a.columns=k||[];return a},parseRows:e,format:function(b,\ne){null==e&&(e=v(b));return[e.map(d).join(a)].concat(b.map(function(b){return e.map(function(a){return d(b[a])}).join(a)})).join(\"\\n\")},formatRows:function(a){return a.map(l).join(\"\\n\")}}}var n={},E={},y=A(\",\"),Q=y.parse,f=y.parseRows,e=y.format;y=y.formatRows;var t=A(\"\\t\"),M=t.parse,P=t.parseRows,l=t.format;t=t.formatRows;a.dsvFormat=A;a.csvParse=Q;a.csvParseRows=f;a.csvFormat=e;a.csvFormatRows=y;a.tsvParse=M;a.tsvParseRows=P;a.tsvFormat=l;a.tsvFormatRows=t;Object.defineProperty(a,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_dsv$dist$d3_dsv\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-dsv/ v1.0.10 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nvar EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction dsv(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n\nvar csv = dsv(\",\");\n\nvar csvParse = csv.parse;\nvar csvParseRows = csv.parseRows;\nvar csvFormat = csv.format;\nvar csvFormatRows = csv.formatRows;\n\nvar tsv = dsv(\"\\t\");\n\nvar tsvParse = tsv.parse;\nvar tsvParseRows = tsv.parseRows;\nvar tsvFormat = tsv.format;\nvar tsvFormatRows = tsv.formatRows;\n\nexports.dsvFormat = dsv;\nexports.csvParse = csvParse;\nexports.csvParseRows = csvParseRows;\nexports.csvFormat = csvFormat;\nexports.csvFormatRows = csvFormatRows;\nexports.tsvParse = tsvParse;\nexports.tsvParseRows = tsvParseRows;\nexports.tsvFormat = tsvFormat;\nexports.tsvFormatRows = tsvFormatRows;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["tsvFormatRows","parseRows","tsvFormat","dsvFormat","columns","csvParseRows","csvFormat","csvParse","__esModule","d3","value","tsvParseRows","parse","formatRows","csvFormatRows","tsvParse","format"]],"~:compiled-at",1535846555710,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_dsv$dist$d3_dsv.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-dsv/dist/d3-dsv.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_dsv$dist$d3_dsv\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-dsv/ v1.0.10 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\\n(factory((global.d3 = global.d3 || {})));\\n}(this, (function (exports) { 'use strict';\\n\\nvar EOL = {},\\n    EOF = {},\\n    QUOTE = 34,\\n    NEWLINE = 10,\\n    RETURN = 13;\\n\\nfunction objectConverter(columns) {\\n  return new Function(\\\"d\\\", \\\"return {\\\" + columns.map(function(name, i) {\\n    return JSON.stringify(name) + \\\": d[\\\" + i + \\\"]\\\";\\n  }).join(\\\",\\\") + \\\"}\\\");\\n}\\n\\nfunction customConverter(columns, f) {\\n  var object = objectConverter(columns);\\n  return function(row, i) {\\n    return f(object(row), i, columns);\\n  };\\n}\\n\\n// Compute unique columns in order of discovery.\\nfunction inferColumns(rows) {\\n  var columnSet = Object.create(null),\\n      columns = [];\\n\\n  rows.forEach(function(row) {\\n    for (var column in row) {\\n      if (!(column in columnSet)) {\\n        columns.push(columnSet[column] = column);\\n      }\\n    }\\n  });\\n\\n  return columns;\\n}\\n\\nfunction dsv(delimiter) {\\n  var reFormat = new RegExp(\\\"[\\\\\\\"\\\" + delimiter + \\\"\\\\n\\\\r]\\\"),\\n      DELIMITER = delimiter.charCodeAt(0);\\n\\n  function parse(text, f) {\\n    var convert, columns, rows = parseRows(text, function(row, i) {\\n      if (convert) return convert(row, i - 1);\\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\\n    });\\n    rows.columns = columns || [];\\n    return rows;\\n  }\\n\\n  function parseRows(text, f) {\\n    var rows = [], // output rows\\n        N = text.length,\\n        I = 0, // current character index\\n        n = 0, // current line number\\n        t, // current token\\n        eof = N <= 0, // current token followed by EOF?\\n        eol = false; // current token followed by EOL?\\n\\n    // Strip the trailing newline.\\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\\n    if (text.charCodeAt(N - 1) === RETURN) --N;\\n\\n    function token() {\\n      if (eof) return EOF;\\n      if (eol) return eol = false, EOL;\\n\\n      // Unescape quotes.\\n      var i, j = I, c;\\n      if (text.charCodeAt(j) === QUOTE) {\\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\\n        if ((i = I) >= N) eof = true;\\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\\n        return text.slice(j + 1, i - 1).replace(/\\\"\\\"/g, \\\"\\\\\\\"\\\");\\n      }\\n\\n      // Find next delimiter or newline.\\n      while (I < N) {\\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\\n        else if (c !== DELIMITER) continue;\\n        return text.slice(j, i);\\n      }\\n\\n      // Return last token before EOF.\\n      return eof = true, text.slice(j, N);\\n    }\\n\\n    while ((t = token()) !== EOF) {\\n      var row = [];\\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\\n      if (f && (row = f(row, n++)) == null) continue;\\n      rows.push(row);\\n    }\\n\\n    return rows;\\n  }\\n\\n  function format(rows, columns) {\\n    if (columns == null) columns = inferColumns(rows);\\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\\n      return columns.map(function(column) {\\n        return formatValue(row[column]);\\n      }).join(delimiter);\\n    })).join(\\\"\\\\n\\\");\\n  }\\n\\n  function formatRows(rows) {\\n    return rows.map(formatRow).join(\\\"\\\\n\\\");\\n  }\\n\\n  function formatRow(row) {\\n    return row.map(formatValue).join(delimiter);\\n  }\\n\\n  function formatValue(text) {\\n    return text == null ? \\\"\\\"\\n        : reFormat.test(text += \\\"\\\") ? \\\"\\\\\\\"\\\" + text.replace(/\\\"/g, \\\"\\\\\\\"\\\\\\\"\\\") + \\\"\\\\\\\"\\\"\\n        : text;\\n  }\\n\\n  return {\\n    parse: parse,\\n    parseRows: parseRows,\\n    format: format,\\n    formatRows: formatRows\\n  };\\n}\\n\\nvar csv = dsv(\\\",\\\");\\n\\nvar csvParse = csv.parse;\\nvar csvParseRows = csv.parseRows;\\nvar csvFormat = csv.format;\\nvar csvFormatRows = csv.formatRows;\\n\\nvar tsv = dsv(\\\"\\\\t\\\");\\n\\nvar tsvParse = tsv.parse;\\nvar tsvParseRows = tsv.parseRows;\\nvar tsvFormat = tsv.format;\\nvar tsvFormatRows = tsv.formatRows;\\n\\nexports.dsvFormat = dsv;\\nexports.csvParse = csvParse;\\nexports.csvParseRows = csvParseRows;\\nexports.csvFormat = csvFormat;\\nexports.csvFormatRows = csvFormatRows;\\nexports.tsvParse = tsvParse;\\nexports.tsvParseRows = tsvParseRows;\\nexports.tsvFormat = tsvFormat;\\nexports.tsvFormatRows = tsvFormatRows;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"objectConverter\",\"columns\",\"Function\",\"map\",\"name\",\"i\",\"JSON\",\"stringify\",\"join\",\"customConverter\",\"f\",\"object\",\"row\",\"inferColumns\",\"rows\",\"columnSet\",\"Object\",\"create\",\"forEach\",\"column\",\"push\",\"dsv\",\"delimiter\",\"parseRows\",\"text\",\"token\",\"eof\",\"EOF\",\"eol\",\"EOL\",\"j\",\"I\",\"c\",\"QUOTE\",\"charCodeAt\",\"N\",\"NEWLINE\",\"RETURN\",\"slice\",\"replace\",\"DELIMITER\",\"length\",\"n\",\"t\",\"formatRow\",\"formatValue\",\"reFormat\",\"test\",\"RegExp\",\"parse\",\"convert\",\"format\",\"concat\",\"formatRows\",\"csv\",\"csvParse\",\"csvParseRows\",\"csvFormat\",\"csvFormatRows\",\"tsv\",\"tsvParse\",\"tsvParseRows\",\"tsvFormat\",\"tsvFormatRows\",\"dsvFormat\",\"defineProperty\",\"value\"]\n}\n"]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-polygon/dist/d3-polygon.js"],"~:js","shadow$provide.module$node_modules$d3_polygon$dist$d3_polygon=function(da,fa,D,L,v){(function(a,b){\"object\"===typeof v&&\"undefined\"!==typeof L?b(v):\"function\"===typeof define&&define.amd?define([\"exports\"],b):b(a.d3=a.d3||{})})(this,function(a){function b(a,b,p){return(b[0]-a[0])*(p[1]-a[1])-(b[1]-a[1])*(p[0]-a[0])}function p(a,b){return a[0]-b[0]||a[1]-b[1]}function v(a){for(var n=a.length,p=[0,1],y=2,A=2;A<n;++A){for(;1<y&&0>=b(a[p[y-2]],a[p[y-1]],a[A]);)--y;p[y++]=A}return p.slice(0,y)}a.polygonArea=\nfunction(a){for(var b=-1,p=a.length,y,A=a[p-1],f=0;++b<p;)y=A,A=a[b],f+=y[1]*A[0]-y[0]*A[1];return f/2};a.polygonCentroid=function(a){for(var b=-1,p=a.length,y=0,A=0,f,e=a[p-1],t,v=0;++b<p;)f=e,e=a[b],v+=t=f[0]*e[1]-e[0]*f[1],y+=(f[0]+e[0])*t,A+=(f[1]+e[1])*t;return v*=3,[y/v,A/v]};a.polygonHull=function(a){if(3>(A=a.length))return null;var b,A,y=Array(A),H=Array(A);for(b=0;b<A;++b)y[b]=[+a[b][0],+a[b][1],b];y.sort(p);for(b=0;b<A;++b)H[b]=[y[b][0],-y[b][1]];A=v(y);H=v(H);var f=H[0]===A[0],e=H[H.length-\n1]===A[A.length-1],t=[];for(b=A.length-1;0<=b;--b)t.push(a[y[A[b]][2]]);for(b=+f;b<H.length-e;++b)t.push(a[y[H[b]][2]]);return t};a.polygonContains=function(a,b){var n=a.length,p=a[n-1],A=b[0];b=b[1];for(var f=p[0],e=p[1],t,v=!1,H=0;H<n;++H)p=a[H],t=p[0],p=p[1],p>b!==e>b&&A<(f-t)*(b-p)/(e-p)+t&&(v=!v),f=t,e=p;return v};a.polygonLength=function(a){var b=-1,p=a.length,y=a[p-1],v=y[0];y=y[1];for(var f=0;++b<p;){var e=v;var t=y;y=a[b];v=y[0];y=y[1];e-=v;t-=y;f+=Math.sqrt(e*e+t*t)}return f};Object.defineProperty(a,\n\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_polygon$dist$d3_polygon\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-polygon/ v1.0.5 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction area(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n\nfunction centroid(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n\n// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nfunction cross(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n\nfunction lexicographicOrder(a, b) {\n  return a[0] - b[0] || a[1] - b[1];\n}\n\n// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points) {\n  var n = points.length,\n      indexes = [0, 1],\n      size = 2;\n\n  for (var i = 2; i < n; ++i) {\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n    indexes[size++] = i;\n  }\n\n  return indexes.slice(0, size); // remove popped points\n}\n\nfunction hull(points) {\n  if ((n = points.length) < 3) return null;\n\n  var i,\n      n,\n      sortedPoints = new Array(n),\n      flippedPoints = new Array(n);\n\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n  sortedPoints.sort(lexicographicOrder);\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n  // Construct the hull polygon, removing possible duplicate endpoints.\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n      hull = [];\n\n  // Add upper hull in right-to-l order.\n  // Then add lower hull in left-to-right order.\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n  return hull;\n}\n\nfunction contains(polygon, point) {\n  var n = polygon.length,\n      p = polygon[n - 1],\n      x = point[0], y = point[1],\n      x0 = p[0], y0 = p[1],\n      x1, y1,\n      inside = false;\n\n  for (var i = 0; i < n; ++i) {\n    p = polygon[i], x1 = p[0], y1 = p[1];\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n    x0 = x1, y0 = y1;\n  }\n\n  return inside;\n}\n\nfunction length(polygon) {\n  var i = -1,\n      n = polygon.length,\n      b = polygon[n - 1],\n      xa,\n      ya,\n      xb = b[0],\n      yb = b[1],\n      perimeter = 0;\n\n  while (++i < n) {\n    xa = xb;\n    ya = yb;\n    b = polygon[i];\n    xb = b[0];\n    yb = b[1];\n    xa -= xb;\n    ya -= yb;\n    perimeter += Math.sqrt(xa * xa + ya * ya);\n  }\n\n  return perimeter;\n}\n\nexports.polygonArea = area;\nexports.polygonCentroid = centroid;\nexports.polygonHull = hull;\nexports.polygonContains = contains;\nexports.polygonLength = length;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["polygonLength","polygonCentroid","polygonHull","__esModule","d3","value","polygonContains","polygonArea"]],"~:compiled-at",1535846555749,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_polygon$dist$d3_polygon.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,EAAD,CAAQC,EAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CAElH,SAAS,CAACJ,CAAD,CAASK,CAAT,CAAkB,CACT,QAAnB,GAAA,MAAOD,EAAP,EAAiD,WAAjD,GAA+B,MAAOD,EAAtC,CAA+DE,CAAA,CAAQD,CAAR,CAA/D,CACkB,UAAlB,GAAA,MAAOE,OAAP,EAAgCA,MAAAC,IAAhC,CAA6CD,MAAA,CAAO,CAAC,SAAD,CAAP,CAAoBD,CAApB,CAA7C,CACCA,CAAA,CAASL,CAAAQ,GAAT,CAAqBR,CAAAQ,GAArB,EAAkC,EAAlC,CAH2B,CAA3B,CAAA,CAIC,IAJD,CAIQ,QAAS,CAACJ,CAAD,CAAU,CA2C5BK,QAASA,EAAK,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAU,CACtB,OAAQD,CAAA,CAAE,CAAF,CAAR,CAAeD,CAAA,CAAE,CAAF,CAAf,GAAwBE,CAAA,CAAE,CAAF,CAAxB,CAA+BF,CAAA,CAAE,CAAF,CAA/B,GAAwCC,CAAA,CAAE,CAAF,CAAxC,CAA+CD,CAAA,CAAE,CAAF,CAA/C,GAAwDE,CAAA,CAAE,CAAF,CAAxD,CAA+DF,CAAA,CAAE,CAAF,CAA/D,CADsB,CAIxBG,QAASA,EAAkB,CAACH,CAAD,CAAIC,CAAJ,CAAO,CAChC,MAAOD,EAAA,CAAE,CAAF,CAAP,CAAcC,CAAA,CAAE,CAAF,CAAd,EAAsBD,CAAA,CAAE,CAAF,CAAtB,CAA6BC,CAAA,CAAE,CAAF,CADG,CAOlCG,QAASA,EAAuB,CAACC,CAAD,CAAS,CAKvC,IALuC,IACnCC,EAAID,CAAAE,OAD+B,CAEnCC,EAAU,CAAC,CAAD,CAAI,CAAJ,CAFyB,CAGnCC,EAAO,CAH4B,CAK9BC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,CAApB,CAAuB,EAAEI,CAAzB,CAA4B,CAC1B,IAAA,CAAc,CAAd,CAAOD,CAAP,EAA6F,CAA7F,EAAmBV,CAAA,CAAMM,CAAA,CAAOG,CAAA,CAAQC,CAAR,CAAe,CAAf,CAAP,CAAN,CAAiCJ,CAAA,CAAOG,CAAA,CAAQC,CAAR,CAAe,CAAf,CAAP,CAAjC,CAA4DJ,CAAA,CAAOK,CAAP,CAA5D,CAAnB,CAAA,CAAgG,EAAED,CAClGD,EAAA,CAAQC,CAAA,EAAR,CAAA,CAAkBC,CAFQ,CAK5B,MAAOF,EAAAG,MAAA,CAAc,CAAd,CAAiBF,CAAjB,CAVgC,CAkFzCf,CAAAkB,YAAA;AAtIAC,QAAa,CAACC,CAAD,CAAU,CAOrB,IAPqB,IACjBJ,EAAK,EADY,CAEjBJ,EAAIQ,CAAAP,OAFa,CAGjBP,CAHiB,CAIjBC,EAAIa,CAAA,CAAQR,CAAR,CAAY,CAAZ,CAJa,CAKjBO,EAAO,CAEX,CAAO,EAAEH,CAAT,CAAaJ,CAAb,CAAA,CACEN,CAEA,CAFIC,CAEJ,CADAA,CACA,CADIa,CAAA,CAAQJ,CAAR,CACJ,CAAAG,CAAA,EAAQb,CAAA,CAAE,CAAF,CAAR,CAAeC,CAAA,CAAE,CAAF,CAAf,CAAsBD,CAAA,CAAE,CAAF,CAAtB,CAA6BC,CAAA,CAAE,CAAF,CAG/B,OAAOY,EAAP,CAAc,CAbO,CAuIvBnB,EAAAqB,gBAAA,CAvHAC,QAAiB,CAACF,CAAD,CAAU,CAUzB,IAVyB,IACrBJ,EAAK,EADgB,CAErBJ,EAAIQ,CAAAP,OAFiB,CAGrBU,EAAI,CAHiB,CAIrBC,EAAI,CAJiB,CAKrBlB,CALqB,CAMrBC,EAAIa,CAAA,CAAQR,CAAR,CAAY,CAAZ,CANiB,CAOrBJ,CAPqB,CAQrBiB,EAAI,CAER,CAAO,EAAET,CAAT,CAAaJ,CAAb,CAAA,CACEN,CAIA,CAJIC,CAIJ,CAHAA,CAGA,CAHIa,CAAA,CAAQJ,CAAR,CAGJ,CAFAS,CAEA,EAFKjB,CAEL,CAFSF,CAAA,CAAE,CAAF,CAET,CAFgBC,CAAA,CAAE,CAAF,CAEhB,CAFuBA,CAAA,CAAE,CAAF,CAEvB,CAF8BD,CAAA,CAAE,CAAF,CAE9B,CADAiB,CACA,GADMjB,CAAA,CAAE,CAAF,CACN,CADaC,CAAA,CAAE,CAAF,CACb,EADqBC,CACrB,CAAAgB,CAAA,GAAMlB,CAAA,CAAE,CAAF,CAAN,CAAaC,CAAA,CAAE,CAAF,CAAb,EAAqBC,CAGvB,OAAOiB,EAAA,EAAK,CAAL,CAAQ,CAACF,CAAD,CAAKE,CAAL,CAAQD,CAAR,CAAYC,CAAZ,CAlBU,CAwH3BzB,EAAA0B,YAAA,CAvEAC,QAAa,CAAChB,CAAD,CAAS,CACpB,GAA0B,CAA1B,EAAKC,CAAL,CAASD,CAAAE,OAAT,EAA6B,MAAO,KADhB,KAGhBG,CAHgB,CAIhBJ,CAJgB,CAKhBgB,EAAmBC,KAAJ,CAAUjB,CAAV,CALC,CAMhBkB,EAAoBD,KAAJ,CAAUjB,CAAV,CAEpB,KAAKI,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBJ,CAAhB,CAAmB,EAAEI,CAArB,CAAwBY,CAAA,CAAaZ,CAAb,CAAA,CAAkB,CAAC,CAACL,CAAA,CAAOK,CAAP,CAAA,CAAU,CAAV,CAAF,CAAgB,CAACL,CAAA,CAAOK,CAAP,CAAA,CAAU,CAAV,CAAjB,CAA+BA,CAA/B,CAC1CY,EAAAG,KAAA,CAAkBtB,CAAlB,CACA,KAAKO,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBJ,CAAhB,CAAmB,EAAEI,CAArB,CAAwBc,CAAA,CAAcd,CAAd,CAAA,CAAmB,CAACY,CAAA,CAAaZ,CAAb,CAAA,CAAgB,CAAhB,CAAD,CAAqB,CAACY,CAAA,CAAaZ,CAAb,CAAA,CAAgB,CAAhB,CAAtB,CAEvCgB,EAAAA,CAAetB,CAAA,CAAwBkB,CAAxB,CACfK,EAAAA,CAAevB,CAAA,CAAwBoB,CAAxB,CAbC,KAgBhBI,EAAWD,CAAA,CAAa,CAAb,CAAXC,GAA+BF,CAAA,CAAa,CAAb,CAhBf,CAiBhBG,EAAYF,CAAA,CAAaA,CAAApB,OAAb;AAAmC,CAAnC,CAAZsB,GAAsDH,CAAA,CAAaA,CAAAnB,OAAb,CAAmC,CAAnC,CAjBtC,CAkBhBc,EAAO,EAIX,KAAKX,CAAL,CAASgB,CAAAnB,OAAT,CAA+B,CAA/B,CAAuC,CAAvC,EAAkCG,CAAlC,CAA0C,EAAEA,CAA5C,CAA+CW,CAAAS,KAAA,CAAUzB,CAAA,CAAOiB,CAAA,CAAaI,CAAA,CAAahB,CAAb,CAAb,CAAA,CAA8B,CAA9B,CAAP,CAAV,CAC/C,KAAKA,CAAL,CAAS,CAACkB,CAAV,CAAoBlB,CAApB,CAAwBiB,CAAApB,OAAxB,CAA8CsB,CAA9C,CAAyD,EAAEnB,CAA3D,CAA8DW,CAAAS,KAAA,CAAUzB,CAAA,CAAOiB,CAAA,CAAaK,CAAA,CAAajB,CAAb,CAAb,CAAA,CAA8B,CAA9B,CAAP,CAAV,CAE9D,OAAOW,EAzBa,CAwEtB3B,EAAAqC,gBAAA,CA5CAC,QAAiB,CAAClB,CAAD,CAAUmB,CAAV,CAAiB,CAAA,IAC5B3B,EAAIQ,CAAAP,OADwB,CAE5B2B,EAAIpB,CAAA,CAAQR,CAAR,CAAY,CAAZ,CAFwB,CAG5BW,EAAIgB,CAAA,CAAM,CAAN,CAAUf,EAAAA,CAAIe,CAAA,CAAM,CAAN,CAKtB,KARgC,IAI5BE,EAAKD,CAAA,CAAE,CAAF,CAJuB,CAIjBE,EAAKF,CAAA,CAAE,CAAF,CAJY,CAK5BG,CAL4B,CAM5BC,EAAS,CAAA,CANmB,CAQvB5B,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,CAApB,CAAuB,EAAEI,CAAzB,CACEwB,CAES,CAFLpB,CAAA,CAAQJ,CAAR,CAEK,CAFO2B,CAEP,CAFYH,CAAA,CAAE,CAAF,CAEZ,CAFkBK,CAElB,CAFuBL,CAAA,CAAE,CAAF,CAEvB,CADHK,CACG,CADErB,CACF,GADUkB,CACV,CADelB,CACf,EADuBD,CACvB,EAD4BkB,CAC5B,CADiCE,CACjC,GADwCnB,CACxC,CAD4CqB,CAC5C,GADmDH,CACnD,CADwDG,CACxD,EAD8DF,CAC9D,GADmEC,CACnE,CAD4E,CAACA,CAC7E,EAATH,CAAS,CAAJE,CAAI,CAAAD,CAAA,CAAKG,CAGhB,OAAOD,EAdyB,CA6ClC5C,EAAA8C,cAAA,CA5BAjC,QAAe,CAACO,CAAD,CAAU,CAAA,IACnBJ,EAAK,EADc,CAEnBJ,EAAIQ,CAAAP,OAFe,CAGnBN,EAAIa,CAAA,CAAQR,CAAR,CAAY,CAAZ,CAHe,CAMnBmC,EAAKxC,CAAA,CAAE,CAAF,CACLyC,EAAAA,CAAKzC,CAAA,CAAE,CAAF,CAGT,KATA,IAOI0C,EAAY,CAEhB,CAAO,EAAEjC,CAAT,CAAaJ,CAAb,CAAA,CAAgB,CACd,IAAAsC,EAAKH,CACL,KAAAI,EAAKH,CACLzC,EAAA,CAAIa,CAAA,CAAQJ,CAAR,CACJ+B,EAAA,CAAKxC,CAAA,CAAE,CAAF,CACLyC,EAAA,CAAKzC,CAAA,CAAE,CAAF,CACL2C,EAAA,EAAMH,CACNI,EAAA,EAAMH,CACNC,EAAA,EAAaG,IAAAC,KAAA,CAAUH,CAAV,CAAeA,CAAf,CAAoBC,CAApB,CAAyBA,CAAzB,CARC,CAWhB,MAAOF,EArBgB,CA8BzBK,OAAAC,eAAA,CAAsBvD,CAAtB;AAA+B,YAA/B,CAA6C,CAAEwD,MAAO,CAAA,CAAT,CAA7C,CA9I4B,CAJ3B,CAFkH;\",\n\"sources\":[\"node_modules/d3-polygon/dist/d3-polygon.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_polygon$dist$d3_polygon\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-polygon/ v1.0.5 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\\n(factory((global.d3 = global.d3 || {})));\\n}(this, (function (exports) { 'use strict';\\n\\nfunction area(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      a,\\n      b = polygon[n - 1],\\n      area = 0;\\n\\n  while (++i < n) {\\n    a = b;\\n    b = polygon[i];\\n    area += a[1] * b[0] - a[0] * b[1];\\n  }\\n\\n  return area / 2;\\n}\\n\\nfunction centroid(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      x = 0,\\n      y = 0,\\n      a,\\n      b = polygon[n - 1],\\n      c,\\n      k = 0;\\n\\n  while (++i < n) {\\n    a = b;\\n    b = polygon[i];\\n    k += c = a[0] * b[1] - b[0] * a[1];\\n    x += (a[0] + b[0]) * c;\\n    y += (a[1] + b[1]) * c;\\n  }\\n\\n  return k *= 3, [x / k, y / k];\\n}\\n\\n// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\\n// negative if clockwise, and zero if the points are collinear.\\nfunction cross(a, b, c) {\\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\\n}\\n\\nfunction lexicographicOrder(a, b) {\\n  return a[0] - b[0] || a[1] - b[1];\\n}\\n\\n// Computes the upper convex hull per the monotone chain algorithm.\\n// Assumes points.length >= 3, is sorted by x, unique in y.\\n// Returns an array of indices into points in left-to-right order.\\nfunction computeUpperHullIndexes(points) {\\n  var n = points.length,\\n      indexes = [0, 1],\\n      size = 2;\\n\\n  for (var i = 2; i < n; ++i) {\\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\\n    indexes[size++] = i;\\n  }\\n\\n  return indexes.slice(0, size); // remove popped points\\n}\\n\\nfunction hull(points) {\\n  if ((n = points.length) < 3) return null;\\n\\n  var i,\\n      n,\\n      sortedPoints = new Array(n),\\n      flippedPoints = new Array(n);\\n\\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\\n  sortedPoints.sort(lexicographicOrder);\\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\\n\\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\\n\\n  // Construct the hull polygon, removing possible duplicate endpoints.\\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\\n      hull = [];\\n\\n  // Add upper hull in right-to-l order.\\n  // Then add lower hull in left-to-right order.\\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\\n\\n  return hull;\\n}\\n\\nfunction contains(polygon, point) {\\n  var n = polygon.length,\\n      p = polygon[n - 1],\\n      x = point[0], y = point[1],\\n      x0 = p[0], y0 = p[1],\\n      x1, y1,\\n      inside = false;\\n\\n  for (var i = 0; i < n; ++i) {\\n    p = polygon[i], x1 = p[0], y1 = p[1];\\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\\n    x0 = x1, y0 = y1;\\n  }\\n\\n  return inside;\\n}\\n\\nfunction length(polygon) {\\n  var i = -1,\\n      n = polygon.length,\\n      b = polygon[n - 1],\\n      xa,\\n      ya,\\n      xb = b[0],\\n      yb = b[1],\\n      perimeter = 0;\\n\\n  while (++i < n) {\\n    xa = xb;\\n    ya = yb;\\n    b = polygon[i];\\n    xb = b[0];\\n    yb = b[1];\\n    xa -= xb;\\n    ya -= yb;\\n    perimeter += Math.sqrt(xa * xa + ya * ya);\\n  }\\n\\n  return perimeter;\\n}\\n\\nexports.polygonArea = area;\\nexports.polygonCentroid = centroid;\\nexports.polygonHull = hull;\\nexports.polygonContains = contains;\\nexports.polygonLength = length;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"cross\",\"a\",\"b\",\"c\",\"lexicographicOrder\",\"computeUpperHullIndexes\",\"points\",\"n\",\"length\",\"indexes\",\"size\",\"i\",\"slice\",\"polygonArea\",\"area\",\"polygon\",\"polygonCentroid\",\"centroid\",\"x\",\"y\",\"k\",\"polygonHull\",\"hull\",\"sortedPoints\",\"Array\",\"flippedPoints\",\"sort\",\"upperIndexes\",\"lowerIndexes\",\"skipLeft\",\"skipRight\",\"push\",\"polygonContains\",\"contains\",\"point\",\"p\",\"x0\",\"y0\",\"x1\",\"inside\",\"y1\",\"polygonLength\",\"xb\",\"yb\",\"perimeter\",\"xa\",\"ya\",\"Math\",\"sqrt\",\"Object\",\"defineProperty\",\"value\"]\n}\n"]
["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight.js/lib/languages/hy.js"],"~:js","shadow$provide.module$node_modules$highlight_js$lib$languages$hy=function(d,k,c,e,g){e.exports=function(a){var b={className:\"number\",begin:\"[-+]?\\\\d+(\\\\.\\\\d+)?\",relevance:0},c=a.inherit(a.QUOTE_STRING_MODE,{illegal:null}),d=a.COMMENT(\";\",\"$\",{relevance:0}),e={className:\"literal\",begin:/\\b([Tt]rue|[Ff]alse|nil|None)\\b/},g={begin:\"[\\\\[\\\\{]\",end:\"[\\\\]\\\\}]\"},k={className:\"comment\",begin:\"\\\\^[a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'][a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'0-9/;:]*\"},z=a.COMMENT(\"\\\\^\\\\{\",\"\\\\}\"),B={className:\"symbol\",\nbegin:\"[:]{1,2}[a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'][a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'0-9/;:]*\"},D={begin:\"\\\\(\",end:\"\\\\)\"},C={endsWithParent:!0,relevance:0},Z={keywords:{\"builtin-name\":\"!\\x3d % %\\x3d \\x26 \\x26\\x3d * ** **\\x3d *\\x3d *map + +\\x3d , --build-class-- --import-- -\\x3d . / // //\\x3d /\\x3d \\x3c \\x3c\\x3c \\x3c\\x3c\\x3d \\x3c\\x3d \\x3d \\x3e \\x3e\\x3d \\x3e\\x3e \\x3e\\x3e\\x3d @ @\\x3d ^ ^\\x3d abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-\\x3e ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |\\x3d ~\"},\nlexemes:\"[a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'][a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'0-9/;:]*\",className:\"name\",begin:\"[a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'][a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'0-9/;:]*\",starts:C},N=[D,c,k,z,d,B,g,b,e,{begin:\"[a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'][a-zA-Z_\\\\-!.?+*\\x3d\\x3c\\x3e\\x26#'0-9/;:]*\",relevance:0}];D.contains=[a.COMMENT(\"comment\",\"\"),Z,C];C.contains=N;g.contains=N;return{aliases:[\"hylang\"],illegal:/\\S/,contains:[{className:\"meta\",begin:\"^#!\",end:\"$\"},D,c,k,z,d,B,g,b,e]}}}","~:source","shadow$provide[\"module$node_modules$highlight_js$lib$languages$hy\"] = function(global,process,require,module,exports) {\nmodule.exports = function(hljs) {\n  var keywords = {\n    'builtin-name':\n      // keywords\n      '!= % %= & &= * ** **= *= *map ' +\n      '+ += , --build-class-- --import-- -= . / // //= ' +\n      '/= < << <<= <= = > >= >> >>= ' +\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\n      'compress cond cons cons? continue count curry cut cycle dec ' +\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\n      'identity if if* if-not if-python2 import in inc input instance? ' +\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!', end: '$'\n  };\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n};\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["lexemes","begin","aliases","className","contains","relevance","keywords","starts","illegal","endsWithParent","end"]],"~:compiled-at",1535834855546,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_js$lib$languages$hy.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAwC,CACtHD,CAAAC,QAAA,CAAiBC,QAAQ,CAACC,CAAD,CAAO,CAgD9B,IAAIC,EAAS,CACXC,UAAW,QADA,CACUC,MAZAC,qBAWV,CAEXC,UAAW,CAFA,CAAb,CAIIC,EAASN,CAAAO,QAAA,CAAaP,CAAAQ,kBAAb,CAAqC,CAACC,QAAS,IAAV,CAArC,CAJb,CAKIC,EAAUV,CAAAU,QAAA,CACZ,GADY,CAEZ,GAFY,CAGZ,CACEL,UAAW,CADb,CAHY,CALd,CAYIM,EAAU,CACZT,UAAW,SADC,CAEZC,MAAO,iCAFK,CAZd,CAgBIS,EAAa,CACfT,MAAO,UADQ,CACIU,IAAK,UADT,CAhBjB,CAmBIC,EAAO,CACTZ,UAAW,SADF,CAETC,MAAO,kFAFE,CAnBX,CAuBIY,EAAWf,CAAAU,QAAA,CAAa,QAAb,CAAuB,KAAvB,CAvBf,CAwBIM,EAAM,CACRd,UAAW,QADH;AAERC,MAAO,uFAFC,CAxBV,CA4BIc,EAAO,CACTd,MAAO,KADE,CACKU,IAAK,KADV,CA5BX,CA+BIK,EAAO,CACTC,eAAgB,CAAA,CADP,CAETd,UAAW,CAFF,CA/BX,CAmCIe,EAAO,CACTC,SAnFaA,CACb,eAEE,kqEAHWA,CAkFJ;AAETC,QAjDcC,+EA+CL,CAGTrB,UAAW,MAHF,CAGUC,MAlDLoB,+EA+CL,CAITC,OAAQN,CAJC,CAnCX,CAyCIO,EAAmB,CAACR,CAAD,CAAOX,CAAP,CAAeQ,CAAf,CAAqBC,CAArB,CAA+BL,CAA/B,CAAwCM,CAAxC,CAA6CJ,CAA7C,CAAyDX,CAAzD,CAAiEU,CAAjE,CA7CVe,CACXvB,MATcoB,+EAQHG,CAEXrB,UAAW,CAFAqB,CA6CU,CAEvBT,EAAAU,SAAA,CAAgB,CAAC3B,CAAAU,QAAA,CAAa,SAAb,CAAwB,EAAxB,CAAD,CAA8BU,CAA9B,CAAoCF,CAApC,CAChBA,EAAAS,SAAA,CAAgBF,CAChBb,EAAAe,SAAA,CAAsBF,CAEtB,OAAO,CACLG,QAAS,CAAC,QAAD,CADJ,CAELnB,QAAS,IAFJ,CAGLkB,SAAU,CA3DEE,CACZ3B,UAAW,MADC2B,CAEZ1B,MAAO,KAFK0B,CAEEhB,IAAK,GAFPgB,CA2DF,CAAUZ,CAAV,CAAgBX,CAAhB,CAAwBQ,CAAxB,CAA8BC,CAA9B,CAAwCL,CAAxC,CAAiDM,CAAjD,CAAsDJ,CAAtD,CAAkEX,CAAlE,CAA0EU,CAA1E,CAHL,CA/FuB,CADsF;\",\n\"sources\":[\"node_modules/highlight.js/lib/languages/hy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_js$lib$languages$hy\\\"] = function(global,process,require,module,exports) {\\nmodule.exports = function(hljs) {\\n  var keywords = {\\n    'builtin-name':\\n      // keywords\\n      '!= % %= & &= * ** **= *= *map ' +\\n      '+ += , --build-class-- --import-- -= . / // //= ' +\\n      '/= < << <<= <= = > >= >> >>= ' +\\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\\n      'compress cond cons cons? continue count curry cut cycle dec ' +\\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\\n      'identity if if* if-not if-python2 import in inc input instance? ' +\\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\\n   };\\n\\n  var SYMBOLSTART = 'a-zA-Z_\\\\\\\\-!.?+*=<>&#\\\\'';\\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d+)?';\\n\\n  var SHEBANG = {\\n    className: 'meta',\\n    begin: '^#!', end: '$'\\n  };\\n\\n  var SYMBOL = {\\n    begin: SYMBOL_RE,\\n    relevance: 0\\n  };\\n  var NUMBER = {\\n    className: 'number', begin: SIMPLE_NUMBER_RE,\\n    relevance: 0\\n  };\\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\\n  var COMMENT = hljs.COMMENT(\\n    ';',\\n    '$',\\n    {\\n      relevance: 0\\n    }\\n  );\\n  var LITERAL = {\\n    className: 'literal',\\n    begin: /\\\\b([Tt]rue|[Ff]alse|nil|None)\\\\b/\\n  };\\n  var COLLECTION = {\\n    begin: '[\\\\\\\\[\\\\\\\\{]', end: '[\\\\\\\\]\\\\\\\\}]'\\n  };\\n  var HINT = {\\n    className: 'comment',\\n    begin: '\\\\\\\\^' + SYMBOL_RE\\n  };\\n  var HINT_COL = hljs.COMMENT('\\\\\\\\^\\\\\\\\{', '\\\\\\\\}');\\n  var KEY = {\\n    className: 'symbol',\\n    begin: '[:]{1,2}' + SYMBOL_RE\\n  };\\n  var LIST = {\\n    begin: '\\\\\\\\(', end: '\\\\\\\\)'\\n  };\\n  var BODY = {\\n    endsWithParent: true,\\n    relevance: 0\\n  };\\n  var NAME = {\\n    keywords: keywords,\\n    lexemes: SYMBOL_RE,\\n    className: 'name', begin: SYMBOL_RE,\\n    starts: BODY\\n  };\\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\\n\\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\\n  BODY.contains = DEFAULT_CONTAINS;\\n  COLLECTION.contains = DEFAULT_CONTAINS;\\n\\n  return {\\n    aliases: ['hylang'],\\n    illegal: /\\\\S/,\\n    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\\n  }\\n};\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"module.exports\",\"hljs\",\"NUMBER\",\"className\",\"begin\",\"SIMPLE_NUMBER_RE\",\"relevance\",\"STRING\",\"inherit\",\"QUOTE_STRING_MODE\",\"illegal\",\"COMMENT\",\"LITERAL\",\"COLLECTION\",\"end\",\"HINT\",\"HINT_COL\",\"KEY\",\"LIST\",\"BODY\",\"endsWithParent\",\"NAME\",\"keywords\",\"lexemes\",\"SYMBOL_RE\",\"starts\",\"DEFAULT_CONTAINS\",\"SYMBOL\",\"contains\",\"aliases\",\"SHEBANG\"]\n}\n"]
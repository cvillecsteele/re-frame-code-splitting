["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-force/dist/d3-force.js"],"~:js","shadow$provide.module$node_modules$d3_force$dist$d3_force=function(da,fa,D,L,v){(function(a,b){\"object\"===typeof v&&\"undefined\"!==typeof L?b(v,D(\"module$node_modules$d3_quadtree$dist$d3_quadtree\"),D(\"module$node_modules$d3_collection$dist$d3_collection\"),D(\"module$node_modules$d3_dispatch$dist$d3_dispatch\"),D(\"module$node_modules$d3_timer$dist$d3_timer\")):\"function\"===typeof define&&define.amd?define([\"exports\",\"d3-quadtree\",\"d3-collection\",\"d3-dispatch\",\"d3-timer\"],b):b(a.d3=a.d3||{},a.d3,a.d3,a.d3,\na.d3)})(this,function(a,b,p,v,A){function n(a){return function(){return a}}function E(){return 1E-6*(Math.random()-.5)}function y(a){return a.x+a.vx}function H(a){return a.y+a.vy}function f(a){return a.index}function e(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function t(a){return a.x}function M(a){return a.y}var P=Math.PI*(3-Math.sqrt(5));a.forceCenter=function(a,b){function e(){var d,e=k.length,l=0,f=0;for(d=0;d<e;++d){var n=k[d];l+=n.x;f+=n.y}l=l/e-a;f=f/e-b;for(d=0;d<e;++d)n=k[d],\nn.x-=l,n.y-=f}var k;null==a&&(a=0);null==b&&(b=0);e.initialize=function(a){k=a};e.x=function(b){return arguments.length?(a=+b,e):a};e.y=function(a){return arguments.length?(b=+a,e):b};return e};a.forceCollide=function(a){function e(){function a(a,b,d,e,k){var f=a.data;a=a.r;var l=A+a;if(f)f.index>C.index&&(b=t-f.x-f.vx,d=q-f.y-f.vy,e=b*b+d*d,e<l*l&&(0===b&&(b=E(),e+=b*b),0===d&&(d=E(),e+=d*d),e=(l-(e=Math.sqrt(e)))/e*p,C.vx+=(b*=e)*(l=(a*=a)/(K+a)),C.vy+=(d*=e)*l,f.vx-=b*(l=1-l),f.vy-=d*l));else return b>\nt+l||e<t-l||d>q+l||k<q-l}for(var e,k=d.length,n,C,t,q,A,K,x=0;x<B;++x)for(n=b.quadtree(d,y,H).visitAfter(l),e=0;e<k;++e)C=d[e],A=f[C.index],K=A*A,t=C.x+C.vx,q=C.y+C.vy,n.visit(a)}function l(a){if(a.data)return a.r=f[a.data.index];for(var b=a.r=0;4>b;++b)a[b]&&a[b].r>a.r&&(a.r=a[b].r)}function k(){if(d){var b,e=d.length;f=Array(e);for(b=0;b<e;++b){var k=d[b];f[k.index]=+a(k,b,d)}}}var d,f,p=1,B=1;\"function\"!==typeof a&&(a=n(null==a?1:+a));e.initialize=function(a){d=a;k()};e.iterations=function(a){return arguments.length?\n(B=+a,e):B};e.strength=function(a){return arguments.length?(p=+a,e):p};e.radius=function(b){return arguments.length?(a=\"function\"===typeof b?b:n(+b),k(),e):a};return e};a.forceLink=function(a){function b(b){for(var d=0,e=a.length;d<G;++d)for(var k=0,f,l,q,r,n;k<e;++k)f=a[k],l=f.source,f=f.target,q=f.x+f.vx-l.x-l.vx||E(),r=f.y+f.vy-l.y-l.vy||E(),n=Math.sqrt(q*q+r*r),n=(n-N[k])/n*b*B[k],q*=n,r*=n,f.vx-=q*(n=Q[k]),f.vy-=r*n,l.vx+=q*(n=1-n),l.vy+=r*n}function l(){if(v){var b=v.length,f=a.length,l=p.map(v,\nt);var n=0;for(H=Array(b);n<f;++n)b=a[n],b.index=n,\"object\"!==typeof b.source&&(b.source=e(l,b.source)),\"object\"!==typeof b.target&&(b.target=e(l,b.target)),H[b.source.index]=(H[b.source.index]||0)+1,H[b.target.index]=(H[b.target.index]||0)+1;n=0;for(Q=Array(f);n<f;++n)b=a[n],Q[n]=H[b.source.index]/(H[b.source.index]+H[b.target.index]);B=Array(f);k();N=Array(f);d()}}function k(){if(v)for(var b=0,d=a.length;b<d;++b)B[b]=+y(a[b],b,a)}function d(){if(v)for(var b=0,d=a.length;b<d;++b)N[b]=+A(a[b],b,a)}\nvar t=f,y=function(a){return 1/Math.min(H[a.source.index],H[a.target.index])},B,A=n(30),N,v,H,Q,G=1;null==a&&(a=[]);b.initialize=function(a){v=a;l()};b.links=function(d){return arguments.length?(a=d,l(),b):a};b.id=function(a){return arguments.length?(t=a,b):t};b.iterations=function(a){return arguments.length?(G=+a,b):G};b.strength=function(a){return arguments.length?(y=\"function\"===typeof a?a:n(+a),k(),b):y};b.distance=function(a){return arguments.length?(A=\"function\"===typeof a?a:n(+a),d(),b):A};\nreturn b};a.forceManyBody=function(){function a(a){var e=d.length,l=b.quadtree(d,t,M).visitAfter(f);y=a;for(a=0;a<e;++a)p=d[a],l.visit(k)}function e(){if(d){var a,b=d.length;A=Array(b);for(a=0;a<b;++a){var e=d[a];A[e.index]=+B(e,a,d)}}}function f(a){var b=0,d,e,k=0,f,l,n;if(a.length){for(f=l=n=0;4>n;++n)(d=a[n])&&(e=Math.abs(d.value))&&(b+=d.value,k+=e,f+=e*d.x,l+=e*d.y);a.x=f/k;a.y=l/k}else{d=a;d.x=d.data.x;d.y=d.data.y;do b+=A[d.data.index];while(d=d.next)}a.value=b}function k(a,b,d,e){if(!a.value)return!0;\nd=a.x-p.x;var k=a.y-p.y;b=e-b;e=d*d+k*k;if(b*b/H<e)return e<v&&(0===d&&(d=E(),e+=d*d),0===k&&(k=E(),e+=k*k),e<N&&(e=Math.sqrt(N*e)),p.vx+=d*a.value*y/e,p.vy+=k*a.value*y/e),!0;if(!(a.length||e>=v)){if(a.data!==p||a.next)0===d&&(d=E(),e+=d*d),0===k&&(k=E(),e+=k*k),e<N&&(e=Math.sqrt(N*e));do a.data!==p&&(b=A[a.data.index]*y/e,p.vx+=d*b,p.vy+=k*b);while(a=a.next)}}var d,p,y,B=n(-30),A,N=1,v=Infinity,H=.81;a.initialize=function(a){d=a;e()};a.strength=function(b){return arguments.length?(B=\"function\"===\ntypeof b?b:n(+b),e(),a):B};a.distanceMin=function(b){return arguments.length?(N=b*b,a):Math.sqrt(N)};a.distanceMax=function(b){return arguments.length?(v=b*b,a):Math.sqrt(v)};a.theta=function(b){return arguments.length?(H=b*b,a):Math.sqrt(H)};return a};a.forceRadial=function(a,b,e){function k(a){for(var d=0,k=f.length;d<k;++d){var l=f[d],n=l.x-b||1E-6,q=l.y-e||1E-6,t=Math.sqrt(n*n+q*q);t=(C[d]-t)*p[d]*a/t;l.vx+=n*t;l.vy+=q*t}}function d(){if(f){var b,d=f.length;p=Array(d);C=Array(d);for(b=0;b<d;++b)C[b]=\n+a(f[b],b,f),p[b]=isNaN(C[b])?0:+l(f[b],b,f)}}var f,l=n(.1),p,C;\"function\"!==typeof a&&(a=n(+a));null==b&&(b=0);null==e&&(e=0);k.initialize=function(a){f=a;d()};k.strength=function(a){return arguments.length?(l=\"function\"===typeof a?a:n(+a),d(),k):l};k.radius=function(b){return arguments.length?(a=\"function\"===typeof b?b:n(+b),d(),k):a};k.x=function(a){return arguments.length?(b=+a,k):b};k.y=function(a){return arguments.length?(e=+a,k):e};return k};a.forceSimulation=function(a){function b(){e();G.call(\"tick\",\nf);l<n&&(Q.stop(),G.call(\"end\",f))}function e(){var b,d=a.length;l+=(y-l)*t;E.each(function(a){a(l)});for(b=0;b<d;++b){var e=a[b];null==e.fx?e.x+=e.vx*=H:(e.x=e.fx,e.vx=0);null==e.fy?e.y+=e.vy*=H:(e.y=e.fy,e.vy=0)}}function k(){for(var b=0,d=a.length,e;b<d;++b){e=a[b];e.index=b;if(isNaN(e.x)||isNaN(e.y)){var k=10*Math.sqrt(b),f=b*P;e.x=k*Math.cos(f);e.y=k*Math.sin(f)}if(isNaN(e.vx)||isNaN(e.vy))e.vx=e.vy=0}}function d(b){b.initialize&&b.initialize(a);return b}var f,l=1,n=.001,t=1-Math.pow(n,1/300),\ny=0,H=.6,E=p.map(),Q=A.timer(b),G=v.dispatch(\"tick\",\"end\");null==a&&(a=[]);k();return f={tick:e,restart:function(){return Q.restart(b),f},stop:function(){return Q.stop(),f},nodes:function(b){return arguments.length?(a=b,k(),E.each(d),f):a},alpha:function(a){return arguments.length?(l=+a,f):l},alphaMin:function(a){return arguments.length?(n=+a,f):n},alphaDecay:function(a){return arguments.length?(t=+a,f):+t},alphaTarget:function(a){return arguments.length?(y=+a,f):y},velocityDecay:function(a){return arguments.length?\n(H=1-a,f):1-H},force:function(a,b){return 1<arguments.length?(null==b?E.remove(a):E.set(a,d(b)),f):E.get(a)},find:function(b,d,e){var k,f=a.length;e=null==e?Infinity:e*e;for(k=0;k<f;++k){var l=a[k];var n=b-l.x;var r=d-l.y;n=n*n+r*r;if(n<e){var z=l;e=n}}return z},on:function(a,b){return 1<arguments.length?(G.on(a,b),f):G.on(a)}}};a.forceX=function(a){function b(a){for(var b=0,e=d.length,k;b<e;++b)k=d[b],k.vx+=(l[b]-k.x)*f[b]*a}function e(){if(d){var b,e=d.length;f=Array(e);l=Array(e);for(b=0;b<e;++b)f[b]=\nisNaN(l[b]=+a(d[b],b,d))?0:+k(d[b],b,d)}}var k=n(.1),d,f,l;\"function\"!==typeof a&&(a=n(null==a?0:+a));b.initialize=function(a){d=a;e()};b.strength=function(a){return arguments.length?(k=\"function\"===typeof a?a:n(+a),e(),b):k};b.x=function(d){return arguments.length?(a=\"function\"===typeof d?d:n(+d),e(),b):a};return b};a.forceY=function(a){function b(a){for(var b=0,e=d.length,k;b<e;++b)k=d[b],k.vy+=(l[b]-k.y)*f[b]*a}function e(){if(d){var b,e=d.length;f=Array(e);l=Array(e);for(b=0;b<e;++b)f[b]=isNaN(l[b]=\n+a(d[b],b,d))?0:+k(d[b],b,d)}}var k=n(.1),d,f,l;\"function\"!==typeof a&&(a=n(null==a?0:+a));b.initialize=function(a){d=a;e()};b.strength=function(a){return arguments.length?(k=\"function\"===typeof a?a:n(+a),e(),b):k};b.y=function(d){return arguments.length?(a=\"function\"===typeof d?d:n(+d),e(),b):a};return b};Object.defineProperty(a,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_force$dist$d3_force\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-force/ v1.1.2 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\n(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\n}(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\n\nfunction center(x, y) {\n  var nodes;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction jiggle() {\n  return (Math.random() - 0.5) * 1e-6;\n}\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nfunction collide(radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\n\nfunction link(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle();\n        y = target.y + target.vy - source.y - source.vy || jiggle();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = d3Collection.map(nodes, id),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n\nfunction x$1(d) {\n  return d.x;\n}\n\nfunction y$1(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nfunction simulation(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = d3Collection.map(),\n      stepper = d3Timer.timer(step),\n      event = d3Dispatch.dispatch(\"tick\", \"end\");\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick() {\n    var i, n = nodes.length, node;\n\n    alpha += (alphaTarget - alpha) * alphaDecay;\n\n    forces.each(function(force) {\n      force(alpha);\n    });\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (node.fx == null) node.x += node.vx *= velocityDecay;\n      else node.x = node.fx, node.vx = 0;\n      if (node.fy == null) node.y += node.vy *= velocityDecay;\n      else node.y = node.fy, node.vy = 0;\n    }\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n\nfunction manyBody() {\n  var nodes,\n      node,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(), l += x * x;\n      if (y === 0) y = jiggle(), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n\nfunction radial(radius, x, y) {\n  var nodes,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = node.y - y || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      node.vy += dy * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _, initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n\nfunction x$2(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n\nfunction y$2(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n\nexports.forceCenter = center;\nexports.forceCollide = collide;\nexports.forceLink = link;\nexports.forceManyBody = manyBody;\nexports.forceRadial = radial;\nexports.forceSimulation = simulation;\nexports.forceX = x$2;\nexports.forceY = y$2;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$d3_dispatch$dist$d3_dispatch","~$module$node_modules$d3_collection$dist$d3_collection","~$shadow.js","~$module$node_modules$d3_timer$dist$d3_timer","~$module$node_modules$d3_quadtree$dist$d3_quadtree"]],"~:properties",["^5",["stop","tick","alphaMin","index","find","forceY","distanceMin","x","__esModule","force","radius","id","d3","velocityDecay","forceCenter","distanceMax","iterations","forceLink","vx","forceCollide","value","vy","distance","on","links","nodes","source","restart","forceRadial","forceManyBody","initialize","r","y","target","theta","forceX","alpha","alphaTarget","strength","alphaDecay","forceSimulation"]],"~:compiled-at",1535846555718,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_force$dist$d3_force.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-force/dist/d3-force.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_force$dist$d3_force\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-force/ v1.1.2 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :\\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :\\n(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));\\n}(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';\\n\\nfunction center(x, y) {\\n  var nodes;\\n\\n  if (x == null) x = 0;\\n  if (y == null) y = 0;\\n\\n  function force() {\\n    var i,\\n        n = nodes.length,\\n        node,\\n        sx = 0,\\n        sy = 0;\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i], sx += node.x, sy += node.y;\\n    }\\n\\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\\n      node = nodes[i], node.x -= sx, node.y -= sy;\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = +_, force) : x;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = +_, force) : y;\\n  };\\n\\n  return force;\\n}\\n\\nfunction constant(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\\nfunction jiggle() {\\n  return (Math.random() - 0.5) * 1e-6;\\n}\\n\\nfunction x(d) {\\n  return d.x + d.vx;\\n}\\n\\nfunction y(d) {\\n  return d.y + d.vy;\\n}\\n\\nfunction collide(radius) {\\n  var nodes,\\n      radii,\\n      strength = 1,\\n      iterations = 1;\\n\\n  if (typeof radius !== \\\"function\\\") radius = constant(radius == null ? 1 : +radius);\\n\\n  function force() {\\n    var i, n = nodes.length,\\n        tree,\\n        node,\\n        xi,\\n        yi,\\n        ri,\\n        ri2;\\n\\n    for (var k = 0; k < iterations; ++k) {\\n      tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\\n      for (i = 0; i < n; ++i) {\\n        node = nodes[i];\\n        ri = radii[node.index], ri2 = ri * ri;\\n        xi = node.x + node.vx;\\n        yi = node.y + node.vy;\\n        tree.visit(apply);\\n      }\\n    }\\n\\n    function apply(quad, x0, y0, x1, y1) {\\n      var data = quad.data, rj = quad.r, r = ri + rj;\\n      if (data) {\\n        if (data.index > node.index) {\\n          var x = xi - data.x - data.vx,\\n              y = yi - data.y - data.vy,\\n              l = x * x + y * y;\\n          if (l < r * r) {\\n            if (x === 0) x = jiggle(), l += x * x;\\n            if (y === 0) y = jiggle(), l += y * y;\\n            l = (r - (l = Math.sqrt(l))) / l * strength;\\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\\n            node.vy += (y *= l) * r;\\n            data.vx -= x * (r = 1 - r);\\n            data.vy -= y * r;\\n          }\\n        }\\n        return;\\n      }\\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\\n    }\\n  }\\n\\n  function prepare(quad) {\\n    if (quad.data) return quad.r = radii[quad.data.index];\\n    for (var i = quad.r = 0; i < 4; ++i) {\\n      if (quad[i] && quad[i].r > quad.r) {\\n        quad.r = quad[i].r;\\n      }\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length, node;\\n    radii = new Array(n);\\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.iterations = function(_) {\\n    return arguments.length ? (iterations = +_, force) : iterations;\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = +_, force) : strength;\\n  };\\n\\n  force.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : radius;\\n  };\\n\\n  return force;\\n}\\n\\nfunction index(d) {\\n  return d.index;\\n}\\n\\nfunction find(nodeById, nodeId) {\\n  var node = nodeById.get(nodeId);\\n  if (!node) throw new Error(\\\"missing: \\\" + nodeId);\\n  return node;\\n}\\n\\nfunction link(links) {\\n  var id = index,\\n      strength = defaultStrength,\\n      strengths,\\n      distance = constant(30),\\n      distances,\\n      nodes,\\n      count,\\n      bias,\\n      iterations = 1;\\n\\n  if (links == null) links = [];\\n\\n  function defaultStrength(link) {\\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\\n  }\\n\\n  function force(alpha) {\\n    for (var k = 0, n = links.length; k < iterations; ++k) {\\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\\n        link = links[i], source = link.source, target = link.target;\\n        x = target.x + target.vx - source.x - source.vx || jiggle();\\n        y = target.y + target.vy - source.y - source.vy || jiggle();\\n        l = Math.sqrt(x * x + y * y);\\n        l = (l - distances[i]) / l * alpha * strengths[i];\\n        x *= l, y *= l;\\n        target.vx -= x * (b = bias[i]);\\n        target.vy -= y * b;\\n        source.vx += x * (b = 1 - b);\\n        source.vy += y * b;\\n      }\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n\\n    var i,\\n        n = nodes.length,\\n        m = links.length,\\n        nodeById = d3Collection.map(nodes, id),\\n        link;\\n\\n    for (i = 0, count = new Array(n); i < m; ++i) {\\n      link = links[i], link.index = i;\\n      if (typeof link.source !== \\\"object\\\") link.source = find(nodeById, link.source);\\n      if (typeof link.target !== \\\"object\\\") link.target = find(nodeById, link.target);\\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\\n    }\\n\\n    for (i = 0, bias = new Array(m); i < m; ++i) {\\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\\n    }\\n\\n    strengths = new Array(m), initializeStrength();\\n    distances = new Array(m), initializeDistance();\\n  }\\n\\n  function initializeStrength() {\\n    if (!nodes) return;\\n\\n    for (var i = 0, n = links.length; i < n; ++i) {\\n      strengths[i] = +strength(links[i], i, links);\\n    }\\n  }\\n\\n  function initializeDistance() {\\n    if (!nodes) return;\\n\\n    for (var i = 0, n = links.length; i < n; ++i) {\\n      distances[i] = +distance(links[i], i, links);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.links = function(_) {\\n    return arguments.length ? (links = _, initialize(), force) : links;\\n  };\\n\\n  force.id = function(_) {\\n    return arguments.length ? (id = _, force) : id;\\n  };\\n\\n  force.iterations = function(_) {\\n    return arguments.length ? (iterations = +_, force) : iterations;\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \\\"function\\\" ? _ : constant(+_), initializeStrength(), force) : strength;\\n  };\\n\\n  force.distance = function(_) {\\n    return arguments.length ? (distance = typeof _ === \\\"function\\\" ? _ : constant(+_), initializeDistance(), force) : distance;\\n  };\\n\\n  return force;\\n}\\n\\nfunction x$1(d) {\\n  return d.x;\\n}\\n\\nfunction y$1(d) {\\n  return d.y;\\n}\\n\\nvar initialRadius = 10,\\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\\n\\nfunction simulation(nodes) {\\n  var simulation,\\n      alpha = 1,\\n      alphaMin = 0.001,\\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\\n      alphaTarget = 0,\\n      velocityDecay = 0.6,\\n      forces = d3Collection.map(),\\n      stepper = d3Timer.timer(step),\\n      event = d3Dispatch.dispatch(\\\"tick\\\", \\\"end\\\");\\n\\n  if (nodes == null) nodes = [];\\n\\n  function step() {\\n    tick();\\n    event.call(\\\"tick\\\", simulation);\\n    if (alpha < alphaMin) {\\n      stepper.stop();\\n      event.call(\\\"end\\\", simulation);\\n    }\\n  }\\n\\n  function tick() {\\n    var i, n = nodes.length, node;\\n\\n    alpha += (alphaTarget - alpha) * alphaDecay;\\n\\n    forces.each(function(force) {\\n      force(alpha);\\n    });\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i];\\n      if (node.fx == null) node.x += node.vx *= velocityDecay;\\n      else node.x = node.fx, node.vx = 0;\\n      if (node.fy == null) node.y += node.vy *= velocityDecay;\\n      else node.y = node.fy, node.vy = 0;\\n    }\\n  }\\n\\n  function initializeNodes() {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.index = i;\\n      if (isNaN(node.x) || isNaN(node.y)) {\\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\\n        node.x = radius * Math.cos(angle);\\n        node.y = radius * Math.sin(angle);\\n      }\\n      if (isNaN(node.vx) || isNaN(node.vy)) {\\n        node.vx = node.vy = 0;\\n      }\\n    }\\n  }\\n\\n  function initializeForce(force) {\\n    if (force.initialize) force.initialize(nodes);\\n    return force;\\n  }\\n\\n  initializeNodes();\\n\\n  return simulation = {\\n    tick: tick,\\n\\n    restart: function() {\\n      return stepper.restart(step), simulation;\\n    },\\n\\n    stop: function() {\\n      return stepper.stop(), simulation;\\n    },\\n\\n    nodes: function(_) {\\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\\n    },\\n\\n    alpha: function(_) {\\n      return arguments.length ? (alpha = +_, simulation) : alpha;\\n    },\\n\\n    alphaMin: function(_) {\\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\\n    },\\n\\n    alphaDecay: function(_) {\\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\\n    },\\n\\n    alphaTarget: function(_) {\\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\\n    },\\n\\n    velocityDecay: function(_) {\\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\\n    },\\n\\n    force: function(name, _) {\\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\\n    },\\n\\n    find: function(x, y, radius) {\\n      var i = 0,\\n          n = nodes.length,\\n          dx,\\n          dy,\\n          d2,\\n          node,\\n          closest;\\n\\n      if (radius == null) radius = Infinity;\\n      else radius *= radius;\\n\\n      for (i = 0; i < n; ++i) {\\n        node = nodes[i];\\n        dx = x - node.x;\\n        dy = y - node.y;\\n        d2 = dx * dx + dy * dy;\\n        if (d2 < radius) closest = node, radius = d2;\\n      }\\n\\n      return closest;\\n    },\\n\\n    on: function(name, _) {\\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\\n    }\\n  };\\n}\\n\\nfunction manyBody() {\\n  var nodes,\\n      node,\\n      alpha,\\n      strength = constant(-30),\\n      strengths,\\n      distanceMin2 = 1,\\n      distanceMax2 = Infinity,\\n      theta2 = 0.81;\\n\\n  function force(_) {\\n    var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length, node;\\n    strengths = new Array(n);\\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\\n  }\\n\\n  function accumulate(quad) {\\n    var strength = 0, q, c, weight = 0, x, y, i;\\n\\n    // For internal nodes, accumulate forces from child quadrants.\\n    if (quad.length) {\\n      for (x = y = i = 0; i < 4; ++i) {\\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\\n        }\\n      }\\n      quad.x = x / weight;\\n      quad.y = y / weight;\\n    }\\n\\n    // For leaf nodes, accumulate forces from coincident quadrants.\\n    else {\\n      q = quad;\\n      q.x = q.data.x;\\n      q.y = q.data.y;\\n      do strength += strengths[q.data.index];\\n      while (q = q.next);\\n    }\\n\\n    quad.value = strength;\\n  }\\n\\n  function apply(quad, x1, _, x2) {\\n    if (!quad.value) return true;\\n\\n    var x = quad.x - node.x,\\n        y = quad.y - node.y,\\n        w = x2 - x1,\\n        l = x * x + y * y;\\n\\n    // Apply the Barnes-Hut approximation if possible.\\n    // Limit forces for very close nodes; randomize direction if coincident.\\n    if (w * w / theta2 < l) {\\n      if (l < distanceMax2) {\\n        if (x === 0) x = jiggle(), l += x * x;\\n        if (y === 0) y = jiggle(), l += y * y;\\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\\n        node.vx += x * quad.value * alpha / l;\\n        node.vy += y * quad.value * alpha / l;\\n      }\\n      return true;\\n    }\\n\\n    // Otherwise, process points directly.\\n    else if (quad.length || l >= distanceMax2) return;\\n\\n    // Limit forces for very close nodes; randomize direction if coincident.\\n    if (quad.data !== node || quad.next) {\\n      if (x === 0) x = jiggle(), l += x * x;\\n      if (y === 0) y = jiggle(), l += y * y;\\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\\n    }\\n\\n    do if (quad.data !== node) {\\n      w = strengths[quad.data.index] * alpha / l;\\n      node.vx += x * w;\\n      node.vy += y * w;\\n    } while (quad = quad.next);\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.distanceMin = function(_) {\\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\\n  };\\n\\n  force.distanceMax = function(_) {\\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\\n  };\\n\\n  force.theta = function(_) {\\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\\n  };\\n\\n  return force;\\n}\\n\\nfunction radial(radius, x, y) {\\n  var nodes,\\n      strength = constant(0.1),\\n      strengths,\\n      radiuses;\\n\\n  if (typeof radius !== \\\"function\\\") radius = constant(+radius);\\n  if (x == null) x = 0;\\n  if (y == null) y = 0;\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length; i < n; ++i) {\\n      var node = nodes[i],\\n          dx = node.x - x || 1e-6,\\n          dy = node.y - y || 1e-6,\\n          r = Math.sqrt(dx * dx + dy * dy),\\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\\n      node.vx += dx * k;\\n      node.vy += dy * k;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    radiuses = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      radiuses[i] = +radius(nodes[i], i, nodes);\\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _, initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : radius;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = +_, force) : x;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = +_, force) : y;\\n  };\\n\\n  return force;\\n}\\n\\nfunction x$2(x) {\\n  var strength = constant(0.1),\\n      nodes,\\n      strengths,\\n      xz;\\n\\n  if (typeof x !== \\\"function\\\") x = constant(x == null ? 0 : +x);\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    xz = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.x = function(_) {\\n    return arguments.length ? (x = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : x;\\n  };\\n\\n  return force;\\n}\\n\\nfunction y$2(y) {\\n  var strength = constant(0.1),\\n      nodes,\\n      strengths,\\n      yz;\\n\\n  if (typeof y !== \\\"function\\\") y = constant(y == null ? 0 : +y);\\n\\n  function force(alpha) {\\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\\n    }\\n  }\\n\\n  function initialize() {\\n    if (!nodes) return;\\n    var i, n = nodes.length;\\n    strengths = new Array(n);\\n    yz = new Array(n);\\n    for (i = 0; i < n; ++i) {\\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\\n    }\\n  }\\n\\n  force.initialize = function(_) {\\n    nodes = _;\\n    initialize();\\n  };\\n\\n  force.strength = function(_) {\\n    return arguments.length ? (strength = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : strength;\\n  };\\n\\n  force.y = function(_) {\\n    return arguments.length ? (y = typeof _ === \\\"function\\\" ? _ : constant(+_), initialize(), force) : y;\\n  };\\n\\n  return force;\\n}\\n\\nexports.forceCenter = center;\\nexports.forceCollide = collide;\\nexports.forceLink = link;\\nexports.forceManyBody = manyBody;\\nexports.forceRadial = radial;\\nexports.forceSimulation = simulation;\\nexports.forceX = x$2;\\nexports.forceY = y$2;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"d3Quadtree\",\"d3Collection\",\"d3Dispatch\",\"d3Timer\",\"constant\",\"x\",\"jiggle\",\"Math\",\"random\",\"d\",\"vx\",\"y\",\"vy\",\"index\",\"find\",\"nodeById\",\"nodeId\",\"node\",\"get\",\"Error\",\"x$1\",\"y$1\",\"initialAngle\",\"PI\",\"sqrt\",\"forceCenter\",\"center\",\"force\",\"i\",\"n\",\"nodes\",\"length\",\"sx\",\"sy\",\"initialize\",\"force.initialize\",\"_\",\"force.x\",\"arguments\",\"force.y\",\"forceCollide\",\"collide\",\"radius\",\"apply\",\"quad\",\"x0\",\"y0\",\"x1\",\"y1\",\"data\",\"rj\",\"r\",\"ri\",\"xi\",\"yi\",\"l\",\"strength\",\"ri2\",\"tree\",\"k\",\"iterations\",\"quadtree\",\"visitAfter\",\"prepare\",\"radii\",\"visit\",\"Array\",\"force.iterations\",\"force.strength\",\"force.radius\",\"forceLink\",\"link\",\"links\",\"alpha\",\"source\",\"target\",\"distances\",\"strengths\",\"b\",\"bias\",\"m\",\"map\",\"id\",\"count\",\"initializeStrength\",\"initializeDistance\",\"distance\",\"defaultStrength\",\"min\",\"force.links\",\"force.id\",\"force.distance\",\"forceManyBody\",\"manyBody\",\"accumulate\",\"q\",\"c\",\"weight\",\"abs\",\"value\",\"next\",\"x2\",\"w\",\"theta2\",\"distanceMax2\",\"distanceMin2\",\"Infinity\",\"distanceMin\",\"force.distanceMin\",\"distanceMax\",\"force.distanceMax\",\"theta\",\"force.theta\",\"forceRadial\",\"radial\",\"dx\",\"dy\",\"radiuses\",\"isNaN\",\"forceSimulation\",\"simulation\",\"step\",\"tick\",\"event\",\"call\",\"alphaMin\",\"stepper\",\"stop\",\"alphaTarget\",\"alphaDecay\",\"forces\",\"each\",\"fx\",\"velocityDecay\",\"fy\",\"initializeNodes\",\"initialRadius\",\"angle\",\"cos\",\"sin\",\"initializeForce\",\"pow\",\"timer\",\"dispatch\",\"restart\",\"name\",\"remove\",\"set\",\"d2\",\"closest\",\"on\",\"forceX\",\"x$2\",\"xz\",\"forceY\",\"y$2\",\"yz\",\"Object\",\"defineProperty\"]\n}\n"]
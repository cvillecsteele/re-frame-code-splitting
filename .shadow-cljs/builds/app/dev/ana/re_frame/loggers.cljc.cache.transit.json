["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___36441 = arguments.length;\nvar i__4500__auto___36442 = (0);\nwhile(true){\nif((i__4500__auto___36442 < len__4499__auto___36441)){\nargs__4502__auto__.push((arguments[i__4500__auto___36442]));\n\nvar G__36444 = (i__4500__auto___36442 + (1));\ni__4500__auto___36442 = G__36444;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((1) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4503__auto__);\n});\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1([\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join('')),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__36434 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__36434) : level.call(null,G__36434));\n})(),args);\n});\n\nre_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.loggers.console.cljs$lang$applyTo = (function (seq36430){\nvar G__36431 = cljs.core.first(seq36430);\nvar seq36430__$1 = cljs.core.next(seq36430);\nvar self__4486__auto__ = this;\nreturn self__4486__auto__.cljs$core$IFn$_invoke$arity$variadic(G__36431,seq36430__$1);\n});\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$difference","^Q"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^L",["^Z",["^U",["^Q","~:refer",["^W"]]]]]],"~:flags",["^ ","^U",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1535834869957,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^J",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",3]],"~i15",[["^ ","^1>",0,"^1?",9,"^K","re-frame.loggers/loggers"]]],"~i18",["^ ","~i2",[["^ ","^1>",27,"^1?",9],["^ ","^1>",72,"^1?",9],["^ ","^1>",115,"^1?",9],["^ ","^1>",193,"^1?",9],["^ ","^1>",273,"^1?",9],["^ ","^1>",356,"^1?",9],["^ ","^1>",498,"^1?",9]],"~i3",[["^ ","^1>",27,"^1?",9,"^K","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"~i29",[["^ ","^1>",167,"^1?",9]],"~i30",[["^ ","^1>",167,"^1?",9,"^K","js/console.log.bind"]],"~i52",[["^ ","^1>",184,"^1?",9,"^K","js/console"]]],"~i19",["^ ","^1B",[["^ ","^1>",246,"^1?",9]],"^1C",[["^ ","^1>",246,"^1?",9,"^K","js/console.warn.bind"]],"^1D",[["^ ","^1>",264,"^1?",9,"^K","js/console"]]],"~i20",["^ ","^1B",[["^ ","^1>",328,"^1?",9]],"^1C",[["^ ","^1>",328,"^1?",9,"^K","js/console.error.bind"]],"^1D",[["^ ","^1>",347,"^1?",9,"^K","js/console"]]],"~i21",["^ ","^1B",[["^ ","^1>",410,"^1?",9]],"~i33",[["^ ","^1>",428,"^1?",9]],"~i42",[["^ ","^1>",428,"^1?",9,"^K","js/console"]]],"~i22",["^ ","~i31",[["^ ","^1>",443,"^1?",9]],"~i32",[["^ ","^1>",443,"^1?",9,"^K","js/console.group.bind"]],"~i54",[["^ ","^1>",462,"^1?",9,"^K","js/console"]]],"~i23",["^ ","^1K",[["^ ","^1>",471,"^1?",9]],"^1L",[["^ ","^1>",471,"^1?",9,"^K","js/console.log.bind"]],"^1M",[["^ ","^1>",488,"^1?",9,"^K","js/console"]]],"~i24",["^ ","^1B",[["^ ","^1>",559,"^1?",9],["^ ","^1>",626,"^1?",9],["^ ","^1>",0,"^1?",10],["^ ","^1>",0,"^1?",10]],"^1H",[["^ ","^1>",577,"^1?",9]],"~i45",[["^ ","^1>",577,"^1?",9,"^K","js/console"]]],"~i25",["^ ","^1K",[["^ ","^1>",595,"^1?",9]],"^1L",[["^ ","^1>",595,"^1?",9,"^K","js/console.groupEnd.bind"]],"~i57",[["^ ","^1>",617,"^1?",9,"^K","js/console"]]],"~i34",["^ ","~i0",[["^ ","^1>",0,"^1?",12],["^ ","^1>",0,"^1?",12],["^ ","^1>",27,"^1?",12],["^ ","^1>",62,"^1?",12,"^K","var_args"],["^ ","^1>",0,"^1?",13],["^ ","^1>",0,"^1?",13],["^ ","^1>",4,"^1?",13,"^K","args__4502__auto__"],["^ ","^1>",25,"^1?",13],["^ ","^1>",0,"^1?",14],["^ ","^1>",0,"^1?",14],["^ ","^1>",4,"^1?",14,"^K","len__4499__auto__"],["^ ","^1>",30,"^1?",14],["^ ","^1>",30,"^1?",14],["^ ","^1>",0,"^1?",15],["^ ","^1>",0,"^1?",15],["^ ","^1>",4,"^1?",15,"^K","i__4500__auto__"],["^ ","^1>",28,"^1?",15],["^ ","^1>",0,"^1?",17],["^ ","^1>",0,"^1?",17],["^ ","^1>",3,"^1?",17],["^ ","^1>",4,"^1?",17,"^K","i__4500__auto__"],["^ ","^1>",28,"^1?",17,"^K","len__4499__auto__"],["^ ","^1>",0,"^1?",18],["^ ","^1>",0,"^1?",18],["^ ","^1>",0,"^1?",18,"^K","args__4502__auto__"],["^ ","^1>",24,"^1?",18],["^ ","^1>",25,"^1?",18],["^ ","^1>",35,"^1?",18,"^K","i__4500__auto__"],["^ ","^1>",0,"^1?",20],["^ ","^1>",15,"^1?",20],["^ ","^1>",16,"^1?",20,"^K","i__4500__auto__"],["^ ","^1>",40,"^1?",20],["^ ","^1>",0,"^1?",24],["^ ","^1>",0,"^1?",28],["^ ","^1>",4,"^1?",28,"^K","argseq__4503__auto__"],["^ ","^1>",27,"^1?",28],["^ ","^1>",29,"^1?",28],["^ ","^1>",30,"^1?",28],["^ ","^1>",36,"^1?",28],["^ ","^1>",36,"^1?",28,"^K","args__4502__auto__"],["^ ","^1>",64,"^1?",28],["^ ","^1>",64,"^1?",28],["^ ","^1>",69,"^1?",28,"^K","cljs.core/IndexedSeq"],["^ ","^1>",90,"^1?",28],["^ ","^1>",90,"^1?",28,"^K","args__4502__auto__"],["^ ","^1>",115,"^1?",28],["^ ","^1>",120,"^1?",28],["^ ","^1>",124,"^1?",28],["^ ","^1>",131,"^1?",28],["^ ","^1>",0,"^1?",29],["^ ","^1>",0,"^1?",29],["^ ","^1>",7,"^1?",29,"^K","re-frame.loggers/console"],["^ ","^1>",69,"^1?",29],["^ ","^1>",70,"^1?",29],["^ ","^1>",80,"^1?",29],["^ ","^1>",86,"^1?",29,"^K","argseq__4503__auto__"],["^ ","^1>",0,"^1?",32],["^ ","^1>",0,"^1?",32],["^ ","^1>",0,"^1?",32],["^ ","^1>",0,"^1?",32,"^K","re-frame.loggers/console"],["^ ","^1>",64,"^1?",32],["^ ","^1>",0,"^1?",33],["^ ","^1>",0,"^1?",43],["^ ","^1>",0,"^1?",43],["^ ","^1>",0,"^1?",43,"^K","re-frame.loggers/console"],["^ ","^1>",51,"^1?",43],["^ ","^1>",0,"^1?",45],["^ ","^1>",0,"^1?",46],["^ ","^1>",0,"^1?",46],["^ ","^1>",0,"^1?",46,"^K","re-frame.loggers/console"],["^ ","^1>",45,"^1?",46],["^ ","^1>",56,"^1?",46,"^K","seq36430"],["^ ","^1>",0,"^1?",47],["^ ","^1>",0,"^1?",47],["^ ","^1>",4,"^1?",47,"^K","G__36431"],["^ ","^1>",15,"^1?",47],["^ ","^1>",15,"^1?",47,"^K","cljs.core/first"],["^ ","^1>",31,"^1?",47,"^K","seq36430"],["^ ","^1>",4,"^1?",48,"^K","seq36430"],["^ ","^1>",19,"^1?",48],["^ ","^1>",19,"^1?",48,"^K","cljs.core/next"],["^ ","^1>",34,"^1?",48,"^K","seq36430"],["^ ","^1>",0,"^1?",49],["^ ","^1>",0,"^1?",49],["^ ","^1>",4,"^1?",49,"^K","self__4486__auto__"],["^ ","^1>",25,"^1?",49],["^ ","^1>",0,"^1?",50],["^ ","^1>",0,"^1?",50],["^ ","^1>",7,"^1?",50,"^K","self__4486__auto__"],["^ ","^1>",63,"^1?",50,"^K","G__36431"],["^ ","^1>",72,"^1?",50,"^K","seq36430"],["^ ","^1>",0,"^1?",53]],"~i6",[["^ ","^1>",0,"^1?",12,"^K","re-frame.loggers/console"]]],"~i35",["^ ","~i3",[["^ ","^1>",75,"^1?",32,"^K","level"]],"~i11",[["^ ","^1>",81,"^1?",32,"^K","args"]]],"~i36",["^ ","~i2",[["^ ","^1>",0,"^1?",33],["^ ","^1>",0,"^1?",34],["^ ","^1>",0,"^1?",35],["^ ","^1>",0,"^1?",35],["^ ","^1>",6,"^1?",35],["^ ","^1>",11,"^1?",35,"^K","js/Error"],["^ ","^1>",17,"^1?",35],["^ ","^1>",18,"^1?",35],["^ ","^1>",187,"^1?",35],["^ ","^1>",192,"^1?",35]],"~i10",[["^ ","^1>",3,"^1?",33],["^ ","^1>",29,"^1?",33],["^ ","^1>",29,"^1?",33,"^K","cljs.core/deref"]],"^1U",[["^ ","^1>",3,"^1?",33,"^K","cljs.core/contains?"]],"^1J",[["^ ","^1>",45,"^1?",33,"^K","re-frame.loggers/loggers"]],"^1C",[["^ ","^1>",71,"^1?",33,"^K","level"]],"~i37",[["^ ","^1>",80,"^1?",35],["^ ","^1>",81,"^1?",35]],"~i86",[["^ ","^1>",169,"^1?",35,"^K","level"]]],"^1X",["^ ","~i2",[["^ ","^1>",0,"^1?",38]],"~i3",[["^ ","^1>",7,"^1?",38,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1>",53,"^1?",38],["^ ","^1>",70,"^1?",38,"^K","G__36434"],["^ ","^1>",81,"^1?",38],["^ ","^1>",81,"^1?",38,"^K","cljs.core/deref"],["^ ","^1>",0,"^1?",39],["^ ","^1>",0,"^1?",39],["^ ","^1>",82,"^1?",39,"^K","G__36434"],["^ ","^1>",110,"^1?",39,"^K","G__36434"]],"^1W",[["^ ","^1>",8,"^1?",39,"^K","level"],["^ ","^1>",46,"^1?",39,"^K","level"],["^ ","^1>",94,"^1?",39,"^K","level"]],"~i17",[["^ ","^1>",97,"^1?",38,"^K","re-frame.loggers/loggers"]],"~i26",[["^ ","^1>",5,"^1?",40,"^K","args"]]],"~i40",["^ ","~i0",[["^ ","^1>",0,"^1?",53],["^ ","^1>",37,"^1?",57],["^ ","^1>",0,"^1?",58]],"~i6",[["^ ","^1>",0,"^1?",57,"^K","re-frame.loggers/set-loggers!"]]],"~i43",["^ ","~i3",[["^ ","^1>",82,"^1?",57,"^K","new-loggers"]]],"~i44",["^ ","~i2",[["^ ","^1>",0,"^1?",58],["^ ","^1>",0,"^1?",59],["^ ","^1>",0,"^1?",60],["^ ","^1>",0,"^1?",60],["^ ","^1>",6,"^1?",60],["^ ","^1>",11,"^1?",60,"^K","js/Error"],["^ ","^1>",17,"^1?",60],["^ ","^1>",18,"^1?",60],["^ ","^1>",36,"^1?",60],["^ ","^1>",66,"^1?",60],["^ ","^1>",71,"^1?",60]],"^1U",[["^ ","^1>",3,"^1?",58]],"~i12",[["^ ","^1>",3,"^1?",58,"^K","cljs.core/empty?"]],"^1E",[["^ ","^1>",26,"^1?",58]],"^1F",[["^ ","^1>",26,"^1?",58,"^K","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]],"^1K",[["^ ","^1>",79,"^1?",58]],"^1L",[["^ ","^1>",79,"^1?",58,"^K","cljs.core/set"]],"^1V",[["^ ","^1>",93,"^1?",58]],"^1X",[["^ ","^1>",93,"^1?",58,"^K","cljs.core/keys"]],"^1I",[["^ ","^1>",108,"^1?",58,"^K","new-loggers"]],"~i56",[["^ ","^1>",122,"^1?",58],["^ ","^1>",136,"^1?",58],["^ ","^1>",151,"^1?",58],["^ ","^1>",151,"^1?",58,"^K","cljs.core/deref"]],"~i61",[["^ ","^1>",167,"^1?",58,"^K","re-frame.loggers/loggers"]],"~i69",[["^ ","^1>",136,"^1?",58,"^K","cljs.core/keys"]],"~i74",[["^ ","^1>",122,"^1?",58,"^K","cljs.core/set"]]],"^1P",["^ ","~i2",[["^ ","^1>",0,"^1?",63]],"~i3",[["^ ","^1>",7,"^1?",63,"^K","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"]],"~i9",[["^ ","^1>",58,"^1?",63,"^K","re-frame.loggers/loggers"]],"^1Z",[["^ ","^1>",83,"^1?",63,"^K","cljs.core/merge"]],"^1N",[["^ ","^1>",99,"^1?",63,"^K","new-loggers"]]],"~i47",["^ ","~i0",[["^ ","^1>",0,"^1?",65],["^ ","^1>",31,"^1?",68],["^ ","^1>",0,"^1?",69],["^ ","^1>",0,"^1?",69],["^ ","^1>",7,"^1?",69,"^K","cljs.core/deref"]],"~i6",[["^ ","^1>",0,"^1?",68,"^K","re-frame.loggers/get-loggers"]]],"~i50",["^ ","~i3",[["^ ","^1>",23,"^1?",69,"^K","re-frame.loggers/loggers"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1535834828000],["^15","goog/math/math.js"],[1505449243000,"^S","~$goog.array","~$goog.asserts"],["^15","re_frame/loggers.cljc"],[1535834828000,"^S","^R","^Q"],["^15","goog/array/array.js"],[1505449243000,"^S","^2?"],["^15","goog/debug/error.js"],[1505449243000,"^S"],["^15","goog/dom/nodetype.js"],[1505449243000,"^S"],["^15","goog/object/object.js"],[1505449243000,"^S"],"~:SHADOW-TIMESTAMP",[1535834828000,1535834828000],["^15","goog/math/long.js"],[1505449243000,"^S","^2?","~$goog.reflect"],["^15","goog/functions/functions.js"],[1505449243000,"^S"],["^15","goog/structs/map.js"],[1505449243000,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^15","goog/asserts/asserts.js"],[1505449243000,"^S","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^15","goog/uri/uri.js"],[1505449243000,"^S","^2>","^2?","^2G","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^15","goog/base.js"],[1505449243000],["^15","goog/structs/structs.js"],[1505449243000,"^S","^2>","^2D"],["^15","goog/string/string.js"],[1505449243000,"^S"],["^15","goog/reflect/reflect.js"],[1505449243000,"^S"],["^15","goog/string/stringbuffer.js"],[1505449243000,"^S"],["^15","goog/iter/iter.js"],[1505449243000,"^S","^2>","^2?","~$goog.functions","~$goog.math"],["^15","cljs/core.cljs"],[1535834828000,"~$goog.math.Long","~$goog.math.Integer","^2G","^2D","^2>","~$goog.Uri","~$goog.string.StringBuffer"],["^15","goog/math/integer.js"],[1505449243000,"^S"],["^15","clojure/set.cljs"],[1535834828000,"^S","^R"],["^15","goog/uri/utils.js"],[1505449243000,"^S","^2>","^2?","^2G"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S"],"^T",["^J",["^U"]],"~:shadow/js-access-global",["^J",["Error"]],"^V",["^ ","^W","^Q"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^2W",true,"^K","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$any","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^Z",["~$quote",["^Z",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^Z",["^34","^35"]]],"^32",["^Z",[["^34","~$&","^35"]]],"~:arglists-meta",["^Z",[null]]]],"^K","~$re-frame.loggers/console","^37",true,"^6","re_frame/loggers.cljc","^:",14,"^36",["^ ","^37",true,"^38",1,"^39",[["^Z",["^34","^35"]]],"^32",["^Z",[["^34","~$&","^35"]]],"^3:",["^Z",[null]]],"^39",[["^Z",["^34","^35"]]],"~:protocol-impl",null,"^3:",["^Z",[null]],"^8",1,"^7",35,"^9",35,"^38",1,"~:fn-var",true,"^32",["^Z",[["^34","~$&","^35"]]]],"~$set-loggers!",["^ ","^31",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^32",["^Z",["^33",["^Z",[["~$new-loggers"]]]]],"^2[","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^K","~$re-frame.loggers/set-loggers!","^37",false,"^6","re_frame/loggers.cljc","^:",19,"^39",["^Z",[["^3?"]]],"^3<",null,"^3:",["^Z",[null,null]],"^8",1,"^7",41,"^9",41,"^38",1,"^3=",true,"^32",["^Z",["^33",["^Z",[["^3?"]]]]],"^2[","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^31",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^32",["^Z",["^33",["^Z",[[]]]]],"^2[","Get the current logging functions used by re-frame."],"^K","~$re-frame.loggers/get-loggers","^37",false,"^6","re_frame/loggers.cljc","^:",18,"^39",["^Z",[[]]],"^3<",null,"^3:",["^Z",[null,null]],"^8",1,"^7",48,"^9",48,"^38",0,"^3=",true,"^32",["^Z",["^33",["^Z",[[]]]]],"^2[","Get the current logging functions used by re-frame."]],"^X",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^J",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^3H","^3E","^3F","^3D","^3G"]],"^11",["^ ","^U",["^J",[]]],"^12",["^ "],"^13",["^S","^R","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^2<",[["^3L","~:static-fns"],true,["^3L","~:elide-asserts"],false,["^3L","~:optimize-constants"],null,["^3L","~:external-config"],null,["^3L","~:tooling-config"],null,["^3L","~:emit-constants"],null,["^3L","~:infer-externs"],true,["^3L","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3L","~:fn-invoke-direct"],null,["^3L","^1<"],"/dev/null"]]]
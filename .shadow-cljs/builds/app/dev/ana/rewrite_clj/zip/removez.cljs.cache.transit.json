["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.removez');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('clojure.zip');\n/**\n * Remove all whitespace following a given node.\n */\nrewrite_clj.zip.removez.remove_trailing_space = (function rewrite_clj$zip$removez$remove_trailing_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_right_while(zloc,p_QMARK_);\n});\n/**\n * Remove all whitespace preceding a given node.\n */\nrewrite_clj.zip.removez.remove_preceding_space = (function rewrite_clj$zip$removez$remove_preceding_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_left_while(zloc,p_QMARK_);\n});\n/**\n * Remove value at the given zipper location. Returns the first non-whitespace\n * node that would have preceded it in a depth-first walk. Will remove whitespace\n * appropriately.\n * \n *   - `[1  2  3]   => [1  3]`\n *   - `[1 2]       => [1]`\n *   - `[1 2]       => [2]`\n *   - `[1]         => []`\n *   - `[  1  ]     => []`\n *   - `[1 [2 3] 4] => [1 [2 3]]`\n *   - `[1 [2 3] 4] => [[2 3] 4]`\n * \n * If a node is located rightmost, both preceding and trailing spaces are removed,\n * otherwise only trailing spaces are touched. This means that a following element\n * (no matter whether on the same line or not) will end up in the same position\n * (line/column) as the removed one, _unless_ a comment lies between the original\n * node and the neighbour.\n */\nrewrite_clj.zip.removez.remove = (function rewrite_clj$zip$removez$remove(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space((cljs.core.truth_((function (){var or__3922__auto__ = rewrite_clj.zip.move.rightmost_QMARK_(zloc);\nif(cljs.core.truth_(or__3922__auto__)){\nreturn or__3922__auto__;\n} else {\nreturn rewrite_clj.zip.move.leftmost_QMARK_(zloc);\n}\n})())?rewrite_clj.zip.removez.remove_preceding_space(zloc,rewrite_clj.zip.whitespace.whitespace_QMARK_):zloc),rewrite_clj.zip.whitespace.whitespace_QMARK_)));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n/**\n * Same as remove but preserves newlines\n */\nrewrite_clj.zip.removez.remove_preserve_newline = (function rewrite_clj$zip$removez$remove_preserve_newline(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space((cljs.core.truth_((function (){var or__3922__auto__ = rewrite_clj.zip.move.rightmost_QMARK_(zloc);\nif(cljs.core.truth_(or__3922__auto__)){\nreturn or__3922__auto__;\n} else {\nreturn rewrite_clj.zip.move.leftmost_QMARK_(zloc);\n}\n})())?rewrite_clj.zip.removez.remove_preceding_space(zloc,(function (p1__34931_SHARP_){\nvar and__3911__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__34931_SHARP_);\nif(cljs.core.truth_(and__3911__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__34931_SHARP_));\n} else {\nreturn and__3911__auto__;\n}\n})):zloc),(function (p1__34932_SHARP_){\nvar and__3911__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__34932_SHARP_);\nif(cljs.core.truth_(and__3911__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__34932_SHARP_));\n} else {\nreturn and__3911__auto__;\n}\n}))));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/removez.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$remove"]],"~:name","~$rewrite-clj.zip.removez","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^R","~$u","~$rewrite-clj.zip.utils","~$cljs.core","^T","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^W","~$m","~$rewrite-clj.zip.move","^V","^V","^X","^X","~$z","^R","^S","^S"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^M",["^12",["~:refer-clojure","~:exclude",["^K"]]],["^12",["^Z",["^X","~:as","~$m"],["^S","^16","~$u"],["^V","^16","^U"],["^R","^16","~$z"]]]]],"~:flags",["^ ","^Z",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^W","^T","^X","^S","^V","^R"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/removez.cljs"],"~:compiled-at",1535834868405,"~:resource-name","rewrite_clj/zip/removez.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n\n(defn- remove-trailing-space\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-space\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn remove\n  \"Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc ws/whitespace?)\n             zloc)\n           (remove-trailing-space ws/whitespace?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove-preserve-newline\n  \"Same as remove but preserves newlines\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n             zloc)\n           (remove-trailing-space #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n","~:reader-features",["^J",["~:cljs"]],"~:source-map",["^ ","~i8",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",6],["^ ","^1C",48,"^1D",9],["^ ","^1C",0,"^1D",10]],"~i7",[["^ ","^1C",0,"^1D",9,"^L","rewrite-clj.zip.removez/remove-trailing-space"]]],"~i10",["^ ","~i3",[["^ ","^1C",104,"^1D",9,"^L","zloc"]],"~i8",[["^ ","^1C",109,"^1D",9,"^L","p?"]]],"~i11",["^ ","~i2",[["^ ","^1C",0,"^1D",10]],"~i3",[["^ ","^1C",7,"^1D",10,"^L","rewrite-clj.zip.utils/remove-right-while"]],"~i24",[["^ ","^1C",48,"^1D",10,"^L","zloc"]],"~i29",[["^ ","^1C",53,"^1D",10,"^L","p?"]]],"~i13",["^ ","~i0",[["^ ","^1C",0,"^1D",12],["^ ","^1C",49,"^1D",15],["^ ","^1C",0,"^1D",16]],"~i7",[["^ ","^1C",0,"^1D",15,"^L","rewrite-clj.zip.removez/remove-preceding-space"]]],"~i15",["^ ","~i3",[["^ ","^1C",106,"^1D",15,"^L","zloc"]],"~i8",[["^ ","^1C",111,"^1D",15,"^L","p?"]]],"~i16",["^ ","~i2",[["^ ","^1C",0,"^1D",16]],"~i3",[["^ ","^1C",7,"^1D",16,"^L","rewrite-clj.zip.utils/remove-left-while"]],"~i23",[["^ ","^1C",47,"^1D",16,"^L","zloc"]],"~i28",[["^ ","^1C",52,"^1D",16,"^L","p?"]]],"~i18",["^ ","~i0",[["^ ","^1C",0,"^1D",18],["^ ","^1C",33,"^1D",37],["^ ","^1C",0,"^1D",38],["^ ","^1C",0,"^1D",38],["^ ","^1C",0,"^1D",39],["^ ","^1C",0,"^1D",40],["^ ","^1C",0,"^1D",40],["^ ","^1C",6,"^1D",40],["^ ","^1C",11,"^1D",40,"^L","js/Error"],["^ ","^1C",17,"^1D",40],["^ ","^1C",0,"^1D",43],["^ ","^1C",4,"^1D",43,"^L","%"],["^ ","^1C",0,"^1D",50],["^ ","^1C",0,"^1D",50],["^ ","^1C",0,"^1D",51],["^ ","^1C",0,"^1D",52],["^ ","^1C",0,"^1D",52],["^ ","^1C",6,"^1D",52],["^ ","^1C",11,"^1D",52,"^L","js/Error"],["^ ","^1C",17,"^1D",52],["^ ","^1C",0,"^1D",55,"^L","%"]],"~i6",[["^ ","^1C",0,"^1D",37,"^L","rewrite-clj.zip.removez/remove"]]],"~i36",["^ ","~i3",[["^ ","^1C",74,"^1D",37,"^L","zloc"]]],"~i37",["^ ","~i9",[["^ ","^1C",20,"^1D",38,"^L","zloc"]]],"~i38",["^ ","^1E",[["^ ","^1C",20,"^1D",50,"^L","%"]]],"~i39",["^ ","~i7",[["^ ","^1C",106,"^1D",43]],"^1F",[["^ ","^1C",171,"^1D",43]],"^1J",[["^ ","^1C",189,"^1D",43],["^ ","^1C",206,"^1D",43,"^L","or__3922__auto__"],["^ ","^1C",0,"^1D",44],["^ ","^1C",0,"^1D",44],["^ ","^1C",20,"^1D",44,"^L","or__3922__auto__"],["^ ","^1C",0,"^1D",45,"^L","or__3922__auto__"]],"~i19",[["^ ","^1C",225,"^1D",43]],"~i20",[["^ ","^1C",225,"^1D",43,"^L","rewrite-clj.zip.move/rightmost?"]],"~i33",[["^ ","^1C",263,"^1D",43,"^L","zloc"]]],"~i40",["^ ","^1S",[["^ ","^1C",0,"^1D",47]],"^1T",[["^ ","^1C",7,"^1D",47,"^L","rewrite-clj.zip.move/leftmost?"]],"~i32",[["^ ","^1C",44,"^1D",47,"^L","zloc"]]],"~i41",["^ ","^1I",[["^ ","^1C",6,"^1D",49]],"~i14",[["^ ","^1C",6,"^1D",49,"^L","rewrite-clj.zip.removez/remove-preceding-space"]],"^1P",[["^ ","^1C",53,"^1D",49,"^L","zloc"]],"~i42",[["^ ","^1C",58,"^1D",49,"^L","rewrite-clj.zip.whitespace/whitespace?"]]],"^1Z",["^ ","^1I",[["^ ","^1C",104,"^1D",49,"^L","zloc"]]],"~i43",["^ ","^1F",[["^ ","^1C",125,"^1D",43]],"~i12",[["^ ","^1C",125,"^1D",43,"^L","rewrite-clj.zip.removez/remove-trailing-space"]],"~i34",[["^ ","^1C",110,"^1D",49,"^L","rewrite-clj.zip.whitespace/whitespace?"]]],"~i44",["^ ","^1F",[["^ ","^1C",106,"^1D",43,"^L","clojure.zip/remove"]]],"~i45",["^ ","~i7",[["^ ","^1C",16,"^1D",43]],"~i8",[["^ ","^1C",16,"^1D",43,"^L","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2"]],"~i27",[["^ ","^1C",89,"^1D",43,"^L","clojure.zip/prev"]]],"~i47",["^ ","~i0",[["^ ","^1C",0,"^1D",57],["^ ","^1C",50,"^1D",60],["^ ","^1C",0,"^1D",61],["^ ","^1C",0,"^1D",61],["^ ","^1C",0,"^1D",62],["^ ","^1C",0,"^1D",63],["^ ","^1C",0,"^1D",63],["^ ","^1C",6,"^1D",63],["^ ","^1C",11,"^1D",63,"^L","js/Error"],["^ ","^1C",17,"^1D",63],["^ ","^1C",0,"^1D",66],["^ ","^1C",4,"^1D",66,"^L","%"],["^ ","^1C",0,"^1D",87],["^ ","^1C",0,"^1D",87],["^ ","^1C",0,"^1D",88],["^ ","^1C",0,"^1D",89],["^ ","^1C",0,"^1D",89],["^ ","^1C",6,"^1D",89],["^ ","^1C",11,"^1D",89,"^L","js/Error"],["^ ","^1C",17,"^1D",89],["^ ","^1C",0,"^1D",92,"^L","%"]],"~i6",[["^ ","^1C",0,"^1D",60,"^L","rewrite-clj.zip.removez/remove-preserve-newline"]]],"~i49",["^ ","~i3",[["^ ","^1C",108,"^1D",60,"^L","zloc"]]],"~i50",["^ ","~i9",[["^ ","^1C",20,"^1D",61,"^L","zloc"]]],"~i51",["^ ","^1E",[["^ ","^1C",20,"^1D",87,"^L","%"]]],"~i52",["^ ","~i7",[["^ ","^1C",106,"^1D",66]],"^1F",[["^ ","^1C",171,"^1D",66]],"^1J",[["^ ","^1C",189,"^1D",66],["^ ","^1C",206,"^1D",66,"^L","or__3922__auto__"],["^ ","^1C",0,"^1D",67],["^ ","^1C",0,"^1D",67],["^ ","^1C",20,"^1D",67,"^L","or__3922__auto__"],["^ ","^1C",0,"^1D",68,"^L","or__3922__auto__"]],"^1S",[["^ ","^1C",225,"^1D",66]],"^1T",[["^ ","^1C",225,"^1D",66,"^L","rewrite-clj.zip.move/rightmost?"]],"^1U",[["^ ","^1C",263,"^1D",66,"^L","zloc"]]],"~i53",["^ ","^1S",[["^ ","^1C",0,"^1D",70]],"^1T",[["^ ","^1C",7,"^1D",70,"^L","rewrite-clj.zip.move/leftmost?"]],"^1W",[["^ ","^1C",44,"^1D",70,"^L","zloc"]]],"~i54",["^ ","^1I",[["^ ","^1C",6,"^1D",72],["^ ","^1C",58,"^1D",72],["^ ","^1C",69,"^1D",72,"^L","p1__34931#"],["^ ","^1C",0,"^1D",73]],"^1Y",[["^ ","^1C",6,"^1D",72,"^L","rewrite-clj.zip.removez/remove-preceding-space"]],"^1P",[["^ ","^1C",53,"^1D",72,"^L","zloc"]],"^1[",[["^ ","^1C",0,"^1D",73],["^ ","^1C",4,"^1D",73,"^L","and__3911__auto__"],["^ ","^1C",0,"^1D",74],["^ ","^1C",0,"^1D",74],["^ ","^1C",20,"^1D",74,"^L","and__3911__auto__"],["^ ","^1C",0,"^1D",77,"^L","and__3911__auto__"]],"~i48",[["^ ","^1C",24,"^1D",73],["^ ","^1C",69,"^1D",73,"^L","p1__34931#"]],"^26",[["^ ","^1C",24,"^1D",73,"^L","rewrite-clj.zip.whitespace/whitespace?"]]],"~i55",["^ ","^2<",[["^ ","^1C",0,"^1D",75]],"^26",[["^ ","^1C",7,"^1D",75,"^L","cljs.core/not"]],"^2:",[["^ ","^1C",21,"^1D",75],["^ ","^1C",65,"^1D",75,"^L","p1__34931#"]],"^2;",[["^ ","^1C",21,"^1D",75,"^L","rewrite-clj.zip.whitespace/linebreak?"]]],"~i56",["^ ","^1I",[["^ ","^1C",4,"^1D",79,"^L","zloc"]]],"~i57",["^ ","^1F",[["^ ","^1C",125,"^1D",66],["^ ","^1C",10,"^1D",79],["^ ","^1C",21,"^1D",79,"^L","p1__34932#"],["^ ","^1C",0,"^1D",80]],"^20",[["^ ","^1C",125,"^1D",66,"^L","rewrite-clj.zip.removez/remove-trailing-space"]],"~i35",[["^ ","^1C",0,"^1D",80],["^ ","^1C",4,"^1D",80,"^L","and__3911__auto__"],["^ ","^1C",0,"^1D",81],["^ ","^1C",0,"^1D",81],["^ ","^1C",20,"^1D",81,"^L","and__3911__auto__"],["^ ","^1C",0,"^1D",84,"^L","and__3911__auto__"]],"^1V",[["^ ","^1C",24,"^1D",80],["^ ","^1C",69,"^1D",80,"^L","p1__34932#"]],"^1X",[["^ ","^1C",24,"^1D",80,"^L","rewrite-clj.zip.whitespace/whitespace?"]]],"~i58",["^ ","^2<",[["^ ","^1C",0,"^1D",82]],"^26",[["^ ","^1C",7,"^1D",82,"^L","cljs.core/not"]],"^2:",[["^ ","^1C",21,"^1D",82],["^ ","^1C",65,"^1D",82,"^L","p1__34932#"]],"^2;",[["^ ","^1C",21,"^1D",82,"^L","rewrite-clj.zip.whitespace/linebreak?"]]],"~i59",["^ ","^1F",[["^ ","^1C",106,"^1D",66,"^L","clojure.zip/remove"]]],"~i60",["^ ","~i7",[["^ ","^1C",16,"^1D",66]],"~i8",[["^ ","^1C",16,"^1D",66,"^L","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2"]],"^24",[["^ ","^1C",89,"^1D",66,"^L","clojure.zip/prev"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["^1;","rewrite_clj/node/token.cljs"],[1535834828000,"^W","^T","~$rewrite-clj.node.protocols"],["~:macro","^T"],[1535834828000],["^1;","cljs/tools/reader/impl/utils.cljs"],[1535834828000,"^W","^T","~$clojure.string","~$goog.string"],["^1;","goog/math/math.js"],[1505449243000,"^W","~$goog.array","~$goog.asserts"],["^1;","goog/array/array.js"],[1505449243000,"^W","^2L"],["^2H","~$cljs.tools.reader.reader-types"],[1535834828000],["^1;","rewrite_clj/zip/move.cljs"],[1535834828000,"^W","^T","^V","^R"],["^1;","goog/debug/error.js"],[1505449243000,"^W"],["^1;","goog/dom/nodetype.js"],[1505449243000,"^W"],["^1;","cljs/tools/reader/impl/inspect.cljs"],[1535834828000,"^W","^T"],["^1;","cljs/tools/reader.cljs"],[1535834828000,"^W","^T","^2M","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^2K","^2J","~$goog.string.StringBuffer"],["^1;","rewrite_clj/node/forms.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","rewrite_clj/zip/utils.cljs"],[1535834828000,"^W","^T","^R"],["^1;","goog/object/object.js"],[1505449243000,"^W"],"~:SHADOW-TIMESTAMP",[1535834828000,1535834828000],["^1;","goog/math/long.js"],[1505449243000,"^W","^2L","~$goog.reflect"],["^1;","rewrite_clj/node/reader_macro.cljs"],[1535834828000,"^W","^T","^2G","~$rewrite-clj.node.whitespace"],["^1;","goog/functions/functions.js"],[1505449243000,"^W"],["^1;","clojure/walk.cljs"],[1535834828000,"^W","^T"],["^1;","goog/structs/map.js"],[1505449243000,"^W","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^1;","rewrite_clj/node/meta.cljs"],[1535834828000,"^W","^T","^2G","^2T"],["^1;","rewrite_clj/node/stringz.cljs"],[1535834828000,"^W","^T","^2G","~$cljs.tools.reader","^2I"],["^1;","rewrite_clj/node/comment.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","rewrite_clj/node/keyword.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","goog/asserts/asserts.js"],[1505449243000,"^W","~$goog.debug.Error","~$goog.dom.NodeType","^2J"],["^1;","goog/uri/uri.js"],[1505449243000,"^W","^2K","^2L","^2J","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1;","rewrite_clj/node/protocols.cljs"],[1535834828000,"^W","^T","^2I"],["^1;","rewrite_clj/node/seq.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","rewrite_clj/node/uneval.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","goog/base.js"],[1505449243000],["^1;","goog/structs/structs.js"],[1505449243000,"^W","^2K","^2W"],["^1;","cljs/tools/reader/impl/errors.cljs"],[1535834828000,"^W","^T","^2M","^2I","~$cljs.tools.reader.impl.inspect"],["^1;","rewrite_clj/node/whitespace.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","rewrite_clj/node/coercer.cljs"],[1535834828000,"^W","^T","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^2G","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^2T"],["^1;","clojure/string.cljs"],[1535834828000,"^W","^T","^2J","^2Q"],["^1;","goog/string/string.js"],[1505449243000,"^W"],["^1;","goog/reflect/reflect.js"],[1505449243000,"^W"],["^1;","rewrite_clj/node/fn.cljs"],[1535834828000,"^W","^T","^2G","~$clojure.walk"],["^1;","rewrite_clj/node.cljs"],[1535834828000,"^W","^T","~$rewrite-clj.node.coercer","^2G","^37","^3>","^2T","^3?","^35","^36","^3;","^39","^3=","^38","^3:","^3<"],["^1;","rewrite_clj/zip/removez.cljs"],[1535834828000,"^W","^T","^X","^S","^V","^R"],["^1;","clojure/zip.cljs"],[1535834828000,"^W","^T"],["^1;","goog/string/stringbuffer.js"],[1505449243000,"^W"],["^1;","cljs/tools/reader/reader_types.cljs"],[1535834828000,"^W","^T","^2N","^2J","^2Q"],["^1;","goog/iter/iter.js"],[1505449243000,"^W","^2K","^2L","~$goog.functions","~$goog.math"],["^1;","rewrite_clj/node/quote.cljs"],[1535834828000,"^W","^T","^2G"],["^1;","cljs/tools/reader/impl/commons.cljs"],[1535834828000,"^W","^T","^2P","^2M","^2N"],["^1;","cljs/core.cljs"],[1535834828000,"~$goog.math.Long","~$goog.math.Integer","^2J","^2W","^2K","~$goog.Uri","^2Q"],["^1;","goog/math/integer.js"],[1505449243000,"^W"],["^1;","goog/uri/utils.js"],[1505449243000,"^W","^2K","^2L","^2J"],["^1;","rewrite_clj/zip/whitespace.cljs"],[1535834828000,"^W","^T","~$rewrite-clj.node","^R"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",["^K"]],"^L","^M","^P",null,"^Q",["^ ","^R","^R","~$u","^S","^T","^T","^U","^V","^W","^W","~$m","^X","^V","^V","^X","^X","~$z","^R","^S","^S"],"^Y",["^J",["^Z"]],"~:shadow/js-access-global",["^J",["Error"]],"^[",null,"~:defs",["^ ","~$remove-trailing-space",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",9,"^8",8,"^9",9,"^:",29,"~:private",true,"~:arglists",["^12",["~$quote",["^12",[["~$zloc","~$p?"]]]]],"~:doc","Remove all whitespace following a given node."],"^3M",true,"^L","~$rewrite-clj.zip.removez/remove-trailing-space","~:variadic",false,"^6","rewrite_clj/zip/removez.cljs","^:",29,"~:method-params",["^12",[["^3P","^3Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"^7",9,"^9",9,"~:max-fixed-arity",2,"~:fn-var",true,"^3N",["^12",["^3O",["^12",[["^3P","^3Q"]]]]],"^3R","Remove all whitespace following a given node."],"~$remove-preceding-space",["^ ","^3L",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",14,"^8",8,"^9",14,"^:",30,"^3M",true,"^3N",["^12",["^3O",["^12",[["^3P","^3Q"]]]]],"^3R","Remove all whitespace preceding a given node."],"^3M",true,"^L","~$rewrite-clj.zip.removez/remove-preceding-space","^3T",false,"^6","rewrite_clj/zip/removez.cljs","^:",30,"^3U",["^12",[["^3P","^3Q"]]],"^3V",null,"^3W",["^12",[null,null]],"^8",1,"^7",14,"^9",14,"^3X",2,"^3Y",true,"^3N",["^12",["^3O",["^12",[["^3P","^3Q"]]]]],"^3R","Remove all whitespace preceding a given node."],"^K",["^ ","^3L",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",19,"^8",7,"^9",19,"^:",13,"^3N",["^12",["^3O",["^12",[["^3P"]]]]],"^3R","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"^L","~$rewrite-clj.zip.removez/remove","^3T",false,"^6","rewrite_clj/zip/removez.cljs","^:",13,"^3U",["^12",[["^3P"]]],"^3V",null,"^3W",["^12",[null,null]],"^8",1,"^7",19,"^9",19,"^3X",1,"^3Y",true,"^3N",["^12",["^3O",["^12",[["^3P"]]]]],"^3R","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"~$remove-preserve-newline",["^ ","^3L",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",48,"^8",7,"^9",48,"^:",30,"^3N",["^12",["^3O",["^12",[["^3P"]]]]],"^3R","Same as remove but preserves newlines"],"^L","~$rewrite-clj.zip.removez/remove-preserve-newline","^3T",false,"^6","rewrite_clj/zip/removez.cljs","^:",30,"^3U",["^12",[["^3P"]]],"^3V",null,"^3W",["^12",[null,null]],"^8",1,"^7",48,"^9",48,"^3X",1,"^3Y",true,"^3N",["^12",["^3O",["^12",[["^3P"]]]]],"^3R","Same as remove but preserves newlines"]],"^10",["^ ","^T","^T"],"^17",["^ ","^Z",["^J",[]]],"^18",["^ "],"^19",["^W","^T","^X","^S","^V","^R"]],"^O","^M","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^2F",[["^45","~:static-fns"],true,["^45","~:elide-asserts"],false,["^45","~:optimize-constants"],null,["^45","~:external-config"],null,["^45","~:tooling-config"],null,["^45","~:emit-constants"],null,["^45","~:infer-externs"],true,["^45","^1@"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^45","~:fn-invoke-direct"],null,["^45","^1B"],"/dev/null"]]]
["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___26343 = arguments.length;\nvar i__4500__auto___26344 = (0);\nwhile(true){\nif((i__4500__auto___26344 < len__4499__auto___26343)){\nargs__4502__auto__.push((arguments[i__4500__auto___26344]));\n\nvar G__26345 = (i__4500__auto___26344 + (1));\ni__4500__auto___26344 = G__26345;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((1) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4503__auto__);\n});\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__26340 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__26340) : level.call(null,G__26340));\n})(),args);\n});\n\nre_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.loggers.console.cljs$lang$applyTo = (function (seq26334){\nvar G__26335 = cljs.core.first(seq26334);\nvar seq26334__$1 = cljs.core.next(seq26334);\nvar self__4486__auto__ = this;\nreturn self__4486__auto__.cljs$core$IFn$_invoke$arity$variadic(G__26335,seq26334__$1);\n});\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$difference","^Q"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^L",["^Z",["^U",["^Q","~:refer",["^W"]]]]]],"~:flags",["^ ","^U",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1535913522609,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^J",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1]],"~i15",[["^ ","^1>",0,"^1?",7,"^K","re-frame.loggers/loggers"]]],"~i18",["^ ","~i2",[["^ ","^1>",27,"^1?",7],["^ ","^1>",72,"^1?",7],["^ ","^1>",115,"^1?",7],["^ ","^1>",193,"^1?",7],["^ ","^1>",273,"^1?",7],["^ ","^1>",356,"^1?",7],["^ ","^1>",498,"^1?",7]],"~i3",[["^ ","^1>",27,"^1?",7,"^K","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"~i29",[["^ ","^1>",167,"^1?",7]],"~i30",[["^ ","^1>",167,"^1?",7,"^K","js/console.log.bind"]],"~i52",[["^ ","^1>",184,"^1?",7,"^K","js/console"]]],"~i19",["^ ","^1B",[["^ ","^1>",246,"^1?",7]],"^1C",[["^ ","^1>",246,"^1?",7,"^K","js/console.warn.bind"]],"^1D",[["^ ","^1>",264,"^1?",7,"^K","js/console"]]],"~i20",["^ ","^1B",[["^ ","^1>",328,"^1?",7]],"^1C",[["^ ","^1>",328,"^1?",7,"^K","js/console.error.bind"]],"^1D",[["^ ","^1>",347,"^1?",7,"^K","js/console"]]],"~i21",["^ ","^1B",[["^ ","^1>",410,"^1?",7]],"~i33",[["^ ","^1>",428,"^1?",7]],"~i42",[["^ ","^1>",428,"^1?",7,"^K","js/console"]]],"~i22",["^ ","~i31",[["^ ","^1>",443,"^1?",7]],"~i32",[["^ ","^1>",443,"^1?",7,"^K","js/console.group.bind"]],"~i54",[["^ ","^1>",462,"^1?",7,"^K","js/console"]]],"~i23",["^ ","^1K",[["^ ","^1>",471,"^1?",7]],"^1L",[["^ ","^1>",471,"^1?",7,"^K","js/console.log.bind"]],"^1M",[["^ ","^1>",488,"^1?",7,"^K","js/console"]]],"~i24",["^ ","^1B",[["^ ","^1>",559,"^1?",7],["^ ","^1>",626,"^1?",7],["^ ","^1>",0,"^1?",8],["^ ","^1>",0,"^1?",8]],"^1H",[["^ ","^1>",577,"^1?",7]],"~i45",[["^ ","^1>",577,"^1?",7,"^K","js/console"]]],"~i25",["^ ","^1K",[["^ ","^1>",595,"^1?",7]],"^1L",[["^ ","^1>",595,"^1?",7,"^K","js/console.groupEnd.bind"]],"~i57",[["^ ","^1>",617,"^1?",7,"^K","js/console"]]],"~i34",["^ ","~i0",[["^ ","^1>",0,"^1?",10],["^ ","^1>",0,"^1?",10],["^ ","^1>",27,"^1?",10],["^ ","^1>",62,"^1?",10,"^K","var_args"],["^ ","^1>",0,"^1?",11],["^ ","^1>",0,"^1?",11],["^ ","^1>",4,"^1?",11,"^K","args__4502__auto__"],["^ ","^1>",25,"^1?",11],["^ ","^1>",0,"^1?",12],["^ ","^1>",0,"^1?",12],["^ ","^1>",4,"^1?",12,"^K","len__4499__auto__"],["^ ","^1>",30,"^1?",12],["^ ","^1>",30,"^1?",12],["^ ","^1>",0,"^1?",13],["^ ","^1>",0,"^1?",13],["^ ","^1>",4,"^1?",13,"^K","i__4500__auto__"],["^ ","^1>",28,"^1?",13],["^ ","^1>",0,"^1?",15],["^ ","^1>",0,"^1?",15],["^ ","^1>",3,"^1?",15],["^ ","^1>",4,"^1?",15,"^K","i__4500__auto__"],["^ ","^1>",28,"^1?",15,"^K","len__4499__auto__"],["^ ","^1>",0,"^1?",16],["^ ","^1>",0,"^1?",16],["^ ","^1>",0,"^1?",16,"^K","args__4502__auto__"],["^ ","^1>",24,"^1?",16],["^ ","^1>",25,"^1?",16],["^ ","^1>",35,"^1?",16,"^K","i__4500__auto__"],["^ ","^1>",0,"^1?",18],["^ ","^1>",15,"^1?",18],["^ ","^1>",16,"^1?",18,"^K","i__4500__auto__"],["^ ","^1>",40,"^1?",18],["^ ","^1>",0,"^1?",22],["^ ","^1>",0,"^1?",26],["^ ","^1>",4,"^1?",26,"^K","argseq__4503__auto__"],["^ ","^1>",27,"^1?",26],["^ ","^1>",29,"^1?",26],["^ ","^1>",30,"^1?",26],["^ ","^1>",36,"^1?",26],["^ ","^1>",36,"^1?",26,"^K","args__4502__auto__"],["^ ","^1>",64,"^1?",26],["^ ","^1>",64,"^1?",26],["^ ","^1>",69,"^1?",26,"^K","cljs.core/IndexedSeq"],["^ ","^1>",90,"^1?",26],["^ ","^1>",90,"^1?",26,"^K","args__4502__auto__"],["^ ","^1>",115,"^1?",26],["^ ","^1>",120,"^1?",26],["^ ","^1>",124,"^1?",26],["^ ","^1>",131,"^1?",26],["^ ","^1>",0,"^1?",27],["^ ","^1>",0,"^1?",27],["^ ","^1>",7,"^1?",27,"^K","re-frame.loggers/console"],["^ ","^1>",69,"^1?",27],["^ ","^1>",70,"^1?",27],["^ ","^1>",80,"^1?",27],["^ ","^1>",86,"^1?",27,"^K","argseq__4503__auto__"],["^ ","^1>",0,"^1?",30],["^ ","^1>",0,"^1?",30],["^ ","^1>",0,"^1?",30],["^ ","^1>",0,"^1?",30,"^K","re-frame.loggers/console"],["^ ","^1>",64,"^1?",30],["^ ","^1>",0,"^1?",31],["^ ","^1>",0,"^1?",37],["^ ","^1>",0,"^1?",37],["^ ","^1>",0,"^1?",37,"^K","re-frame.loggers/console"],["^ ","^1>",51,"^1?",37],["^ ","^1>",0,"^1?",39],["^ ","^1>",0,"^1?",40],["^ ","^1>",0,"^1?",40],["^ ","^1>",0,"^1?",40,"^K","re-frame.loggers/console"],["^ ","^1>",45,"^1?",40],["^ ","^1>",56,"^1?",40,"^K","seq26334"],["^ ","^1>",0,"^1?",41],["^ ","^1>",0,"^1?",41],["^ ","^1>",4,"^1?",41,"^K","G__26335"],["^ ","^1>",15,"^1?",41],["^ ","^1>",15,"^1?",41,"^K","cljs.core/first"],["^ ","^1>",31,"^1?",41,"^K","seq26334"],["^ ","^1>",4,"^1?",42,"^K","seq26334"],["^ ","^1>",19,"^1?",42],["^ ","^1>",19,"^1?",42,"^K","cljs.core/next"],["^ ","^1>",34,"^1?",42,"^K","seq26334"],["^ ","^1>",0,"^1?",43],["^ ","^1>",0,"^1?",43],["^ ","^1>",4,"^1?",43,"^K","self__4486__auto__"],["^ ","^1>",25,"^1?",43],["^ ","^1>",0,"^1?",44],["^ ","^1>",0,"^1?",44],["^ ","^1>",7,"^1?",44,"^K","self__4486__auto__"],["^ ","^1>",63,"^1?",44,"^K","G__26335"],["^ ","^1>",72,"^1?",44,"^K","seq26334"],["^ ","^1>",0,"^1?",47]],"~i6",[["^ ","^1>",0,"^1?",10,"^K","re-frame.loggers/console"]]],"~i35",["^ ","~i3",[["^ ","^1>",75,"^1?",30,"^K","level"]],"~i11",[["^ ","^1>",81,"^1?",30,"^K","args"]]],"~i36",["^ ","~i2",[["^ ","^1>",0,"^1?",31]]],"~i37",["^ ","~i2",[["^ ","^1>",0,"^1?",32]],"~i3",[["^ ","^1>",7,"^1?",32,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1>",53,"^1?",32],["^ ","^1>",70,"^1?",32,"^K","G__26340"],["^ ","^1>",81,"^1?",32],["^ ","^1>",81,"^1?",32,"^K","cljs.core/deref"],["^ ","^1>",0,"^1?",33],["^ ","^1>",0,"^1?",33],["^ ","^1>",82,"^1?",33,"^K","G__26340"],["^ ","^1>",110,"^1?",33,"^K","G__26340"]],"~i10",[["^ ","^1>",8,"^1?",33,"^K","level"],["^ ","^1>",46,"^1?",33,"^K","level"],["^ ","^1>",94,"^1?",33,"^K","level"]],"~i17",[["^ ","^1>",97,"^1?",32,"^K","re-frame.loggers/loggers"]],"~i26",[["^ ","^1>",5,"^1?",34,"^K","args"]]],"~i40",["^ ","~i0",[["^ ","^1>",0,"^1?",47],["^ ","^1>",37,"^1?",51],["^ ","^1>",0,"^1?",52]],"~i6",[["^ ","^1>",0,"^1?",51,"^K","re-frame.loggers/set-loggers!"]]],"~i43",["^ ","~i3",[["^ ","^1>",82,"^1?",51,"^K","new-loggers"]]],"~i44",["^ ","~i2",[["^ ","^1>",0,"^1?",52]]],"^1P",["^ ","~i2",[["^ ","^1>",0,"^1?",53]],"~i3",[["^ ","^1>",7,"^1?",53,"^K","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"]],"~i9",[["^ ","^1>",58,"^1?",53,"^K","re-frame.loggers/loggers"]],"^1Y",[["^ ","^1>",83,"^1?",53,"^K","cljs.core/merge"]],"^1N",[["^ ","^1>",99,"^1?",53,"^K","new-loggers"]]],"~i47",["^ ","~i0",[["^ ","^1>",0,"^1?",55],["^ ","^1>",31,"^1?",58],["^ ","^1>",0,"^1?",59],["^ ","^1>",0,"^1?",59],["^ ","^1>",7,"^1?",59,"^K","cljs.core/deref"]],"~i6",[["^ ","^1>",0,"^1?",58,"^K","re-frame.loggers/get-loggers"]]],"~i50",["^ ","~i3",[["^ ","^1>",23,"^1?",59,"^K","re-frame.loggers/loggers"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1535834828000],["^15","goog/math/math.js"],[1505449243000,"^S","~$goog.array","~$goog.asserts"],["^15","re_frame/loggers.cljc"],[1535834828000,"^S","^R","^Q"],["^15","goog/array/array.js"],[1505449243000,"^S","^29"],["^15","goog/debug/error.js"],[1505449243000,"^S"],["^15","goog/dom/nodetype.js"],[1505449243000,"^S"],["^15","goog/object/object.js"],[1505449243000,"^S"],"~:SHADOW-TIMESTAMP",[1535834828000,1535834828000],["^15","goog/math/long.js"],[1505449243000,"^S","^29","~$goog.reflect"],["^15","goog/functions/functions.js"],[1505449243000,"^S"],["^15","goog/structs/map.js"],[1505449243000,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^15","goog/asserts/asserts.js"],[1505449243000,"^S","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^15","goog/uri/uri.js"],[1505449243000,"^S","^28","^29","^2A","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^15","goog/base.js"],[1505449243000],["^15","goog/structs/structs.js"],[1505449243000,"^S","^28","^2>"],["^15","goog/string/string.js"],[1505449243000,"^S"],["^15","goog/reflect/reflect.js"],[1505449243000,"^S"],["^15","goog/string/stringbuffer.js"],[1505449243000,"^S"],["^15","goog/iter/iter.js"],[1505449243000,"^S","^28","^29","~$goog.functions","~$goog.math"],["^15","cljs/core.cljs"],[1535834828000,"~$goog.math.Long","~$goog.math.Integer","^2A","^2>","^28","~$goog.Uri","~$goog.string.StringBuffer"],["^15","goog/math/integer.js"],[1505449243000,"^S"],["^15","clojure/set.cljs"],[1535834828000,"^S","^R"],["^15","goog/uri/utils.js"],[1505449243000,"^S","^28","^29","^2A"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S"],"^T",["^J",["^U"]],"^V",["^ ","^W","^Q"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^2P",true,"^K","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$any","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^Z",["~$quote",["^Z",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^Z",["^2Y","^2Z"]]],"^2W",["^Z",[["^2Y","~$&","^2Z"]]],"~:arglists-meta",["^Z",[null]]]],"^K","~$re-frame.loggers/console","^30",true,"^6","re_frame/loggers.cljc","^:",14,"^2[",["^ ","^30",true,"^31",1,"^32",[["^Z",["^2Y","^2Z"]]],"^2W",["^Z",[["^2Y","~$&","^2Z"]]],"^33",["^Z",[null]]],"^32",[["^Z",["^2Y","^2Z"]]],"~:protocol-impl",null,"^33",["^Z",[null]],"^8",1,"^7",35,"^9",35,"^31",1,"~:fn-var",true,"^2W",["^Z",[["^2Y","~$&","^2Z"]]]],"~$set-loggers!",["^ ","^2V",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^2W",["^Z",["^2X",["^Z",[["~$new-loggers"]]]]],"^2T","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^K","~$re-frame.loggers/set-loggers!","^30",false,"^6","re_frame/loggers.cljc","^:",19,"^32",["^Z",[["^38"]]],"^35",null,"^33",["^Z",[null,null]],"^8",1,"^7",41,"^9",41,"^31",1,"^36",true,"^2W",["^Z",["^2X",["^Z",[["^38"]]]]],"^2T","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^2V",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^2W",["^Z",["^2X",["^Z",[[]]]]],"^2T","Get the current logging functions used by re-frame."],"^K","~$re-frame.loggers/get-loggers","^30",false,"^6","re_frame/loggers.cljc","^:",18,"^32",["^Z",[[]]],"^35",null,"^33",["^Z",[null,null]],"^8",1,"^7",48,"^9",48,"^31",0,"^36",true,"^2W",["^Z",["^2X",["^Z",[[]]]]],"^2T","Get the current logging functions used by re-frame."]],"^X",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^J",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^3A","^3>","^3?","^3=","^3@"]],"^11",["^ ","^U",["^J",[]]],"^12",["^ "],"^13",["^S","^R","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^26",[["^3E","~:static-fns"],true,["^3E","~:elide-asserts"],true,["^3E","~:optimize-constants"],null,["^3E","~:external-config"],null,["^3E","~:tooling-config"],null,["^3E","~:emit-constants"],null,["^3E","~:infer-externs"],true,["^3E","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^3E","~:fn-invoke-direct"],null,["^3E","^1<"],null]]]
["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\n/**\n * Create an interceptor from named arguments\n */\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___27095 = arguments.length;\nvar i__4500__auto___27096 = (0);\nwhile(true){\nif((i__4500__auto___27096 < len__4499__auto___27095)){\nargs__4502__auto__.push((arguments[i__4500__auto___27096]));\n\nvar G__27100 = (i__4500__auto___27096 + (1));\ni__4500__auto___27096 = G__27100;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((0) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4503__auto__);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__27074){\nvar map__27075 = p__27074;\nvar map__27075__$1 = ((((!((map__27075 == null)))?(((((map__27075.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27075.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27075):map__27075);\nvar m = map__27075__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27075__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27075__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27075__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5455__auto___27105 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5455__auto___27105){\nvar unknown_keys_27106 = temp__5455__auto___27105;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_27106], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__3922__auto__ = id;\nif(cljs.core.truth_(or__3922__auto__)){\nreturn or__3922__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq27067){\nvar self__4487__auto__ = this;\nreturn self__4487__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq27067));\n});\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__27108 = arguments.length;\nswitch (G__27108) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n});\n\nre_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__27112 = arguments.length;\nswitch (G__27112) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n});\n\nre_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___27127 = arguments.length;\nvar i__4500__auto___27128 = (0);\nwhile(true){\nif((i__4500__auto___27128 < len__4499__auto___27127)){\nargs__4502__auto__.push((arguments[i__4500__auto___27128]));\n\nvar G__27129 = (i__4500__auto___27128 + (1));\ni__4500__auto___27128 = G__27129;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((3) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4503__auto__);\n});\n\nre_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n});\n\nre_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nre_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq27120){\nvar G__27121 = cljs.core.first(seq27120);\nvar seq27120__$1 = cljs.core.next(seq27120);\nvar G__27122 = cljs.core.first(seq27120__$1);\nvar seq27120__$2 = cljs.core.next(seq27120__$1);\nvar G__27123 = cljs.core.first(seq27120__$2);\nvar seq27120__$3 = cljs.core.next(seq27120__$2);\nvar self__4486__auto__ = this;\nreturn self__4486__auto__.cljs$core$IFn$_invoke$arity$variadic(G__27121,G__27122,G__27123,seq27120__$3);\n});\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar f = temp__5455__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__27131 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__27131;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__27136 = arguments.length;\nswitch (G__27136) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n});\n\nre_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__26895__auto___27150 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__26895__auto___27150;\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^Q","~$re-frame.interop","^R","~$re-frame.trace","^S","~$trace","^S","~$clojure.set","^U","~$set","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^Q","~$empty-queue","^R","~$debug-enabled?","^R"],"~:require-macros",["^ ","^S","^S","^T","^S","^W","^W"],"~:form",["~#list",["~$ns","^L",["^15",["^Z",["^Q","~:refer",["^10"]],["^R","^17",["^11","^12"]],["^S","~:as","^T","~:include-macros",true],["^U","^18","^V"]]]]],"~:flags",["^ ","^Z",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1535913523343,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^J",["~:cljs"]],"~:source-map",["^ ","~i8",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1],["^ ","^1F",50,"^1G",1],["^ ","^1F",131,"^1G",1],["^ ","^1F",190,"^1G",1],["^ ","^1F",245,"^1G",1]],"~i5",[["^ ","^1F",0,"^1G",1,"^K","re-frame.interceptor/mandatory-interceptor-keys"]]],"~i10",["^ ","~i0",[["^ ","^1F",0,"^1G",2],["^ ","^1F",42,"^1G",2],["^ ","^1F",0,"^1G",3]],"~i6",[["^ ","^1F",0,"^1G",2,"^K","re-frame.interceptor/interceptor?"]]],"~i11",["^ ","~i3",[["^ ","^1F",92,"^1G",2,"^K","m"]]],"~i12",["^ ","~i2",[["^ ","^1F",0,"^1G",3]],"~i7",[["^ ","^1F",9,"^1G",3]],"~i8",[["^ ","^1F",9,"^1G",3,"^K","cljs.core/map?"]],"~i13",[["^ ","^1F",30,"^1G",3,"^K","m"]]],"^1K",["^ ","~i7",[["^ ","^1F",38,"^1G",3]],"~i8",[["^ ","^1F",38,"^1G",3,"^K","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1H",[["^ ","^1F",83,"^1G",3,"^K","re-frame.interceptor/mandatory-interceptor-keys"]],"~i37",[["^ ","^1F",131,"^1G",3],["^ ","^1F",145,"^1G",3]],"~i41",[["^ ","^1F",160,"^1G",3,"^K","m"]],"~i43",[["^ ","^1F",145,"^1G",3,"^K","cljs.core/keys"]],"~i48",[["^ ","^1F",131,"^1G",3,"^K","cljs.core/set"]]],"~i16",["^ ","~i0",[["^ ","^1F",0,"^1G",5],["^ ","^1F",0,"^1G",5],["^ ","^1F",40,"^1G",8],["^ ","^1F",88,"^1G",8,"^K","var_args"],["^ ","^1F",0,"^1G",9],["^ ","^1F",0,"^1G",9],["^ ","^1F",4,"^1G",9,"^K","args__4502__auto__"],["^ ","^1F",25,"^1G",9],["^ ","^1F",0,"^1G",10],["^ ","^1F",0,"^1G",10],["^ ","^1F",4,"^1G",10,"^K","len__4499__auto__"],["^ ","^1F",30,"^1G",10],["^ ","^1F",30,"^1G",10],["^ ","^1F",0,"^1G",11],["^ ","^1F",0,"^1G",11],["^ ","^1F",4,"^1G",11,"^K","i__4500__auto__"],["^ ","^1F",28,"^1G",11],["^ ","^1F",0,"^1G",13],["^ ","^1F",0,"^1G",13],["^ ","^1F",3,"^1G",13],["^ ","^1F",4,"^1G",13,"^K","i__4500__auto__"],["^ ","^1F",28,"^1G",13,"^K","len__4499__auto__"],["^ ","^1F",0,"^1G",14],["^ ","^1F",0,"^1G",14],["^ ","^1F",0,"^1G",14,"^K","args__4502__auto__"],["^ ","^1F",24,"^1G",14],["^ ","^1F",25,"^1G",14],["^ ","^1F",35,"^1G",14,"^K","i__4500__auto__"],["^ ","^1F",0,"^1G",16],["^ ","^1F",15,"^1G",16],["^ ","^1F",16,"^1G",16,"^K","i__4500__auto__"],["^ ","^1F",40,"^1G",16],["^ ","^1F",0,"^1G",20],["^ ","^1F",0,"^1G",24],["^ ","^1F",4,"^1G",24,"^K","argseq__4503__auto__"],["^ ","^1F",27,"^1G",24],["^ ","^1F",29,"^1G",24],["^ ","^1F",30,"^1G",24],["^ ","^1F",36,"^1G",24],["^ ","^1F",36,"^1G",24,"^K","args__4502__auto__"],["^ ","^1F",64,"^1G",24],["^ ","^1F",64,"^1G",24],["^ ","^1F",69,"^1G",24,"^K","cljs.core/IndexedSeq"],["^ ","^1F",90,"^1G",24],["^ ","^1F",90,"^1G",24,"^K","args__4502__auto__"],["^ ","^1F",115,"^1G",24],["^ ","^1F",120,"^1G",24],["^ ","^1F",124,"^1G",24],["^ ","^1F",131,"^1G",24],["^ ","^1F",0,"^1G",25],["^ ","^1F",0,"^1G",25],["^ ","^1F",7,"^1G",25,"^K","re-frame.interceptor/->interceptor"],["^ ","^1F",82,"^1G",25,"^K","argseq__4503__auto__"],["^ ","^1F",0,"^1G",28],["^ ","^1F",0,"^1G",28],["^ ","^1F",0,"^1G",28],["^ ","^1F",0,"^1G",28,"^K","re-frame.interceptor/->interceptor"],["^ ","^1F",77,"^1G",28],["^ ","^1F",88,"^1G",28,"^K","p__27074"],["^ ","^1F",0,"^1G",29],["^ ","^1F",0,"^1G",29],["^ ","^1F",4,"^1G",29,"^K","map__27075"],["^ ","^1F",17,"^1G",29,"^K","p__27074"],["^ ","^1F",4,"^1G",30,"^K","map__27075"],["^ ","^1F",21,"^1G",30],["^ ","^1F",23,"^1G",30],["^ ","^1F",25,"^1G",30],["^ ","^1F",27,"^1G",30],["^ ","^1F",28,"^1G",30,"^K","map__27075"],["^ ","^1F",42,"^1G",30],["^ ","^1F",50,"^1G",30],["^ ","^1F",52,"^1G",30],["^ ","^1F",54,"^1G",30],["^ ","^1F",55,"^1G",30],["^ ","^1F",55,"^1G",30,"^K","map__27075"],["^ ","^1F",104,"^1G",30],["^ ","^1F",115,"^1G",30],["^ ","^1F",116,"^1G",30,"^K","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1F",148,"^1G",30],["^ ","^1F",148,"^1G",30,"^K","map__27075"],["^ ","^1F",179,"^1G",30],["^ ","^1F",184,"^1G",30],["^ ","^1F",191,"^1G",30],["^ ","^1F",199,"^1G",30],["^ ","^1F",199,"^1G",30,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1F",245,"^1G",30,"^K","cljs.core/hash-map"],["^ ","^1F",264,"^1G",30,"^K","map__27075"],["^ ","^1F",276,"^1G",30,"^K","map__27075"],["^ ","^1F",8,"^1G",31,"^K","map__27075"],["^ ","^1F",9,"^1G",32],["^ ","^1F",9,"^1G",32,"^K","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1F",53,"^1G",32,"^K","map__27075"],["^ ","^1F",68,"^1G",32],["^ ","^1F",13,"^1G",33],["^ ","^1F",13,"^1G",33,"^K","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1F",57,"^1G",33,"^K","map__27075"],["^ ","^1F",72,"^1G",33],["^ ","^1F",12,"^1G",34],["^ ","^1F",12,"^1G",34,"^K","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1F",56,"^1G",34,"^K","map__27075"],["^ ","^1F",71,"^1G",34],["^ ","^1F",0,"^1G",35],["^ ","^1F",0,"^1G",45],["^ ","^1F",50,"^1G",45],["^ ","^1F",5,"^1G",51],["^ ","^1F",70,"^1G",51],["^ ","^1F",0,"^1G",54],["^ ","^1F",0,"^1G",54],["^ ","^1F",0,"^1G",54,"^K","re-frame.interceptor/->interceptor"],["^ ","^1F",64,"^1G",54],["^ ","^1F",0,"^1G",56],["^ ","^1F",0,"^1G",57],["^ ","^1F",0,"^1G",57],["^ ","^1F",0,"^1G",57,"^K","re-frame.interceptor/->interceptor"],["^ ","^1F",58,"^1G",57],["^ ","^1F",69,"^1G",57,"^K","seq27067"],["^ ","^1F",0,"^1G",58],["^ ","^1F",0,"^1G",58],["^ ","^1F",4,"^1G",58,"^K","self__4487__auto__"],["^ ","^1F",25,"^1G",58],["^ ","^1F",0,"^1G",59],["^ ","^1F",0,"^1G",59],["^ ","^1F",7,"^1G",59,"^K","self__4487__auto__"],["^ ","^1F",63,"^1G",59],["^ ","^1F",63,"^1G",59,"^K","cljs.core/seq"],["^ ","^1F",77,"^1G",59,"^K","seq27067"],["^ ","^1F",0,"^1G",62]],"~i6",[["^ ","^1F",0,"^1G",8,"^K","re-frame.interceptor/->interceptor"]]],"~i18",["^ ","^1H",[["^ ","^1F",4,"^1G",31,"^K","m"]],"~i19",[["^ ","^1F",4,"^1G",32,"^K","id"]],"~i22",[["^ ","^1F",4,"^1G",33,"^K","before"]],"~i29",[["^ ","^1F",4,"^1G",34,"^K","after"]]],"^1R",["^ ","~i2",[["^ ","^1F",0,"^1G",35],["^ ","^1F",0,"^1G",36],["^ ","^1F",0,"^1G",43]],"~i8",[["^ ","^1F",3,"^1G",35,"^K","re-frame.interop/debug-enabled?"]]],"~i20",["^ ","~i4",[["^ ","^1F",0,"^1G",36],["^ ","^1F",4,"^1G",36,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",37],["^ ","^1F",0,"^1G",37],["^ ","^1F",3,"^1G",37,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",38],["^ ","^1F",25,"^1G",38,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",39],["^ ","^1F",0,"^1G",41]],"^1K",[["^ ","^1F",4,"^1G",38,"^K","unknown-keys"]],"~i26",[["^ ","^1F",31,"^1G",36]],"~i27",[["^ ","^1F",31,"^1G",36,"^K","cljs.core/seq"]],"~i31",[["^ ","^1F",45,"^1G",36]],"~i32",[["^ ","^1F",45,"^1G",36,"^K","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]]],"~i21",["^ ","^1Y",[["^ ","^1F",98,"^1G",36],["^ ","^1F",112,"^1G",36]],"~i36",[["^ ","^1F",127,"^1G",36,"^K","m"]],"~i38",[["^ ","^1F",112,"^1G",36,"^K","cljs.core/keys"]],"^1N",[["^ ","^1F",98,"^1G",36,"^K","cljs.core/set"]]],"^1S",["^ ","^1Y",[["^ ","^1F",131,"^1G",36,"^K","re-frame.interceptor/mandatory-interceptor-keys"]]],"~i23",["^ ","~i6",[["^ ","^1F",0,"^1G",39],["^ ","^1F",62,"^1G",39],["^ ","^1F",167,"^1G",39],["^ ","^1F",195,"^1G",39]],"~i7",[["^ ","^1F",0,"^1G",39,"^K","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic"]],"^1O",[["^ ","^1F",193,"^1G",39,"^K","m"]],"~i70",[["^ ","^1F",215,"^1G",39,"^K","unknown-keys"]]],"~i24",["^ ","^1I",[["^ ","^1F",100,"^1G",45],["^ ","^1F",117,"^1G",45,"^K","or__3922__auto__"],["^ ","^1F",0,"^1G",46],["^ ","^1F",0,"^1G",46],["^ ","^1F",20,"^1G",46,"^K","or__3922__auto__"],["^ ","^1F",0,"^1G",47,"^K","or__3922__auto__"],["^ ","^1F",0,"^1G",49]],"~i15",[["^ ","^1F",136,"^1G",45,"^K","id"]]],"~i25",["^ ","^1I",[["^ ","^1F",63,"^1G",51,"^K","before"]]],"^1V",["^ ","^1I",[["^ ","^1F",124,"^1G",51,"^K","after"]]],"~i30",["^ ","~i0",[["^ ","^1F",0,"^1G",62],["^ ","^1F",0,"^1G",62],["^ ","^1F",34,"^1G",62],["^ ","^1F",76,"^1G",62,"^K","var_args"],["^ ","^1F",0,"^1G",63],["^ ","^1F",0,"^1G",63],["^ ","^1F",4,"^1G",63,"^K","G__27108"],["^ ","^1F",15,"^1G",63],["^ ","^1F",15,"^1G",63],["^ ","^1F",0,"^1G",64],["^ ","^1F",0,"^1G",64],["^ ","^1F",8,"^1G",64,"^K","G__27108"],["^ ","^1F",5,"^1G",65],["^ ","^1F",0,"^1G",66],["^ ","^1F",7,"^1G",66,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",69,"^1G",66],["^ ","^1F",70,"^1G",66],["^ ","^1F",80,"^1G",66],["^ ","^1F",5,"^1G",69],["^ ","^1F",0,"^1G",70],["^ ","^1F",7,"^1G",70,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",69,"^1G",70],["^ ","^1F",70,"^1G",70],["^ ","^1F",80,"^1G",70],["^ ","^1F",86,"^1G",70],["^ ","^1F",87,"^1G",70],["^ ","^1F",97,"^1G",70],["^ ","^1F",5,"^1G",73],["^ ","^1F",0,"^1G",74],["^ ","^1F",7,"^1G",74,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",69,"^1G",74],["^ ","^1F",70,"^1G",74],["^ ","^1F",80,"^1G",74],["^ ","^1F",86,"^1G",74],["^ ","^1F",87,"^1G",74],["^ ","^1F",97,"^1G",74],["^ ","^1F",103,"^1G",74],["^ ","^1F",104,"^1G",74],["^ ","^1F",114,"^1G",74],["^ ","^1F",0,"^1G",78],["^ ","^1F",6,"^1G",78],["^ ","^1F",11,"^1G",78,"^K","js/Error"],["^ ","^1F",17,"^1G",78],["^ ","^1F",18,"^1G",78],["^ ","^1F",80,"^1G",78],["^ ","^1F",80,"^1G",78],["^ ","^1F",0,"^1G",83],["^ ","^1F",0,"^1G",83],["^ ","^1F",64,"^1G",83],["^ ","^1F",0,"^1G",84],["^ ","^1F",0,"^1G",87],["^ ","^1F",0,"^1G",87],["^ ","^1F",64,"^1G",87],["^ ","^1F",0,"^1G",88],["^ ","^1F",0,"^1G",91],["^ ","^1F",0,"^1G",91],["^ ","^1F",64,"^1G",91],["^ ","^1F",0,"^1G",92],["^ ","^1F",0,"^1G",95],["^ ","^1F",0,"^1G",95],["^ ","^1F",58,"^1G",95],["^ ","^1F",0,"^1G",97]],"~i6",[["^ ","^1F",0,"^1G",62,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",0,"^1G",83,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",0,"^1G",87,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",0,"^1G",91,"^K","re-frame.interceptor/get-effect"],["^ ","^1F",0,"^1G",95,"^K","re-frame.interceptor/get-effect"]]],"^1X",["^ ","~i4",[["^ ","^1F",75,"^1G",83,"^K","context"]]],"^1Y",["^ ","~i3",[["^ ","^1F",0,"^1G",84],["^ ","^1F",7,"^1G",84]],"^1K",[["^ ","^1F",96,"^1G",84,"^K","context"]]],"~i33",["^ ","~i4",[["^ ","^1F",75,"^1G",87,"^K","context"]],"^1J",[["^ ","^1F",83,"^1G",87,"^K","key"]]],"~i34",["^ ","~i3",[["^ ","^1F",0,"^1G",88],["^ ","^1F",62,"^1G",88],["^ ","^1F",145,"^1G",88]],"~i4",[["^ ","^1F",7,"^1G",88,"^K","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1I",[["^ ","^1F",54,"^1G",88,"^K","context"]],"^1T",[["^ ","^1F",204,"^1G",88,"^K","key"]]],"~i35",["^ ","~i4",[["^ ","^1F",75,"^1G",91,"^K","context"]],"^1J",[["^ ","^1F",83,"^1G",91,"^K","key"]],"^1P",[["^ ","^1F",87,"^1G",91,"^K","not-found"]]],"^1[",["^ ","~i3",[["^ ","^1F",0,"^1G",92],["^ ","^1F",62,"^1G",92],["^ ","^1F",145,"^1G",92]],"~i4",[["^ ","^1F",7,"^1G",92,"^K","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"]],"^1I",[["^ ","^1F",54,"^1G",92,"^K","context"]],"^1T",[["^ ","^1F",204,"^1G",92,"^K","key"]],"^28",[["^ ","^1F",216,"^1G",92,"^K","not-found"]]],"~i39",["^ ","~i0",[["^ ","^1F",0,"^1G",97],["^ ","^1F",36,"^1G",97],["^ ","^1F",0,"^1G",98]],"~i6",[["^ ","^1F",0,"^1G",97,"^K","re-frame.interceptor/assoc-effect"]]],"~i40",["^ ","~i3",[["^ ","^1F",80,"^1G",97,"^K","context"]],"^1I",[["^ ","^1F",88,"^1G",97,"^K","key"]],"^24",[["^ ","^1F",92,"^1G",97,"^K","value"]]],"^1M",["^ ","~i2",[["^ ","^1F",0,"^1G",98],["^ ","^1F",34,"^1G",98],["^ ","^1F",117,"^1G",98]],"~i3",[["^ ","^1F",7,"^1G",98,"^K","cljs.core/assoc-in"]],"^1J",[["^ ","^1F",26,"^1G",98,"^K","context"]],"^26",[["^ ","^1F",176,"^1G",98,"^K","key"]],"^29",[["^ ","^1F",188,"^1G",98,"^K","value"]]],"~i45",["^ ","~i0",[["^ ","^1F",0,"^1G",100],["^ ","^1F",0,"^1G",100],["^ ","^1F",36,"^1G",100],["^ ","^1F",80,"^1G",100,"^K","var_args"],["^ ","^1F",0,"^1G",101],["^ ","^1F",0,"^1G",101],["^ ","^1F",4,"^1G",101,"^K","G__27112"],["^ ","^1F",15,"^1G",101],["^ ","^1F",15,"^1G",101],["^ ","^1F",0,"^1G",102],["^ ","^1F",0,"^1G",102],["^ ","^1F",8,"^1G",102,"^K","G__27112"],["^ ","^1F",5,"^1G",103],["^ ","^1F",0,"^1G",104],["^ ","^1F",7,"^1G",104,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",71,"^1G",104],["^ ","^1F",72,"^1G",104],["^ ","^1F",82,"^1G",104],["^ ","^1F",5,"^1G",107],["^ ","^1F",0,"^1G",108],["^ ","^1F",7,"^1G",108,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",71,"^1G",108],["^ ","^1F",72,"^1G",108],["^ ","^1F",82,"^1G",108],["^ ","^1F",88,"^1G",108],["^ ","^1F",89,"^1G",108],["^ ","^1F",99,"^1G",108],["^ ","^1F",5,"^1G",111],["^ ","^1F",0,"^1G",112],["^ ","^1F",7,"^1G",112,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",71,"^1G",112],["^ ","^1F",72,"^1G",112],["^ ","^1F",82,"^1G",112],["^ ","^1F",88,"^1G",112],["^ ","^1F",89,"^1G",112],["^ ","^1F",99,"^1G",112],["^ ","^1F",105,"^1G",112],["^ ","^1F",106,"^1G",112],["^ ","^1F",116,"^1G",112],["^ ","^1F",0,"^1G",116],["^ ","^1F",6,"^1G",116],["^ ","^1F",11,"^1G",116,"^K","js/Error"],["^ ","^1F",17,"^1G",116],["^ ","^1F",18,"^1G",116],["^ ","^1F",80,"^1G",116],["^ ","^1F",80,"^1G",116],["^ ","^1F",0,"^1G",121],["^ ","^1F",0,"^1G",121],["^ ","^1F",66,"^1G",121],["^ ","^1F",0,"^1G",122],["^ ","^1F",0,"^1G",125],["^ ","^1F",0,"^1G",125],["^ ","^1F",66,"^1G",125],["^ ","^1F",0,"^1G",126],["^ ","^1F",0,"^1G",129],["^ ","^1F",0,"^1G",129],["^ ","^1F",66,"^1G",129],["^ ","^1F",0,"^1G",130],["^ ","^1F",0,"^1G",133],["^ ","^1F",0,"^1G",133],["^ ","^1F",60,"^1G",133],["^ ","^1F",0,"^1G",135]],"~i6",[["^ ","^1F",0,"^1G",100,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",0,"^1G",121,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",0,"^1G",125,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",0,"^1G",129,"^K","re-frame.interceptor/get-coeffect"],["^ ","^1F",0,"^1G",133,"^K","re-frame.interceptor/get-coeffect"]]],"~i46",["^ ","~i4",[["^ ","^1F",77,"^1G",121,"^K","context"]]],"~i47",["^ ","~i3",[["^ ","^1F",0,"^1G",122],["^ ","^1F",7,"^1G",122]],"^24",[["^ ","^1F",99,"^1G",122,"^K","context"]]],"^1O",["^ ","~i4",[["^ ","^1F",77,"^1G",125,"^K","context"]],"^1J",[["^ ","^1F",85,"^1G",125,"^K","key"]]],"~i49",["^ ","~i3",[["^ ","^1F",0,"^1G",126],["^ ","^1F",62,"^1G",126],["^ ","^1F",145,"^1G",126]],"~i4",[["^ ","^1F",7,"^1G",126,"^K","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1I",[["^ ","^1F",54,"^1G",126,"^K","context"]],"^1X",[["^ ","^1F",207,"^1G",126,"^K","key"]]],"~i50",["^ ","~i4",[["^ ","^1F",77,"^1G",129,"^K","context"]],"^1J",[["^ ","^1F",85,"^1G",129,"^K","key"]],"^1P",[["^ ","^1F",89,"^1G",129,"^K","not-found"]]],"~i51",["^ ","~i3",[["^ ","^1F",0,"^1G",130],["^ ","^1F",62,"^1G",130],["^ ","^1F",145,"^1G",130]],"~i4",[["^ ","^1F",7,"^1G",130,"^K","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"]],"^1I",[["^ ","^1F",54,"^1G",130,"^K","context"]],"^1X",[["^ ","^1F",207,"^1G",130,"^K","key"]],"^1[",[["^ ","^1F",219,"^1G",130,"^K","not-found"]]],"~i53",["^ ","~i0",[["^ ","^1F",0,"^1G",135],["^ ","^1F",38,"^1G",135],["^ ","^1F",0,"^1G",136]],"~i6",[["^ ","^1F",0,"^1G",135,"^K","re-frame.interceptor/assoc-coeffect"]]],"~i54",["^ ","~i3",[["^ ","^1F",84,"^1G",135,"^K","context"]],"^1I",[["^ ","^1F",92,"^1G",135,"^K","key"]],"^24",[["^ ","^1F",96,"^1G",135,"^K","value"]]],"~i55",["^ ","~i2",[["^ ","^1F",0,"^1G",136],["^ ","^1F",34,"^1G",136],["^ ","^1F",117,"^1G",136]],"~i3",[["^ ","^1F",7,"^1G",136,"^K","cljs.core/assoc-in"]],"^1J",[["^ ","^1F",26,"^1G",136,"^K","context"]],"^1Y",[["^ ","^1F",179,"^1G",136,"^K","key"]],"^1L",[["^ ","^1F",191,"^1G",136,"^K","value"]]],"~i57",["^ ","~i0",[["^ ","^1F",0,"^1G",138],["^ ","^1F",0,"^1G",138],["^ ","^1F",39,"^1G",138],["^ ","^1F",86,"^1G",138,"^K","var_args"],["^ ","^1F",0,"^1G",139],["^ ","^1F",0,"^1G",139],["^ ","^1F",4,"^1G",139,"^K","args__4502__auto__"],["^ ","^1F",25,"^1G",139],["^ ","^1F",0,"^1G",140],["^ ","^1F",0,"^1G",140],["^ ","^1F",4,"^1G",140,"^K","len__4499__auto__"],["^ ","^1F",30,"^1G",140],["^ ","^1F",30,"^1G",140],["^ ","^1F",0,"^1G",141],["^ ","^1F",0,"^1G",141],["^ ","^1F",4,"^1G",141,"^K","i__4500__auto__"],["^ ","^1F",28,"^1G",141],["^ ","^1F",0,"^1G",143],["^ ","^1F",0,"^1G",143],["^ ","^1F",3,"^1G",143],["^ ","^1F",4,"^1G",143,"^K","i__4500__auto__"],["^ ","^1F",28,"^1G",143,"^K","len__4499__auto__"],["^ ","^1F",0,"^1G",144],["^ ","^1F",0,"^1G",144],["^ ","^1F",0,"^1G",144,"^K","args__4502__auto__"],["^ ","^1F",24,"^1G",144],["^ ","^1F",25,"^1G",144],["^ ","^1F",35,"^1G",144,"^K","i__4500__auto__"],["^ ","^1F",0,"^1G",146],["^ ","^1F",15,"^1G",146],["^ ","^1F",16,"^1G",146,"^K","i__4500__auto__"],["^ ","^1F",40,"^1G",146],["^ ","^1F",0,"^1G",150],["^ ","^1F",0,"^1G",154],["^ ","^1F",4,"^1G",154,"^K","argseq__4503__auto__"],["^ ","^1F",27,"^1G",154],["^ ","^1F",29,"^1G",154],["^ ","^1F",30,"^1G",154],["^ ","^1F",36,"^1G",154],["^ ","^1F",36,"^1G",154,"^K","args__4502__auto__"],["^ ","^1F",64,"^1G",154],["^ ","^1F",64,"^1G",154],["^ ","^1F",69,"^1G",154,"^K","cljs.core/IndexedSeq"],["^ ","^1F",90,"^1G",154],["^ ","^1F",90,"^1G",154,"^K","args__4502__auto__"],["^ ","^1F",115,"^1G",154],["^ ","^1F",120,"^1G",154],["^ ","^1F",124,"^1G",154],["^ ","^1F",131,"^1G",154],["^ ","^1F",0,"^1G",155],["^ ","^1F",0,"^1G",155],["^ ","^1F",7,"^1G",155,"^K","re-frame.interceptor/update-coeffect"],["^ ","^1F",81,"^1G",155],["^ ","^1F",82,"^1G",155],["^ ","^1F",92,"^1G",155],["^ ","^1F",98,"^1G",155],["^ ","^1F",99,"^1G",155],["^ ","^1F",109,"^1G",155],["^ ","^1F",115,"^1G",155],["^ ","^1F",116,"^1G",155],["^ ","^1F",126,"^1G",155],["^ ","^1F",132,"^1G",155,"^K","argseq__4503__auto__"],["^ ","^1F",0,"^1G",158],["^ ","^1F",0,"^1G",158],["^ ","^1F",0,"^1G",158],["^ ","^1F",0,"^1G",158,"^K","re-frame.interceptor/update-coeffect"],["^ ","^1F",76,"^1G",158],["^ ","^1F",0,"^1G",159],["^ ","^1F",0,"^1G",162],["^ ","^1F",0,"^1G",162],["^ ","^1F",0,"^1G",162,"^K","re-frame.interceptor/update-coeffect"],["^ ","^1F",63,"^1G",162],["^ ","^1F",0,"^1G",164],["^ ","^1F",0,"^1G",165],["^ ","^1F",0,"^1G",165],["^ ","^1F",0,"^1G",165,"^K","re-frame.interceptor/update-coeffect"],["^ ","^1F",57,"^1G",165],["^ ","^1F",68,"^1G",165,"^K","seq27120"],["^ ","^1F",0,"^1G",166],["^ ","^1F",0,"^1G",166],["^ ","^1F",4,"^1G",166,"^K","G__27121"],["^ ","^1F",15,"^1G",166],["^ ","^1F",15,"^1G",166,"^K","cljs.core/first"],["^ ","^1F",31,"^1G",166,"^K","seq27120"],["^ ","^1F",4,"^1G",167,"^K","seq27120"],["^ ","^1F",19,"^1G",167],["^ ","^1F",19,"^1G",167,"^K","cljs.core/next"],["^ ","^1F",34,"^1G",167,"^K","seq27120"],["^ ","^1F",4,"^1G",168,"^K","G__27122"],["^ ","^1F",15,"^1G",168],["^ ","^1F",15,"^1G",168,"^K","cljs.core/first"],["^ ","^1F",31,"^1G",168,"^K","seq27120"],["^ ","^1F",4,"^1G",169,"^K","seq27120"],["^ ","^1F",19,"^1G",169],["^ ","^1F",19,"^1G",169,"^K","cljs.core/next"],["^ ","^1F",34,"^1G",169,"^K","seq27120"],["^ ","^1F",4,"^1G",170,"^K","G__27123"],["^ ","^1F",15,"^1G",170],["^ ","^1F",15,"^1G",170,"^K","cljs.core/first"],["^ ","^1F",31,"^1G",170,"^K","seq27120"],["^ ","^1F",4,"^1G",171,"^K","seq27120"],["^ ","^1F",19,"^1G",171],["^ ","^1F",19,"^1G",171,"^K","cljs.core/next"],["^ ","^1F",34,"^1G",171,"^K","seq27120"],["^ ","^1F",0,"^1G",172],["^ ","^1F",0,"^1G",172],["^ ","^1F",4,"^1G",172,"^K","self__4486__auto__"],["^ ","^1F",25,"^1G",172],["^ ","^1F",0,"^1G",173],["^ ","^1F",0,"^1G",173],["^ ","^1F",7,"^1G",173,"^K","self__4486__auto__"],["^ ","^1F",63,"^1G",173,"^K","G__27121"],["^ ","^1F",72,"^1G",173,"^K","G__27122"],["^ ","^1F",81,"^1G",173,"^K","G__27123"],["^ ","^1F",90,"^1G",173,"^K","seq27120"],["^ ","^1F",0,"^1G",176]],"~i6",[["^ ","^1F",0,"^1G",138,"^K","re-frame.interceptor/update-coeffect"]]],"~i58",["^ ","~i3",[["^ ","^1F",87,"^1G",158,"^K","context"]],"^1I",[["^ ","^1F",95,"^1G",158,"^K","key"]],"^24",[["^ ","^1F",99,"^1G",158,"^K","f"]],"^1R",[["^ ","^1F",101,"^1G",158,"^K","args"]]],"~i59",["^ ","~i2",[["^ ","^1F",0,"^1G",159],["^ ","^1F",81,"^1G",159],["^ ","^1F",164,"^1G",159]],"~i3",[["^ ","^1F",7,"^1G",159,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$5"]],"~i9",[["^ ","^1F",53,"^1G",159,"^K","cljs.core/update-in"]],"^1R",[["^ ","^1F",73,"^1G",159,"^K","context"]],"^2:",[["^ ","^1F",226,"^1G",159,"^K","key"]],"~i44",[["^ ","^1F",238,"^1G",159,"^K","f"]],"^2=",[["^ ","^1F",240,"^1G",159,"^K","args"]]],"~i64",["^ ","~i0",[["^ ","^1F",0,"^1G",176],["^ ","^1F",45,"^1G",176],["^ ","^1F",0,"^1G",177]],"~i7",[["^ ","^1F",0,"^1G",176,"^K","re-frame.interceptor/invoke-interceptor-fn"]]],"~i65",["^ ","~i3",[["^ ","^1F",98,"^1G",176,"^K","context"]],"^1I",[["^ ","^1F",106,"^1G",176,"^K","interceptor"]],"^21",[["^ ","^1F",118,"^1G",176,"^K","direction"]]],"~i66",["^ ","~i2",[["^ ","^1F",0,"^1G",177],["^ ","^1F",4,"^1G",177,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",178],["^ ","^1F",0,"^1G",178],["^ ","^1F",20,"^1G",178,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",179],["^ ","^1F",8,"^1G",179,"^K","temp__5455__auto__"],["^ ","^1F",0,"^1G",180]],"^1I",[["^ ","^1F",4,"^1G",179,"^K","f"]],"^1K",[["^ ","^1F",25,"^1G",177]],"~i14",[["^ ","^1F",25,"^1G",177,"^K","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1Q",[["^ ","^1F",69,"^1G",177,"^K","interceptor"]],"^26",[["^ ","^1F",81,"^1G",177,"^K","direction"]]],"~i67",["^ ","~i4",[["^ ","^1F",0,"^1G",180]],"~i5",[["^ ","^1F",8,"^1G",180,"^K","f"],["^ ","^1F",42,"^1G",180,"^K","f"],["^ ","^1F",85,"^1G",180,"^K","f"]],"~i7",[["^ ","^1F",74,"^1G",180,"^K","context"],["^ ","^1F",97,"^1G",180,"^K","context"]]],"~i68",["^ ","~i4",[["^ ","^1F",0,"^1G",182,"^K","context"]]],"~i71",["^ ","~i0",[["^ ","^1F",0,"^1G",185],["^ ","^1F",43,"^1G",210],["^ ","^1F",0,"^1G",211]],"~i7",[["^ ","^1F",0,"^1G",210,"^K","re-frame.interceptor/invoke-interceptors"]]],"~i95",["^ ","~i4",[["^ ","^1F",94,"^1G",210,"^K","context"]],"^1J",[["^ ","^1F",102,"^1G",210,"^K","direction"]]],"~i96",["^ ","~i3",[["^ ","^1F",0,"^1G",211],["^ ","^1F",0,"^1G",213]],"^1H",[["^ ","^1F",4,"^1G",211,"^K","context"]],"^1Q",[["^ ","^1F",18,"^1G",211,"^K","context"]]],"~i97",["^ ","~i5",[["^ ","^1F",0,"^1G",213],["^ ","^1F",0,"^1G",214]],"^1I",[["^ ","^1F",4,"^1G",213,"^K","queue"]],"~i17",[["^ ","^1F",12,"^1G",213],["^ ","^1F",12,"^1G",213]],"^25",[["^ ","^1F",97,"^1G",213,"^K","context"]]],"~i98",["^ ","~i7",[["^ ","^1F",0,"^1G",214]],"^1I",[["^ ","^1F",3,"^1G",214]],"^1J",[["^ ","^1F",3,"^1G",214,"^K","cljs.core/empty?"]],"^1R",[["^ ","^1F",26,"^1G",214,"^K","queue"]]],"~i99",["^ ","~i9",[["^ ","^1F",0,"^1G",215,"^K","context"]]],"~i100",["^ ","~i9",[["^ ","^1F",0,"^1G",217],["^ ","^1F",0,"^1G",219]],"^24",[["^ ","^1F",4,"^1G",217,"^K","interceptor"]],"^1W",[["^ ","^1F",18,"^1G",217]],"~i28",[["^ ","^1F",18,"^1G",217,"^K","cljs.core/peek"]],"^27",[["^ ","^1F",33,"^1G",217,"^K","queue"]]],"~i101",["^ ","^24",[["^ ","^1F",4,"^1G",218,"^K","stack"]],"^1Z",[["^ ","^1F",12,"^1G",218],["^ ","^1F",12,"^1G",218]],"^1T",[["^ ","^1F",97,"^1G",218,"^K","context"]]],"~i102",["^ ","^1I",[["^ ","^1F",0,"^1G",219]],"^1S",[["^ ","^1F",111,"^1G",219,"^K","context"]]],"~i103",["^ ","^1S",[["^ ","^1F",58,"^1G",219],["^ ","^1F",123,"^1G",219],["^ ","^1F",249,"^1G",219]],"^21",[["^ ","^1F",58,"^1G",219,"^K","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^1[",[["^ ","^1F",178,"^1G",219]],"^1L",[["^ ","^1F",178,"^1G",219,"^K","cljs.core/pop"]],"^1M",[["^ ","^1F",192,"^1G",219,"^K","queue"]]],"~i104",["^ ","^1[",[["^ ","^1F",304,"^1G",219]],"^1L",[["^ ","^1F",304,"^1G",219,"^K","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"~i42",[["^ ","^1F",349,"^1G",219,"^K","stack"]],"^1O",[["^ ","^1F",355,"^1G",219,"^K","interceptor"]]],"~i105",["^ ","^1S",[["^ ","^1F",15,"^1G",219]],"^21",[["^ ","^1F",15,"^1G",219,"^K","re-frame.interceptor/invoke-interceptor-fn"]],"^2<",[["^ ","^1F",374,"^1G",219,"^K","interceptor"]],"^2E",[["^ ","^1F",386,"^1G",219,"^K","direction"]]],"~i108",["^ ","~i0",[["^ ","^1F",0,"^1G",226],["^ ","^1F",31,"^1G",233],["^ ","^1F",0,"^1G",234]],"~i6",[["^ ","^1F",0,"^1G",233,"^K","re-frame.interceptor/enqueue"]]],"~i114",["^ ","~i3",[["^ ","^1F",70,"^1G",233,"^K","context"]],"^1I",[["^ ","^1F",78,"^1G",233,"^K","interceptors"]]],"~i115",["^ ","~i2",[["^ ","^1F",0,"^1G",234],["^ ","^1F",62,"^1G",234]],"~i3",[["^ ","^1F",7,"^1G",234,"^K","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^1H",[["^ ","^1F",54,"^1G",234,"^K","context"]]],"~i116",["^ ","^1H",[["^ ","^1F",117,"^1G",234]],"^1I",[["^ ","^1F",117,"^1G",234,"^K","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"]],"^1P",[["^ ","^1F",162,"^1G",234,"^K","cljs.core/into"]],"^1Z",[["^ ","^1F",177,"^1G",234,"^K","re-frame.interop/empty-queue"]]],"~i117",["^ ","^1H",[["^ ","^1F",207,"^1G",234,"^K","interceptors"]]],"~i120",["^ ","~i0",[["^ ","^1F",0,"^1G",236],["^ ","^1F",0,"^1G",236],["^ ","^1F",31,"^1G",239],["^ ","^1F",70,"^1G",239,"^K","var_args"],["^ ","^1F",0,"^1G",240],["^ ","^1F",0,"^1G",240],["^ ","^1F",4,"^1G",240,"^K","G__27136"],["^ ","^1F",15,"^1G",240],["^ ","^1F",15,"^1G",240],["^ ","^1F",0,"^1G",241],["^ ","^1F",0,"^1G",241],["^ ","^1F",8,"^1G",241,"^K","G__27136"],["^ ","^1F",5,"^1G",242],["^ ","^1F",0,"^1G",243],["^ ","^1F",7,"^1G",243,"^K","re-frame.interceptor/context"],["^ ","^1F",66,"^1G",243],["^ ","^1F",67,"^1G",243],["^ ","^1F",77,"^1G",243],["^ ","^1F",83,"^1G",243],["^ ","^1F",84,"^1G",243],["^ ","^1F",94,"^1G",243],["^ ","^1F",5,"^1G",246],["^ ","^1F",0,"^1G",247],["^ ","^1F",7,"^1G",247,"^K","re-frame.interceptor/context"],["^ ","^1F",66,"^1G",247],["^ ","^1F",67,"^1G",247],["^ ","^1F",77,"^1G",247],["^ ","^1F",83,"^1G",247],["^ ","^1F",84,"^1G",247],["^ ","^1F",94,"^1G",247],["^ ","^1F",100,"^1G",247],["^ ","^1F",101,"^1G",247],["^ ","^1F",111,"^1G",247],["^ ","^1F",0,"^1G",251],["^ ","^1F",6,"^1G",251],["^ ","^1F",11,"^1G",251,"^K","js/Error"],["^ ","^1F",17,"^1G",251],["^ ","^1F",18,"^1G",251],["^ ","^1F",80,"^1G",251],["^ ","^1F",80,"^1G",251],["^ ","^1F",0,"^1G",256],["^ ","^1F",0,"^1G",256],["^ ","^1F",61,"^1G",256],["^ ","^1F",0,"^1G",257],["^ ","^1F",0,"^1G",260],["^ ","^1F",0,"^1G",260],["^ ","^1F",61,"^1G",260],["^ ","^1F",0,"^1G",261],["^ ","^1F",0,"^1G",264],["^ ","^1F",0,"^1G",264],["^ ","^1F",55,"^1G",264],["^ ","^1F",0,"^1G",266]],"~i7",[["^ ","^1F",0,"^1G",239,"^K","re-frame.interceptor/context"],["^ ","^1F",0,"^1G",256,"^K","re-frame.interceptor/context"],["^ ","^1F",0,"^1G",260,"^K","re-frame.interceptor/context"],["^ ","^1F",0,"^1G",264,"^K","re-frame.interceptor/context"]]],"~i122",["^ ","~i4",[["^ ","^1F",72,"^1G",256,"^K","event"]],"^1H",[["^ ","^1F",78,"^1G",256,"^K","interceptors"]]],"~i124",["^ ","~i6",[["^ ","^1F",36,"^1G",257],["^ ","^1F",72,"^1G",257],["^ ","^1F",107,"^1G",257]],"~i7",[["^ ","^1F",36,"^1G",257,"^K","re-frame.interceptor/assoc-coeffect"]],"^1T",[["^ ","^1F",161,"^1G",257,"^K","event"]]],"~i125",["^ ","~i6",[["^ ","^1F",0,"^1G",257]],"~i7",[["^ ","^1F",7,"^1G",257,"^K","re-frame.interceptor/enqueue"]],"^24",[["^ ","^1F",168,"^1G",257,"^K","interceptors"]]],"~i126",["^ ","~i4",[["^ ","^1F",72,"^1G",260,"^K","event"]],"^1H",[["^ ","^1F",78,"^1G",260,"^K","interceptors"]],"^21",[["^ ","^1F",91,"^1G",260,"^K","db"]]],"~i127",["^ ","~i7",[["^ ","^1F",43,"^1G",261]],"~i8",[["^ ","^1F",43,"^1G",261,"^K","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2"]],"^1P",[["^ ","^1F",102,"^1G",261,"^K","event"]],"^1S",[["^ ","^1F",108,"^1G",261,"^K","interceptors"]]],"~i128",["^ ","~i7",[["^ ","^1F",0,"^1G",261],["^ ","^1F",122,"^1G",261]],"~i8",[["^ ","^1F",7,"^1G",261,"^K","re-frame.interceptor/assoc-coeffect"]],"^1W",[["^ ","^1F",170,"^1G",261,"^K","db"]]],"~i131",["^ ","~i0",[["^ ","^1F",0,"^1G",266],["^ ","^1F",40,"^1G",275],["^ ","^1F",0,"^1G",276]],"~i7",[["^ ","^1F",0,"^1G",275,"^K","re-frame.interceptor/change-direction"]]],"~i139",["^ ","~i3",[["^ ","^1F",88,"^1G",275,"^K","context"]]],"~i140",["^ ","~i6",[["^ ","^1F",83,"^1G",276,"^K","context"]]],"~i141",["^ ","~i6",[["^ ","^1F",36,"^1G",276],["^ ","^1F",91,"^1G",276]],"~i7",[["^ ","^1F",36,"^1G",276,"^K","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"]]],"~i142",["^ ","~i6",[["^ ","^1F",0,"^1G",276]],"~i7",[["^ ","^1F",7,"^1G",276,"^K","re-frame.interceptor/enqueue"]],"^24",[["^ ","^1F",147,"^1G",276],["^ ","^1F",147,"^1G",276]],"^21",[["^ ","^1F",232,"^1G",276,"^K","context"]]],"~i145",["^ ","~i0",[["^ ","^1F",0,"^1G",278],["^ ","^1F",31,"^1G",328],["^ ","^1F",0,"^1G",329]],"~i6",[["^ ","^1F",0,"^1G",328,"^K","re-frame.interceptor/execute"]]],"~i194",["^ ","~i3",[["^ ","^1F",70,"^1G",328,"^K","event-v"]],"^1I",[["^ ","^1F",78,"^1G",328,"^K","interceptors"]]],"~i195",["^ ","~i2",[["^ ","^1F",0,"^1G",329],["^ ","^1F",3,"^1G",329],["^ ","^1F",3,"^1G",329,"^K","re-frame.trace/is-trace-enabled?"],["^ ","^1F",0,"^1G",330],["^ ","^1F",0,"^1G",330],["^ ","^1F",4,"^1G",330,"^K","new-trace__26895__auto__"],["^ ","^1F",37,"^1G",330],["^ ","^1F",37,"^1G",330,"^K","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1F",140,"^1G",330],["^ ","^1F",140,"^1G",330,"^K","cljs.core.update.cljs$core$IFn$_invoke$arity$4"],["^ ","^1F",187,"^1G",330,"^K","re-frame.trace/*current-trace*"],["^ ","^1F",228,"^1G",330],["^ ","^1F",281,"^1G",330,"^K","cljs.core/merge"],["^ ","^1F",297,"^1G",330],["^ ","^1F",297,"^1G",330],["^ ","^1F",380,"^1G",330],["^ ","^1F",423,"^1G",330],["^ ","^1F",476,"^1G",330],["^ ","^1F",519,"^1G",330],["^ ","^1F",620,"^1G",330],["^ ","^1F",620,"^1G",330,"^K","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"],["^ ","^1F",667,"^1G",330],["^ ","^1F",710,"^1G",330],["^ ","^1F",763,"^1G",330],["^ ","^1F",806,"^1G",330],["^ ","^1F",905,"^1G",330],["^ ","^1F",0,"^1G",331],["^ ","^1F",0,"^1G",331],["^ ","^1F",0,"^1G",331,"^K","re-frame.trace/*current-trace*"],["^ ","^1F",43,"^1G",331,"^K","new-trace__26895__auto__"],["^ ","^1F",0,"^1G",333],["^ ","^1F",0,"^1G",334]]],"~i196",["^ ","^1V",[["^ ","^1F",589,"^1G",330,"^K","interceptors"],["^ ","^1F",876,"^1G",330,"^K","interceptors"]]],"~i197",["^ ","~i6",[["^ ","^1F",127,"^1G",336]],"~i7",[["^ ","^1F",127,"^1G",336,"^K","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2"]],"^24",[["^ ","^1F",186,"^1G",336,"^K","event-v"]],"^21",[["^ ","^1F",194,"^1G",336,"^K","interceptors"]]],"~i198",["^ ","~i6",[["^ ","^1F",86,"^1G",336],["^ ","^1F",208,"^1G",336]],"~i7",[["^ ","^1F",86,"^1G",336,"^K","re-frame.interceptor/invoke-interceptors"]]],"~i199",["^ ","~i6",[["^ ","^1F",48,"^1G",336,"^K","re-frame.interceptor/change-direction"]]],"~i200",["^ ","~i6",[["^ ","^1F",0,"^1G",336],["^ ","^1F",48,"^1G",336],["^ ","^1F",268,"^1G",336]],"~i7",[["^ ","^1F",7,"^1G",336,"^K","re-frame.interceptor/invoke-interceptors"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1535834828000,1535834828000,0,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1>","reagent/impl/batching.cljs"],[1535847022000,"^X","^W","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"],["^1>","goog/dom/tagname.js"],[1505449243000,"^X","~$goog.dom.HtmlElement"],["^3N","node_modules/fbjs/lib/camelize.js"],[1535834828000,1535834828000,1506381453000,"^3O"],["~:macro","^W"],[1535834828000],["^1>","goog/math/math.js"],[1505449243000,"^X","~$goog.array","~$goog.asserts"],["^1>","goog/labs/useragent/browser.js"],[1505449243000,"^X","^3X","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1>","re_frame/loggers.cljc"],[1535834828000,"^X","^W","^U"],["^3W","^3R"],[1535847022000],["^1>","goog/array/array.js"],[1505449243000,"^X","^3Y"],["^3N","node_modules/prop-types/checkPropTypes.js"],[1535834828000,1535834828000,1519255688000,"^3O","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1>","reagent/impl/util.cljs"],[1535847022000,"^X","^W","^3R","^3S","^3U"],["^3W","~$net.cgrand.macrovich"],[1511234491000],["^3N","node_modules/fbjs/lib/emptyFunction.js"],[1535834828000,1535834828000,1506381453000,"^3O"],["^1>","goog/debug/error.js"],[1505449243000,"^X"],["^3N","node_modules/fbjs/lib/emptyObject.js"],[1535834828000,1535834828000,1506381454000,"^3O"],["^1>","goog/dom/nodetype.js"],[1505449243000,"^X"],["^3N","node_modules/fbjs/lib/shallowEqual.js"],[1535834828000,1535834828000,1506381454000,"^3O"],["^3W","~$reagent.core"],[1535847022000],["^1>","reagent/ratom.cljs"],[1535847022000,"^X","^W","^3T","^3R","~$reagent.impl.batching","^U"],["^1>","re_frame/interop.cljs"],[1535834828000,"^X","^W","~$goog.async.nextTick","^45","~$reagent.ratom"],["^3N","node_modules/fbjs/lib/hyphenate.js"],[1535834828000,1535834828000,1506381454000,"^3O"],["^3N","node_modules/create-react-class/factory.js"],[1535834828000,1535834828000,1517346959000,"^3O","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","^41","^42"],["^3N","node_modules/react/index.js"],[1535834828000,1535834828000,0,"^3O","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1>","shadow/js.js"],[1535834828000,"^X"],["^1>","goog/object/object.js"],[1505449243000,"^X"],["^1>","reagent/impl/template.cljs"],[1535847022000,"^X","^W","^=","^3U","~$clojure.walk","^3T","~$reagent.impl.component","^46","^48","^3S","^3R"],["^3N","node_modules/react-dom/cjs/react-dom.production.min.js"],[1535834828000,1535834828000,0,"^3O","^41","^=","~$module$node_modules$fbjs$lib$ExecutionEnvironment","^49","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$fbjs$lib$getActiveElement","~$module$node_modules$fbjs$lib$shallowEqual","~$module$node_modules$fbjs$lib$containsNode","^4:"],"~:SHADOW-TIMESTAMP",[1535834828000,1535834828000],["^3N","node_modules/react/cjs/react.development.js"],[1535834828000,1535834828000,0,"^3O","^49","^41","^4:","^42","^4@","~$module$node_modules$prop_types$checkPropTypes"],["^3W","^48"],[1535847022000],["^3N","node_modules/fbjs/lib/isNode.js"],[1535834828000,1535834828000,1506381456000,"^3O"],["^1>","goog/math/long.js"],[1505449243000,"^X","^3Y","~$goog.reflect"],["^3W","^3S"],[1535847022000],["^3N","node_modules/fbjs/lib/warning.js"],[1535834828000,1535834828000,1506381455000,"^3O","^4@"],["^1>","goog/functions/functions.js"],[1505449243000,"^X"],["^1>","reagent/impl/component.cljs"],[1535847022000,"^X","^W","^?","^=","^3T","^46","^48","^3S","^3R"],["^1>","clojure/walk.cljs"],[1535834828000,"^X","^W"],["^1>","goog/structs/map.js"],[1505449243000,"^X","~$goog.iter.Iterator","~$goog.iter.StopIteration","^3["],["^1>","goog/labs/useragent/engine.js"],[1505449243000,"^X","^3X","^3Z","^40"],["^1>","goog/asserts/asserts.js"],[1505449243000,"^X","~$goog.debug.Error","~$goog.dom.NodeType","^40"],["^1>","goog/uri/uri.js"],[1505449243000,"^X","^3X","^3Y","^40","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^3N","node_modules/object-assign/index.js"],[1535834828000,1535834828000,1484580833000,"^3O"],["^3N","node_modules/fbjs/lib/containsNode.js"],[1535834828000,1535834828000,1506381456000,"^3O","~$module$node_modules$fbjs$lib$isTextNode"],["^3N","node_modules/fbjs/lib/hyphenateStyleName.js"],[1535834828000,1535834828000,1506381454000,"^3O","~$module$node_modules$fbjs$lib$hyphenate"],["^1>","goog/base.js"],[1505449243000],["^1>","goog/structs/structs.js"],[1505449243000,"^X","^3X","^3["],["^1>","clojure/string.cljs"],[1535834828000,"^X","^W","^40","~$goog.string.StringBuffer"],["^3N","node_modules/fbjs/lib/ExecutionEnvironment.js"],[1535834828000,1535834828000,1506381453000,"^3O"],["^3N","node_modules/create-react-class/index.js"],[1535834828000,1535834828000,1517346956000,"^3O","^=","~$module$node_modules$create_react_class$factory"],["^3N","node_modules/react/cjs/react.production.min.js"],[1535834828000,1535834828000,0,"^3O","^49","^41","^4:","^4@"],["^1>","goog/debug/entrypointregistry.js"],[1505449243000,"^X","^3Y"],["^1>","goog/string/string.js"],[1505449243000,"^X"],["^1>","re_frame/interceptor.cljc"],[1535834828000,"^X","^W","^Q","^R","^S","^U"],["^1>","goog/reflect/reflect.js"],[1505449243000,"^X"],["^1>","goog/labs/useragent/util.js"],[1505449243000,"^X","^40"],["^1>","reagent/core.cljs"],[1535847022000,"^X","^W","^=","~$reagent.impl.template","^4>","^3T","^46","^48","^3R","^3S","~$reagent.dom"],["^1>","goog/string/stringbuffer.js"],[1505449243000,"^X"],["^1>","goog/iter/iter.js"],[1505449243000,"^X","^3X","^3Y","~$goog.functions","~$goog.math"],["^1>","goog/async/nexttick.js"],[1505449243000,"^X","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^4V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^3N","node_modules/fbjs/lib/getActiveElement.js"],[1535834828000,1535834828000,1506381456000,"^3O"],["^1>","reagent/dom.cljs"],[1535847022000,"^X","^W","^A","^3T","^4T","^46","^48","^3R","^3S"],["^3N","node_modules/fbjs/lib/camelizeStyleName.js"],[1535834828000,1535834828000,1506381453000,"^3O","~$module$node_modules$fbjs$lib$camelize"],["^3N","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1535834828000,1535834828000,1519255688000,"^3O"],["^1>","reagent/interop.cljs"],[1535847022000,"^X","^W"],["^1>","goog/dom/htmlelement.js"],[1505449243000,"^X"],["^1>","cljs/core.cljs"],[1535834828000,"~$goog.math.Long","~$goog.math.Integer","^40","^3[","^3X","~$goog.Uri","^4R"],["^1>","reagent/debug.cljs"],[1535847022000,"^X","^W"],["^3W","^S"],[1535834828000],["^1>","goog/math/integer.js"],[1505449243000,"^X"],["^3N","node_modules/react-dom/cjs/react-dom.development.js"],[1535834828000,1535834828000,0,"^3O","^41","^=","^42","^4?","^49","^4@","^4E","^4A","^4B","^4C","^4:","~$module$node_modules$fbjs$lib$hyphenateStyleName","~$module$node_modules$fbjs$lib$camelizeStyleName"],["^1>","clojure/set.cljs"],[1535834828000,"^X","^W"],["^1>","goog/uri/utils.js"],[1505449243000,"^X","^3X","^3Y","^40"],["^3N","node_modules/fbjs/lib/isTextNode.js"],[1535834828000,1535834828000,1506381456000,"^3O","~$module$node_modules$fbjs$lib$isNode"],["^3N","node_modules/fbjs/lib/invariant.js"],[1535834828000,1535834828000,1506381455000,"^3O"],["^1>","re_frame/trace.cljc"],[1535834828000,"^X","^W","^R","^Q","^4V"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^S","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^J",["^Z"]],"~:shadow/js-access-global",["^J",["Error"]],"^[",["^ ","^10","^Q","^11","^R","^12","^R"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",72,"^8",8,"^9",72,"^:",27,"~:private",true,"~:arglists",["^15",["~$quote",["^15",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5<",true,"^K","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^6","re_frame/interceptor.cljc","^:",27,"~:method-params",["^15",[["^5?","^5@"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"^7",72,"^9",72,"~:max-fixed-arity",2,"~:fn-var",true,"^5=",["^15",["^5>",["^15",[["^5?","^5@"]]]]],"^5A","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",54,"^8",7,"^9",54,"^:",21,"^5=",["^15",["^5>",["^15",[["^5?","~$key","~$value"]]]]]],"^K","~$re-frame.interceptor/assoc-coeffect","^5C",false,"^6","re_frame/interceptor.cljc","^:",21,"^5D",["^15",[["^5?","^5J","^5K"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",54,"^9",54,"^5G",3,"^5H",true,"^5=",["^15",["^5>",["^15",[["^5?","^5J","^5K"]]]]]],"~$update-coeffect",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",58,"^8",7,"^9",58,"^:",22,"^5=",["^15",["^5>",["^15",[["^5?","^5J","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^5C",true,"^5G",3,"^5D",[["^15",["^5?","^5J","~$f","^5N"]]],"^5=",["^15",[["^5?","^5J","~$f","~$&","^5N"]]],"^5F",["^15",[null]]]],"^K","~$re-frame.interceptor/update-coeffect","^5C",true,"^6","re_frame/interceptor.cljc","^:",22,"^5O",["^ ","^5C",true,"^5G",3,"^5D",[["^15",["^5?","^5J","~$f","^5N"]]],"^5=",["^15",[["^5?","^5J","~$f","~$&","^5N"]]],"^5F",["^15",[null]]],"^5D",[["^15",["^5?","^5J","~$f","^5N"]]],"^5E",null,"^5F",["^15",[null]],"^8",1,"^7",58,"^9",58,"^5G",3,"^5H",true,"^5=",["^15",[["^5?","^5J","~$f","~$&","^5N"]]]],"~$invoke-interceptor-fn",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",65,"^8",8,"^9",65,"^:",29,"^5<",true,"^5=",["^15",["^5>",["^15",[["^5?","~$interceptor","^5@"]]]]]],"^5<",true,"^K","~$re-frame.interceptor/invoke-interceptor-fn","^5C",false,"^6","re_frame/interceptor.cljc","^:",29,"^5D",["^15",[["^5?","^5R","^5@"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",65,"^9",65,"^5G",3,"^5H",true,"^5=",["^15",["^5>",["^15",[["^5?","^5R","^5@"]]]]]],"~$get-effect",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^5=",["^15",["^5>",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","~$not-found"]]]]],"^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5F",["^15",[null,null,null]]]],"^K","~$re-frame.interceptor/get-effect","^5C",false,"^6","re_frame/interceptor.cljc","^:",17,"^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5F",["^15",[null,null,null]]],"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5E",null,"^5F",["^15",[null,null,null]],"^8",1,"^7",31,"^9",31,"^5G",3,"^5H",true,"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]]],"~$->interceptor",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5=",["^15",["^5>",["^15",[["~$&",["^ ","^18","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5A","Create an interceptor from named arguments","^5O",["^ ","^5C",true,"^5G",0,"^5D",[["^15",[["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5=",["^15",[["~$&",["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5F",["^15",[null]]]],"^K","~$re-frame.interceptor/->interceptor","^5C",true,"^6","re_frame/interceptor.cljc","^:",20,"^5O",["^ ","^5C",true,"^5G",0,"^5D",[["^15",[["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5=",["^15",[["~$&",["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5F",["^15",[null]]],"^5D",[["^15",[["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5E",null,"^5F",["^15",[null]],"^8",1,"^7",17,"^9",17,"^5G",0,"^5H",true,"^5=",["^15",[["~$&",["^ ","^18","~$m","^5X",["^5Y","^5Z","^5["]]]]],"^5A","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",46,"^8",7,"^9",46,"^:",19,"^5=",["^15",["^5>",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]]]],"^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5F",["^15",[null,null,null]]]],"^K","~$re-frame.interceptor/get-coeffect","^5C",false,"^6","re_frame/interceptor.cljc","^:",19,"^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5F",["^15",[null,null,null]]],"^5D",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]],"^5E",null,"^5F",["^15",[null,null,null]],"^8",1,"^7",46,"^9",46,"^5G",3,"^5H",true,"^5=",["^15",[["^5?"],["^5?","^5J"],["^5?","^5J","^5U"]]]],"~$execute",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5=",["^15",["^5>",["^15",[["~$event-v","~$interceptors"]]]]],"^5A","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","~$re-frame.interceptor/execute","^5C",false,"^6","re_frame/interceptor.cljc","^:",14,"^5D",["^15",[["^64","^65"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",146,"^9",146,"^5G",2,"^5H",true,"^5=",["^15",["^5>",["^15",[["^64","^65"]]]]],"^5A","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",40,"^8",7,"^9",40,"^:",19,"^5=",["^15",["^5>",["^15",[["^5?","^5J","^5K"]]]]]],"^K","~$re-frame.interceptor/assoc-effect","^5C",false,"^6","re_frame/interceptor.cljc","^:",19,"^5D",["^15",[["^5?","^5J","^5K"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",40,"^9",40,"^5G",3,"^5H",true,"^5=",["^15",["^5>",["^15",[["^5?","^5J","^5K"]]]]]],"~$enqueue",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",109,"^8",7,"^9",109,"^:",14,"^5=",["^15",["^5>",["^15",[["^5?","^65"]]]]],"^5A","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^K","~$re-frame.interceptor/enqueue","^5C",false,"^6","re_frame/interceptor.cljc","^:",14,"^5D",["^15",[["^5?","^65"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",109,"^9",109,"^5G",2,"^5H",true,"^5=",["^15",["^5>",["^15",[["^5?","^65"]]]]],"^5A","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^K","~$re-frame.interceptor/mandatory-interceptor-keys","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5=",["^15",["^5>",["^15",[["~$m"]]]]]],"^K","~$re-frame.interceptor/interceptor?","^5C",false,"^6","re_frame/interceptor.cljc","^:",19,"^5D",["^15",[["~$m"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",11,"^9",11,"^5G",1,"^5H",true,"^5=",["^15",["^5>",["^15",[["~$m"]]]]]],"~$change-direction",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^5<",true,"^5=",["^15",["^5>",["^15",[["^5?"]]]]],"^5A","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5<",true,"^K","~$re-frame.interceptor/change-direction","^5C",false,"^6","re_frame/interceptor.cljc","^:",24,"^5D",["^15",[["^5?"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",132,"^9",132,"^5G",1,"^5H",true,"^5=",["^15",["^5>",["^15",[["^5?"]]]]],"^5A","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5?",["^ ","^5;",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",121,"^8",8,"^9",121,"^:",15,"^5<",true,"^5=",["^15",["^5>",["^15",[["~$event","^65"],["^6C","^65","~$db"]]]]],"^5A","Create a fresh context","^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5=",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5F",["^15",[null,null]]]],"^5<",true,"^K","~$re-frame.interceptor/context","^5C",false,"^6","re_frame/interceptor.cljc","^:",15,"^5O",["^ ","^5C",false,"^5G",3,"^5D",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5=",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5F",["^15",[null,null]]],"^5D",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5E",null,"^5F",["^15",[null,null]],"^8",1,"^7",121,"^9",121,"^5G",3,"^5H",true,"^5=",["^15",[["^6C","^65"],["^6C","^65","^6D"]]],"^5A","Create a fresh context"]],"^13",["^ ","^S","^S","^T","^S","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^J",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6L","^6M","^6S","^6P","^6G","^6N","^6Q","^6J","^6O","^6K","^6I","^6H","^6R"]],"^1:",["^ ","^Z",["^J",[]]],"^1;",["^ "],"^1<",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^3M",[["^6W","~:static-fns"],true,["^6W","~:elide-asserts"],true,["^6W","~:optimize-constants"],null,["^6W","~:external-config"],null,["^6W","~:tooling-config"],null,["^6W","~:emit-constants"],null,["^6W","~:infer-externs"],true,["^6W","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^6W","~:fn-invoke-direct"],null,["^6W","^1E"],null]]]
["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\nre_frame.core.dispatch = re_frame.router.dispatch;\nre_frame.core.dispatch_sync = re_frame.router.dispatch_sync;\nre_frame.core.reg_sub = re_frame.subs.reg_sub;\nre_frame.core.subscribe = re_frame.subs.subscribe;\nre_frame.core.clear_sub = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.subs.kind);\nre_frame.core.clear_subscription_cache_BANG_ = re_frame.subs.clear_subscription_cache_BANG_;\n/**\n * This is a low level, advanced function.  You should probably be\n *   using reg-sub instead.\n *   Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\n */\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\n});\nre_frame.core.reg_fx = re_frame.fx.reg_fx;\nre_frame.core.clear_fx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.fx.kind);\nre_frame.core.reg_cofx = re_frame.cofx.reg_cofx;\nre_frame.core.inject_cofx = re_frame.cofx.inject_cofx;\nre_frame.core.clear_cofx = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.cofx.kind);\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (db event) -> db\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of this\n * chain.\n */\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\nvar G__27815 = arguments.length;\nswitch (G__27815) {\ncase 2:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of the\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\n * and, later, action effects.\n */\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\nvar G__27820 = arguments.length;\nswitch (G__27820) {\ncase 2:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (context-map event-vector) -> context-map\n * \n *   This form of registration is almost never used. \n */\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\nvar G__27833 = arguments.length;\nswitch (G__27833) {\ncase 2:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3;\n\nre_frame.core.clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nre_frame.core.debug = re_frame.std_interceptors.debug;\nre_frame.core.path = re_frame.std_interceptors.path;\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\nre_frame.core.after = re_frame.std_interceptors.after;\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\nre_frame.core.__GT_interceptor = re_frame.interceptor.__GT_interceptor;\nre_frame.core.get_coeffect = re_frame.interceptor.get_coeffect;\nre_frame.core.assoc_coeffect = re_frame.interceptor.assoc_coeffect;\nre_frame.core.get_effect = re_frame.interceptor.get_effect;\nre_frame.core.assoc_effect = re_frame.interceptor.assoc_effect;\nre_frame.core.enqueue = re_frame.interceptor.enqueue;\nre_frame.core.set_loggers_BANG_ = re_frame.loggers.set_loggers_BANG_;\nre_frame.core.console = re_frame.loggers.console;\n/**\n * Checkpoints the state of re-frame and returns a function which, when\n *   later called, will restore re-frame to that checkpointed state.\n * \n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\n *   \n */\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\nreturn ((function (handlers,app_db,subs_cache){\nreturn (function (){\nvar original_subs_27852 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_27853 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\nvar seq__27846_27854 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_27853,original_subs_27852));\nvar chunk__27847_27855 = null;\nvar count__27848_27856 = (0);\nvar i__27849_27857 = (0);\nwhile(true){\nif((i__27849_27857 < count__27848_27856)){\nvar sub_27858 = chunk__27847_27855.cljs$core$IIndexed$_nth$arity$2(null,i__27849_27857);\nre_frame.interop.dispose_BANG_(sub_27858);\n\n\nvar G__27859 = seq__27846_27854;\nvar G__27860 = chunk__27847_27855;\nvar G__27861 = count__27848_27856;\nvar G__27862 = (i__27849_27857 + (1));\nseq__27846_27854 = G__27859;\nchunk__27847_27855 = G__27860;\ncount__27848_27856 = G__27861;\ni__27849_27857 = G__27862;\ncontinue;\n} else {\nvar temp__5457__auto___27863 = cljs.core.seq(seq__27846_27854);\nif(temp__5457__auto___27863){\nvar seq__27846_27864__$1 = temp__5457__auto___27863;\nif(cljs.core.chunked_seq_QMARK_(seq__27846_27864__$1)){\nvar c__4319__auto___27865 = cljs.core.chunk_first(seq__27846_27864__$1);\nvar G__27866 = cljs.core.chunk_rest(seq__27846_27864__$1);\nvar G__27867 = c__4319__auto___27865;\nvar G__27868 = cljs.core.count(c__4319__auto___27865);\nvar G__27869 = (0);\nseq__27846_27854 = G__27866;\nchunk__27847_27855 = G__27867;\ncount__27848_27856 = G__27868;\ni__27849_27857 = G__27869;\ncontinue;\n} else {\nvar sub_27870 = cljs.core.first(seq__27846_27864__$1);\nre_frame.interop.dispose_BANG_(sub_27870);\n\n\nvar G__27871 = cljs.core.next(seq__27846_27864__$1);\nvar G__27872 = null;\nvar G__27873 = (0);\nvar G__27874 = (0);\nseq__27846_27854 = G__27871;\nchunk__27847_27855 = G__27872;\ncount__27848_27856 = G__27873;\ni__27849_27857 = G__27874;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\n\nreturn null;\n});\n;})(handlers,app_db,subs_cache))\n});\n/**\n * Remove all events queued for processing\n */\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\nreturn re_frame.router.purge(re_frame.router.event_queue);\n});\n/**\n * Registers a function `f` to be called after each event is processed\n * `f` will be called with two arguments:\n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This is useful in advanced cases like:\n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n *   be used at \"remove time\" to get rid of the right callback.\n *   \n */\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\nvar G__27887 = arguments.length;\nswitch (G__27887) {\ncase 1:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn re_frame.router.add_post_event_callback(re_frame.router.event_queue,id,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2;\n\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\nreturn re_frame.router.remove_post_event_callback(re_frame.router.event_queue,id);\n});\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___27895 = arguments.length;\nvar i__4500__auto___27896 = (0);\nwhile(true){\nif((i__4500__auto___27896 < len__4499__auto___27895)){\nargs__4502__auto__.push((arguments[i__4500__auto___27896]));\n\nvar G__27897 = (i__4500__auto___27896 + (1));\ni__4500__auto___27896 = G__27897;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((0) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4503__auto__);\n});\n\nre_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__27891_27898 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__27892_27899 = \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\";\nvar G__27893_27900 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args))].join('');\nvar G__27894_27901 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__27891_27898,G__27892_27899,G__27893_27900,G__27894_27901) : re_frame.core.console.call(null,G__27891_27898,G__27892_27899,G__27893_27900,G__27894_27901));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\n});\n\nre_frame.core.register_handler.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_handler.cljs$lang$applyTo = (function (seq27889){\nvar self__4487__auto__ = this;\nreturn self__4487__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq27889));\n});\n\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\nvar args__4502__auto__ = [];\nvar len__4499__auto___27914 = arguments.length;\nvar i__4500__auto___27915 = (0);\nwhile(true){\nif((i__4500__auto___27915 < len__4499__auto___27914)){\nargs__4502__auto__.push((arguments[i__4500__auto___27915]));\n\nvar G__27916 = (i__4500__auto___27915 + (1));\ni__4500__auto___27915 = G__27916;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4503__auto__ = ((((0) < args__4502__auto__.length))?(new cljs.core.IndexedSeq(args__4502__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4503__auto__);\n});\n\nre_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar G__27907_27918 = new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552);\nvar G__27908_27919 = \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\";\nvar G__27909_27920 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args))].join('');\nvar G__27910_27921 = \")\";\n(re_frame.core.console.cljs$core$IFn$_invoke$arity$4 ? re_frame.core.console.cljs$core$IFn$_invoke$arity$4(G__27907_27918,G__27908_27919,G__27909_27920,G__27910_27921) : re_frame.core.console.call(null,G__27907_27918,G__27908_27919,G__27909_27920,G__27910_27921));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\n});\n\nre_frame.core.register_sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_sub.cljs$lang$applyTo = (function (seq27905){\nvar self__4487__auto__ = this;\nreturn self__4487__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq27905));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^Q","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^X","~$fx","~$re-frame.fx","~$re-frame.events","^[","~$loggers","~$re-frame.loggers","^Z","^Z","~$re-frame.registrar","^12","~$cljs.core","^13","~$interceptor","^X","~$goog","^15","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^12","^17","^17","^U","^U","~$events","^[","~$re-frame.std-interceptors","^1<","^11","^11","^S","^S","~$interop","^Q","~$std-interceptors","^1<","^W","^W","^19","^19"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^1<","~$fx-handler->interceptor","^1<","~$ctx-handler->interceptor","^1<"],"~:require-macros",["^ ","^13","^13"],"~:form",["~#list",["~$ns","^L",["^1G",["^1@",["^[","~:as","^1;"],["^S","^1I","^R"],["^Q","^1I","^1="],["^19","^1I","^18"],["^Z","^1I","^Y"],["^W","^1I","^V"],["^17","^1I","^16"],["^11","^1I","^10"],["^12","^1I","^1:"],["^X","^1I","^14"],["^1<","^1I","^1>","~:refer",["^1B","^1C","^1D"]],["^U","^1I","^T"]]]]],"~:flags",["^ ","^1@",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^15","^13","^[","^S","^Q","^19","^Z","^W","^17","^11","^12","^X","^1<","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1535913523743,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^J",["~:cljs"]],"~:source-map",["^ ","~i39",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",1]],"~i5",[["^ ","^1X",0,"^1Y",1,"^K","re-frame.core/dispatch"]],"~i20",[["^ ","^1X",25,"^1Y",1,"^K","re-frame.router/dispatch"]]],"~i40",["^ ","~i0",[["^ ","^1X",0,"^1Y",2]],"~i5",[["^ ","^1X",0,"^1Y",2,"^K","re-frame.core/dispatch-sync"]],"^1Z",[["^ ","^1X",30,"^1Y",2,"^K","re-frame.router/dispatch-sync"]]],"~i44",["^ ","~i0",[["^ ","^1X",0,"^1Y",3]],"~i5",[["^ ","^1X",0,"^1Y",3,"^K","re-frame.core/reg-sub"]],"^1Z",[["^ ","^1X",24,"^1Y",3,"^K","re-frame.subs/reg-sub"]]],"~i45",["^ ","~i0",[["^ ","^1X",0,"^1Y",4]],"~i5",[["^ ","^1X",0,"^1Y",4,"^K","re-frame.core/subscribe"]],"^1Z",[["^ ","^1X",26,"^1Y",4,"^K","re-frame.subs/subscribe"]]],"~i47",["^ ","~i0",[["^ ","^1X",0,"^1Y",5]],"~i5",[["^ ","^1X",0,"^1Y",5,"^K","re-frame.core/clear-sub"]],"~i15",[["^ ","^1X",26,"^1Y",5]],"~i16",[["^ ","^1X",26,"^1Y",5,"^K","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i24",[["^ ","^1X",74,"^1Y",5,"^K","re-frame.registrar/clear-handlers"]],"~i49",[["^ ","^1X",108,"^1Y",5,"^K","re-frame.subs/kind"]]],"~i48",["^ ","~i0",[["^ ","^1X",0,"^1Y",6]],"~i5",[["^ ","^1X",0,"^1Y",6,"^K","re-frame.core/clear-subscription-cache!"]],"~i31",[["^ ","^1X",47,"^1Y",6,"^K","re-frame.subs/clear-subscription-cache!"]]],"~i50",["^ ","~i0",[["^ ","^1X",0,"^1Y",7],["^ ","^1X",28,"^1Y",12],["^ ","^1X",0,"^1Y",13]],"~i6",[["^ ","^1X",0,"^1Y",12,"^K","re-frame.core/reg-sub-raw"]]],"~i54",["^ ","~i3",[["^ ","^1X",64,"^1Y",12,"^K","query-id"]],"~i12",[["^ ","^1X",73,"^1Y",12,"^K","handler-fn"]]],"~i55",["^ ","~i2",[["^ ","^1X",0,"^1Y",13]],"~i3",[["^ ","^1X",7,"^1Y",13,"^K","re-frame.registrar/register-handler"]],"~i30",[["^ ","^1X",43,"^1Y",13,"^K","re-frame.subs/kind"]],"^1[",[["^ ","^1X",62,"^1Y",13,"^K","query-id"]],"^26",[["^ ","^1X",71,"^1Y",13,"^K","handler-fn"]]],"~i59",["^ ","~i0",[["^ ","^1X",0,"^1Y",15]],"~i5",[["^ ","^1X",0,"^1Y",15,"^K","re-frame.core/reg-fx"]],"~i17",[["^ ","^1X",23,"^1Y",15,"^K","re-frame.fx/reg-fx"]]],"~i60",["^ ","~i0",[["^ ","^1X",0,"^1Y",16]],"~i5",[["^ ","^1X",0,"^1Y",16,"^K","re-frame.core/clear-fx"]],"^2?",[["^ ","^1X",25,"^1Y",16]],"~i18",[["^ ","^1X",25,"^1Y",16,"^K","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i26",[["^ ","^1X",73,"^1Y",16,"^K","re-frame.registrar/clear-handlers"]],"~i51",[["^ ","^1X",107,"^1Y",16,"^K","re-frame.fx/kind"]]],"~i63",["^ ","~i0",[["^ ","^1X",0,"^1Y",17]],"~i5",[["^ ","^1X",0,"^1Y",17,"^K","re-frame.core/reg-cofx"]],"^2?",[["^ ","^1X",25,"^1Y",17,"^K","re-frame.cofx/reg-cofx"]]],"~i64",["^ ","~i0",[["^ ","^1X",0,"^1Y",18]],"~i5",[["^ ","^1X",0,"^1Y",18,"^K","re-frame.core/inject-cofx"]],"^2?",[["^ ","^1X",28,"^1Y",18,"^K","re-frame.cofx/inject-cofx"]]],"~i65",["^ ","~i0",[["^ ","^1X",0,"^1Y",19]],"~i5",[["^ ","^1X",0,"^1Y",19,"^K","re-frame.core/clear-cofx"]],"^24",[["^ ","^1X",27,"^1Y",19]],"^2?",[["^ ","^1X",27,"^1Y",19,"^K","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"~i25",[["^ ","^1X",75,"^1Y",19,"^K","re-frame.registrar/clear-handlers"]],"^29",[["^ ","^1X",109,"^1Y",19,"^K","re-frame.cofx/kind"]]],"~i70",["^ ","~i0",[["^ ","^1X",0,"^1Y",20],["^ ","^1X",0,"^1Y",20],["^ ","^1X",29,"^1Y",31],["^ ","^1X",66,"^1Y",31,"^K","var_args"],["^ ","^1X",0,"^1Y",32],["^ ","^1X",0,"^1Y",32],["^ ","^1X",4,"^1Y",32,"^K","G__27815"],["^ ","^1X",15,"^1Y",32],["^ ","^1X",15,"^1Y",32],["^ ","^1X",0,"^1Y",33],["^ ","^1X",0,"^1Y",33],["^ ","^1X",8,"^1Y",33,"^K","G__27815"],["^ ","^1X",5,"^1Y",34],["^ ","^1X",0,"^1Y",35],["^ ","^1X",7,"^1Y",35,"^K","re-frame.core/reg-event-db"],["^ ","^1X",64,"^1Y",35],["^ ","^1X",65,"^1Y",35],["^ ","^1X",75,"^1Y",35],["^ ","^1X",81,"^1Y",35],["^ ","^1X",82,"^1Y",35],["^ ","^1X",92,"^1Y",35],["^ ","^1X",5,"^1Y",38],["^ ","^1X",0,"^1Y",39],["^ ","^1X",7,"^1Y",39,"^K","re-frame.core/reg-event-db"],["^ ","^1X",64,"^1Y",39],["^ ","^1X",65,"^1Y",39],["^ ","^1X",75,"^1Y",39],["^ ","^1X",81,"^1Y",39],["^ ","^1X",82,"^1Y",39],["^ ","^1X",92,"^1Y",39],["^ ","^1X",98,"^1Y",39],["^ ","^1X",99,"^1Y",39],["^ ","^1X",109,"^1Y",39],["^ ","^1X",0,"^1Y",43],["^ ","^1X",6,"^1Y",43],["^ ","^1X",11,"^1Y",43,"^K","js/Error"],["^ ","^1X",17,"^1Y",43],["^ ","^1X",18,"^1Y",43],["^ ","^1X",80,"^1Y",43],["^ ","^1X",80,"^1Y",43],["^ ","^1X",0,"^1Y",48],["^ ","^1X",0,"^1Y",48],["^ ","^1X",59,"^1Y",48],["^ ","^1X",0,"^1Y",49],["^ ","^1X",0,"^1Y",52],["^ ","^1X",0,"^1Y",52],["^ ","^1X",59,"^1Y",52],["^ ","^1X",0,"^1Y",53],["^ ","^1X",0,"^1Y",56],["^ ","^1X",0,"^1Y",56],["^ ","^1X",53,"^1Y",56],["^ ","^1X",0,"^1Y",58]],"~i6",[["^ ","^1X",0,"^1Y",31,"^K","re-frame.core/reg-event-db"],["^ ","^1X",0,"^1Y",48,"^K","re-frame.core/reg-event-db"],["^ ","^1X",0,"^1Y",52,"^K","re-frame.core/reg-event-db"],["^ ","^1X",0,"^1Y",56,"^K","re-frame.core/reg-event-db"]]],"~i80",["^ ","~i4",[["^ ","^1X",70,"^1Y",48,"^K","id"]],"~i7",[["^ ","^1X",73,"^1Y",48,"^K","handler"]]],"~i81",["^ ","~i4",[["^ ","^1X",0,"^1Y",49],["^ ","^1X",67,"^1Y",49]],"~i5",[["^ ","^1X",7,"^1Y",49,"^K","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3"]],"^2A",[["^ ","^1X",64,"^1Y",49,"^K","id"]],"^2G",[["^ ","^1X",72,"^1Y",49,"^K","handler"]]],"~i82",["^ ","~i4",[["^ ","^1X",70,"^1Y",52,"^K","id"]],"~i7",[["^ ","^1X",73,"^1Y",52,"^K","interceptors"]],"^1Z",[["^ ","^1X",86,"^1Y",52,"^K","handler"]]],"~i83",["^ ","~i3",[["^ ","^1X",0,"^1Y",53],["^ ","^1X",35,"^1Y",53]],"~i4",[["^ ","^1X",7,"^1Y",53,"^K","re-frame.events/register"]],"^1Z",[["^ ","^1X",32,"^1Y",53,"^K","id"]],"^25",[["^ ","^1X",118,"^1Y",53,"^K","re-frame.cofx/inject-db"]],"^1W",[["^ ","^1X",142,"^1Y",53,"^K","re-frame.fx/do-fx"]],"^27",[["^ ","^1X",160,"^1Y",53,"^K","interceptors"]],"~i61",[["^ ","^1X",173,"^1Y",53]],"~i62",[["^ ","^1X",173,"^1Y",53,"^K","re-frame.std-interceptors/db-handler->interceptor"]],"~i86",[["^ ","^1X",226,"^1Y",53,"^K","handler"]]],"^2O",["^ ","~i0",[["^ ","^1X",0,"^1Y",58],["^ ","^1X",0,"^1Y",58],["^ ","^1X",29,"^1Y",70],["^ ","^1X",66,"^1Y",70,"^K","var_args"],["^ ","^1X",0,"^1Y",71],["^ ","^1X",0,"^1Y",71],["^ ","^1X",4,"^1Y",71,"^K","G__27820"],["^ ","^1X",15,"^1Y",71],["^ ","^1X",15,"^1Y",71],["^ ","^1X",0,"^1Y",72],["^ ","^1X",0,"^1Y",72],["^ ","^1X",8,"^1Y",72,"^K","G__27820"],["^ ","^1X",5,"^1Y",73],["^ ","^1X",0,"^1Y",74],["^ ","^1X",7,"^1Y",74,"^K","re-frame.core/reg-event-fx"],["^ ","^1X",64,"^1Y",74],["^ ","^1X",65,"^1Y",74],["^ ","^1X",75,"^1Y",74],["^ ","^1X",81,"^1Y",74],["^ ","^1X",82,"^1Y",74],["^ ","^1X",92,"^1Y",74],["^ ","^1X",5,"^1Y",77],["^ ","^1X",0,"^1Y",78],["^ ","^1X",7,"^1Y",78,"^K","re-frame.core/reg-event-fx"],["^ ","^1X",64,"^1Y",78],["^ ","^1X",65,"^1Y",78],["^ ","^1X",75,"^1Y",78],["^ ","^1X",81,"^1Y",78],["^ ","^1X",82,"^1Y",78],["^ ","^1X",92,"^1Y",78],["^ ","^1X",98,"^1Y",78],["^ ","^1X",99,"^1Y",78],["^ ","^1X",109,"^1Y",78],["^ ","^1X",0,"^1Y",82],["^ ","^1X",6,"^1Y",82],["^ ","^1X",11,"^1Y",82,"^K","js/Error"],["^ ","^1X",17,"^1Y",82],["^ ","^1X",18,"^1Y",82],["^ ","^1X",80,"^1Y",82],["^ ","^1X",80,"^1Y",82],["^ ","^1X",0,"^1Y",87],["^ ","^1X",0,"^1Y",87],["^ ","^1X",59,"^1Y",87],["^ ","^1X",0,"^1Y",88],["^ ","^1X",0,"^1Y",91],["^ ","^1X",0,"^1Y",91],["^ ","^1X",59,"^1Y",91],["^ ","^1X",0,"^1Y",92],["^ ","^1X",0,"^1Y",95],["^ ","^1X",0,"^1Y",95],["^ ","^1X",53,"^1Y",95],["^ ","^1X",0,"^1Y",97]],"~i6",[["^ ","^1X",0,"^1Y",70,"^K","re-frame.core/reg-event-fx"],["^ ","^1X",0,"^1Y",87,"^K","re-frame.core/reg-event-fx"],["^ ","^1X",0,"^1Y",91,"^K","re-frame.core/reg-event-fx"],["^ ","^1X",0,"^1Y",95,"^K","re-frame.core/reg-event-fx"]]],"~i97",["^ ","~i4",[["^ ","^1X",70,"^1Y",87,"^K","id"]],"~i7",[["^ ","^1X",73,"^1Y",87,"^K","handler"]]],"~i98",["^ ","~i3",[["^ ","^1X",0,"^1Y",88],["^ ","^1X",67,"^1Y",88]],"~i4",[["^ ","^1X",7,"^1Y",88,"^K","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3"]],"^2?",[["^ ","^1X",64,"^1Y",88,"^K","id"]],"^25",[["^ ","^1X",72,"^1Y",88,"^K","handler"]]],"~i99",["^ ","~i4",[["^ ","^1X",70,"^1Y",91,"^K","id"]],"~i7",[["^ ","^1X",73,"^1Y",91,"^K","interceptors"]],"^1Z",[["^ ","^1X",86,"^1Y",91,"^K","handler"]]],"~i100",["^ ","~i3",[["^ ","^1X",0,"^1Y",92],["^ ","^1X",35,"^1Y",92]],"~i4",[["^ ","^1X",7,"^1Y",92,"^K","re-frame.events/register"]],"^1Z",[["^ ","^1X",32,"^1Y",92,"^K","id"]],"^25",[["^ ","^1X",118,"^1Y",92,"^K","re-frame.cofx/inject-db"]],"^1W",[["^ ","^1X",142,"^1Y",92,"^K","re-frame.fx/do-fx"]],"^27",[["^ ","^1X",160,"^1Y",92,"^K","interceptors"]],"^2M",[["^ ","^1X",173,"^1Y",92]],"^2N",[["^ ","^1X",173,"^1Y",92,"^K","re-frame.std-interceptors/fx-handler->interceptor"]],"^2O",[["^ ","^1X",226,"^1Y",92,"^K","handler"]]],"~i103",["^ ","~i0",[["^ ","^1X",0,"^1Y",97],["^ ","^1X",0,"^1Y",97],["^ ","^1X",30,"^1Y",105],["^ ","^1X",68,"^1Y",105,"^K","var_args"],["^ ","^1X",0,"^1Y",106],["^ ","^1X",0,"^1Y",106],["^ ","^1X",4,"^1Y",106,"^K","G__27833"],["^ ","^1X",15,"^1Y",106],["^ ","^1X",15,"^1Y",106],["^ ","^1X",0,"^1Y",107],["^ ","^1X",0,"^1Y",107],["^ ","^1X",8,"^1Y",107,"^K","G__27833"],["^ ","^1X",5,"^1Y",108],["^ ","^1X",0,"^1Y",109],["^ ","^1X",7,"^1Y",109,"^K","re-frame.core/reg-event-ctx"],["^ ","^1X",65,"^1Y",109],["^ ","^1X",66,"^1Y",109],["^ ","^1X",76,"^1Y",109],["^ ","^1X",82,"^1Y",109],["^ ","^1X",83,"^1Y",109],["^ ","^1X",93,"^1Y",109],["^ ","^1X",5,"^1Y",112],["^ ","^1X",0,"^1Y",113],["^ ","^1X",7,"^1Y",113,"^K","re-frame.core/reg-event-ctx"],["^ ","^1X",65,"^1Y",113],["^ ","^1X",66,"^1Y",113],["^ ","^1X",76,"^1Y",113],["^ ","^1X",82,"^1Y",113],["^ ","^1X",83,"^1Y",113],["^ ","^1X",93,"^1Y",113],["^ ","^1X",99,"^1Y",113],["^ ","^1X",100,"^1Y",113],["^ ","^1X",110,"^1Y",113],["^ ","^1X",0,"^1Y",117],["^ ","^1X",6,"^1Y",117],["^ ","^1X",11,"^1Y",117,"^K","js/Error"],["^ ","^1X",17,"^1Y",117],["^ ","^1X",18,"^1Y",117],["^ ","^1X",80,"^1Y",117],["^ ","^1X",80,"^1Y",117],["^ ","^1X",0,"^1Y",122],["^ ","^1X",0,"^1Y",122],["^ ","^1X",60,"^1Y",122],["^ ","^1X",0,"^1Y",123],["^ ","^1X",0,"^1Y",126],["^ ","^1X",0,"^1Y",126],["^ ","^1X",60,"^1Y",126],["^ ","^1X",0,"^1Y",127],["^ ","^1X",0,"^1Y",130],["^ ","^1X",0,"^1Y",130],["^ ","^1X",54,"^1Y",130],["^ ","^1X",0,"^1Y",132]],"~i6",[["^ ","^1X",0,"^1Y",105,"^K","re-frame.core/reg-event-ctx"],["^ ","^1X",0,"^1Y",122,"^K","re-frame.core/reg-event-ctx"],["^ ","^1X",0,"^1Y",126,"^K","re-frame.core/reg-event-ctx"],["^ ","^1X",0,"^1Y",130,"^K","re-frame.core/reg-event-ctx"]]],"~i110",["^ ","~i4",[["^ ","^1X",71,"^1Y",122,"^K","id"]],"~i7",[["^ ","^1X",74,"^1Y",122,"^K","handler"]]],"~i111",["^ ","~i3",[["^ ","^1X",0,"^1Y",123],["^ ","^1X",68,"^1Y",123]],"~i4",[["^ ","^1X",7,"^1Y",123,"^K","re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3"]],"^2A",[["^ ","^1X",65,"^1Y",123,"^K","id"]],"^2G",[["^ ","^1X",73,"^1Y",123,"^K","handler"]]],"~i112",["^ ","~i4",[["^ ","^1X",71,"^1Y",126,"^K","id"]],"~i7",[["^ ","^1X",74,"^1Y",126,"^K","interceptors"]],"^1Z",[["^ ","^1X",87,"^1Y",126,"^K","handler"]]],"~i113",["^ ","~i3",[["^ ","^1X",0,"^1Y",127],["^ ","^1X",35,"^1Y",127]],"~i4",[["^ ","^1X",7,"^1Y",127,"^K","re-frame.events/register"]],"^1Z",[["^ ","^1X",32,"^1Y",127,"^K","id"]],"^25",[["^ ","^1X",118,"^1Y",127,"^K","re-frame.cofx/inject-db"]],"^1W",[["^ ","^1X",142,"^1Y",127,"^K","re-frame.fx/do-fx"]],"^27",[["^ ","^1X",160,"^1Y",127,"^K","interceptors"]],"^2M",[["^ ","^1X",173,"^1Y",127]],"^2N",[["^ ","^1X",173,"^1Y",127,"^K","re-frame.std-interceptors/ctx-handler->interceptor"]],"~i87",[["^ ","^1X",227,"^1Y",127,"^K","handler"]]],"~i115",["^ ","~i0",[["^ ","^1X",0,"^1Y",132]],"~i5",[["^ ","^1X",0,"^1Y",132,"^K","re-frame.core/clear-event"]],"^2?",[["^ ","^1X",28,"^1Y",132]],"^2A",[["^ ","^1X",28,"^1Y",132,"^K","cljs.core.partial.cljs$core$IFn$_invoke$arity$2"]],"^2B",[["^ ","^1X",76,"^1Y",132,"^K","re-frame.registrar/clear-handlers"]],"^2C",[["^ ","^1X",110,"^1Y",132,"^K","re-frame.events/kind"]]],"~i121",["^ ","~i0",[["^ ","^1X",0,"^1Y",133]],"~i5",[["^ ","^1X",0,"^1Y",133,"^K","re-frame.core/debug"]],"^2?",[["^ ","^1X",22,"^1Y",133,"^K","re-frame.std-interceptors/debug"]]],"~i122",["^ ","~i0",[["^ ","^1X",0,"^1Y",134]],"~i5",[["^ ","^1X",0,"^1Y",134,"^K","re-frame.core/path"]],"^2?",[["^ ","^1X",21,"^1Y",134,"^K","re-frame.std-interceptors/path"]]],"~i123",["^ ","~i0",[["^ ","^1X",0,"^1Y",135]],"~i5",[["^ ","^1X",0,"^1Y",135,"^K","re-frame.core/enrich"]],"^2?",[["^ ","^1X",23,"^1Y",135,"^K","re-frame.std-interceptors/enrich"]]],"~i124",["^ ","~i0",[["^ ","^1X",0,"^1Y",136]],"~i5",[["^ ","^1X",0,"^1Y",136,"^K","re-frame.core/trim-v"]],"^2?",[["^ ","^1X",23,"^1Y",136,"^K","re-frame.std-interceptors/trim-v"]]],"~i125",["^ ","~i0",[["^ ","^1X",0,"^1Y",137]],"~i5",[["^ ","^1X",0,"^1Y",137,"^K","re-frame.core/after"]],"^2?",[["^ ","^1X",22,"^1Y",137,"^K","re-frame.std-interceptors/after"]]],"~i126",["^ ","~i0",[["^ ","^1X",0,"^1Y",138]],"~i5",[["^ ","^1X",0,"^1Y",138,"^K","re-frame.core/on-changes"]],"^2?",[["^ ","^1X",27,"^1Y",138,"^K","re-frame.std-interceptors/on-changes"]]],"~i141",["^ ","~i0",[["^ ","^1X",0,"^1Y",139]],"~i5",[["^ ","^1X",0,"^1Y",139,"^K","re-frame.core/->interceptor"]],"~i21",[["^ ","^1X",33,"^1Y",139,"^K","re-frame.interceptor/->interceptor"]]],"~i142",["^ ","~i0",[["^ ","^1X",0,"^1Y",140]],"~i5",[["^ ","^1X",0,"^1Y",140,"^K","re-frame.core/get-coeffect"]],"^36",[["^ ","^1X",29,"^1Y",140,"^K","re-frame.interceptor/get-coeffect"]]],"~i143",["^ ","~i0",[["^ ","^1X",0,"^1Y",141]],"~i5",[["^ ","^1X",0,"^1Y",141,"^K","re-frame.core/assoc-coeffect"]],"^36",[["^ ","^1X",31,"^1Y",141,"^K","re-frame.interceptor/assoc-coeffect"]]],"~i144",["^ ","~i0",[["^ ","^1X",0,"^1Y",142]],"~i5",[["^ ","^1X",0,"^1Y",142,"^K","re-frame.core/get-effect"]],"^36",[["^ ","^1X",27,"^1Y",142,"^K","re-frame.interceptor/get-effect"]]],"~i145",["^ ","~i0",[["^ ","^1X",0,"^1Y",143]],"~i5",[["^ ","^1X",0,"^1Y",143,"^K","re-frame.core/assoc-effect"]],"^36",[["^ ","^1X",29,"^1Y",143,"^K","re-frame.interceptor/assoc-effect"]]],"~i146",["^ ","~i0",[["^ ","^1X",0,"^1Y",144]],"~i5",[["^ ","^1X",0,"^1Y",144,"^K","re-frame.core/enqueue"]],"^36",[["^ ","^1X",24,"^1Y",144,"^K","re-frame.interceptor/enqueue"]]],"~i156",["^ ","~i0",[["^ ","^1X",0,"^1Y",145]],"~i5",[["^ ","^1X",0,"^1Y",145,"^K","re-frame.core/set-loggers!"]],"^2A",[["^ ","^1X",34,"^1Y",145,"^K","re-frame.loggers/set-loggers!"]]],"~i163",["^ ","~i0",[["^ ","^1X",0,"^1Y",146]],"~i5",[["^ ","^1X",0,"^1Y",146,"^K","re-frame.core/console"]],"~i13",[["^ ","^1X",24,"^1Y",146,"^K","re-frame.loggers/console"]]],"~i168",["^ ","~i0",[["^ ","^1X",0,"^1Y",147],["^ ","^1X",32,"^1Y",154],["^ ","^1X",0,"^1Y",155]],"~i6",[["^ ","^1X",0,"^1Y",154,"^K","re-frame.core/make-restore-fn"]]],"~i175",["^ ","~i2",[["^ ","^1X",0,"^1Y",155],["^ ","^1X",15,"^1Y",155],["^ ","^1X",15,"^1Y",155,"^K","cljs.core/deref"],["^ ","^1X",13,"^1Y",156],["^ ","^1X",13,"^1Y",156,"^K","cljs.core/deref"],["^ ","^1X",17,"^1Y",157],["^ ","^1X",17,"^1Y",157,"^K","cljs.core/deref"],["^ ","^1X",0,"^1Y",158]],"~i8",[["^ ","^1X",4,"^1Y",155,"^K","handlers"]],"^2A",[["^ ","^1X",31,"^1Y",155,"^K","re-frame.registrar/kind->id->handler"]]],"~i176",["^ ","~i8",[["^ ","^1X",4,"^1Y",156,"^K","app-db"]],"^2A",[["^ ","^1X",29,"^1Y",156,"^K","re-frame.db/app-db"]]],"~i177",["^ ","~i4",[["^ ","^1X",4,"^1Y",157,"^K","subs-cache"]],"^24",[["^ ","^1X",33,"^1Y",157,"^K","re-frame.subs/query->reaction"]]],"~i178",["^ ","~i4",[["^ ","^1X",0,"^1Y",158],["^ ","^1X",0,"^1Y",160],["^ ","^1X",0,"^1Y",221]]],"~i181",["^ ","~i6",[["^ ","^1X",0,"^1Y",160],["^ ","^1X",0,"^1Y",162]],"^2;",[["^ ","^1X",4,"^1Y",160,"^K","original-subs"]],"^2B",[["^ ","^1X",26,"^1Y",160]],"~i27",[["^ ","^1X",26,"^1Y",160,"^K","cljs.core/set"]],"^28",[["^ ","^1X",40,"^1Y",160]],"~i32",[["^ ","^1X",40,"^1Y",160,"^K","cljs.core/vals"]],"~i37",[["^ ","^1X",55,"^1Y",160,"^K","subs-cache"]]],"~i182",["^ ","^2;",[["^ ","^1X",4,"^1Y",161,"^K","current-subs"]],"^2B",[["^ ","^1X",25,"^1Y",161]],"^3E",[["^ ","^1X",25,"^1Y",161,"^K","cljs.core/set"]],"^28",[["^ ","^1X",39,"^1Y",161],["^ ","^1X",54,"^1Y",161],["^ ","^1X",54,"^1Y",161,"^K","cljs.core/deref"]],"^3F",[["^ ","^1X",39,"^1Y",161,"^K","cljs.core/vals"]],"~i38",[["^ ","^1X",70,"^1Y",161,"^K","re-frame.subs/query->reaction"]]],"~i183",["^ ","~i8",[["^ ","^1X",0,"^1Y",162],["^ ","^1X",4,"^1Y",162,"^K","seq__27846"],["^ ","^1X",23,"^1Y",162],["^ ","^1X",23,"^1Y",162,"^K","cljs.core/seq"],["^ ","^1X",4,"^1Y",163,"^K","chunk__27847"],["^ ","^1X",25,"^1Y",163],["^ ","^1X",4,"^1Y",164,"^K","count__27848"],["^ ","^1X",25,"^1Y",164],["^ ","^1X",4,"^1Y",165,"^K","i__27849"],["^ ","^1X",21,"^1Y",165],["^ ","^1X",0,"^1Y",167],["^ ","^1X",0,"^1Y",167],["^ ","^1X",3,"^1Y",167],["^ ","^1X",3,"^1Y",167],["^ ","^1X",4,"^1Y",167,"^K","i__27849"],["^ ","^1X",21,"^1Y",167,"^K","count__27848"],["^ ","^1X",0,"^1Y",168],["^ ","^1X",16,"^1Y",168],["^ ","^1X",16,"^1Y",168,"^K","chunk__27847"],["^ ","^1X",72,"^1Y",168,"^K","i__27849"],["^ ","^1X",0,"^1Y",169],["^ ","^1X",0,"^1Y",169],["^ ","^1X",0,"^1Y",171],["^ ","^1X",0,"^1Y",172],["^ ","^1X",15,"^1Y",172,"^K","seq__27846"],["^ ","^1X",15,"^1Y",173,"^K","chunk__27847"],["^ ","^1X",15,"^1Y",174,"^K","count__27848"],["^ ","^1X",15,"^1Y",175],["^ ","^1X",16,"^1Y",175,"^K","i__27849"],["^ ","^1X",33,"^1Y",175],["^ ","^1X",0,"^1Y",182],["^ ","^1X",4,"^1Y",182,"^K","temp__5457__auto__"],["^ ","^1X",31,"^1Y",182],["^ ","^1X",31,"^1Y",182,"^K","cljs.core/seq"],["^ ","^1X",45,"^1Y",182,"^K","seq__27846"],["^ ","^1X",0,"^1Y",183],["^ ","^1X",0,"^1Y",183],["^ ","^1X",3,"^1Y",183,"^K","temp__5457__auto__"],["^ ","^1X",0,"^1Y",184],["^ ","^1X",0,"^1Y",184],["^ ","^1X",4,"^1Y",184,"^K","seq__27846"],["^ ","^1X",27,"^1Y",184,"^K","temp__5457__auto__"],["^ ","^1X",0,"^1Y",185],["^ ","^1X",0,"^1Y",185],["^ ","^1X",3,"^1Y",185],["^ ","^1X",3,"^1Y",185,"^K","cljs.core/chunked-seq?"],["^ ","^1X",32,"^1Y",185,"^K","seq__27846"],["^ ","^1X",0,"^1Y",186],["^ ","^1X",4,"^1Y",186,"^K","c__4319__auto__"],["^ ","^1X",28,"^1Y",186],["^ ","^1X",28,"^1Y",186,"^K","cljs.core/chunk-first"],["^ ","^1X",50,"^1Y",186,"^K","seq__27846"],["^ ","^1X",0,"^1Y",187],["^ ","^1X",0,"^1Y",187],["^ ","^1X",15,"^1Y",187],["^ ","^1X",15,"^1Y",187,"^K","cljs.core/chunk-rest"],["^ ","^1X",36,"^1Y",187,"^K","seq__27846"],["^ ","^1X",15,"^1Y",188,"^K","c__4319__auto__"],["^ ","^1X",15,"^1Y",189],["^ ","^1X",15,"^1Y",189,"^K","cljs.core/count"],["^ ","^1X",31,"^1Y",189,"^K","c__4319__auto__"],["^ ","^1X",15,"^1Y",190],["^ ","^1X",0,"^1Y",197],["^ ","^1X",16,"^1Y",197],["^ ","^1X",16,"^1Y",197,"^K","cljs.core/first"],["^ ","^1X",32,"^1Y",197,"^K","seq__27846"],["^ ","^1X",0,"^1Y",198],["^ ","^1X",0,"^1Y",198],["^ ","^1X",0,"^1Y",200],["^ ","^1X",0,"^1Y",201],["^ ","^1X",15,"^1Y",201],["^ ","^1X",15,"^1Y",201,"^K","cljs.core/next"],["^ ","^1X",30,"^1Y",201,"^K","seq__27846"],["^ ","^1X",15,"^1Y",202],["^ ","^1X",15,"^1Y",203],["^ ","^1X",15,"^1Y",204],["^ ","^1X",0,"^1Y",212]],"^24",[["^ ","^1X",4,"^1Y",168,"^K","sub"],["^ ","^1X",4,"^1Y",197,"^K","sub"]],"^1Z",[["^ ","^1X",37,"^1Y",162]],"^36",[["^ ","^1X",37,"^1Y",162,"^K","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]],"~i36",[["^ ","^1X",90,"^1Y",162,"^K","current-subs"]],"^26",[["^ ","^1X",109,"^1Y",162,"^K","original-subs"]]],"~i184",["^ ","~i10",[["^ ","^1X",0,"^1Y",169],["^ ","^1X",0,"^1Y",198]],"~i11",[["^ ","^1X",0,"^1Y",169,"^K","re-frame.interop/dispose!"],["^ ","^1X",0,"^1Y",198,"^K","re-frame.interop/dispose!"]],"~i28",[["^ ","^1X",31,"^1Y",169,"^K","sub"],["^ ","^1X",31,"^1Y",198,"^K","sub"]]],"~i189",["^ ","~i6",[["^ ","^1X",0,"^1Y",217]],"~i7",[["^ ","^1X",0,"^1Y",217,"^K","cljs.core/reset!"]],"~i14",[["^ ","^1X",22,"^1Y",217,"^K","re-frame.registrar/kind->id->handler"]],"~i42",[["^ ","^1X",65,"^1Y",217,"^K","handlers"]]],"~i190",["^ ","~i6",[["^ ","^1X",0,"^1Y",219]],"~i7",[["^ ","^1X",0,"^1Y",219,"^K","cljs.core/reset!"]],"^3Q",[["^ ","^1X",22,"^1Y",219,"^K","re-frame.db/app-db"]],"^25",[["^ ","^1X",41,"^1Y",219,"^K","app-db"]]],"~i193",["^ ","~i0",[["^ ","^1X",0,"^1Y",225],["^ ","^1X",34,"^1Y",228],["^ ","^1X",0,"^1Y",229]],"~i6",[["^ ","^1X",0,"^1Y",228,"^K","re-frame.core/purge-event-queue"]]],"~i196",["^ ","~i2",[["^ ","^1X",0,"^1Y",229]],"~i3",[["^ ","^1X",7,"^1Y",229,"^K","re-frame.router/purge"]],"^24",[["^ ","^1X",29,"^1Y",229,"^K","re-frame.router/event-queue"]]],"~i200",["^ ","~i0",[["^ ","^1X",0,"^1Y",231],["^ ","^1X",0,"^1Y",231],["^ ","^1X",40,"^1Y",247],["^ ","^1X",88,"^1Y",247,"^K","var_args"],["^ ","^1X",0,"^1Y",248],["^ ","^1X",0,"^1Y",248],["^ ","^1X",4,"^1Y",248,"^K","G__27887"],["^ ","^1X",15,"^1Y",248],["^ ","^1X",15,"^1Y",248],["^ ","^1X",0,"^1Y",249],["^ ","^1X",0,"^1Y",249],["^ ","^1X",8,"^1Y",249,"^K","G__27887"],["^ ","^1X",5,"^1Y",250],["^ ","^1X",0,"^1Y",251],["^ ","^1X",7,"^1Y",251,"^K","re-frame.core/add-post-event-callback"],["^ ","^1X",75,"^1Y",251],["^ ","^1X",76,"^1Y",251],["^ ","^1X",86,"^1Y",251],["^ ","^1X",5,"^1Y",254],["^ ","^1X",0,"^1Y",255],["^ ","^1X",7,"^1Y",255,"^K","re-frame.core/add-post-event-callback"],["^ ","^1X",75,"^1Y",255],["^ ","^1X",76,"^1Y",255],["^ ","^1X",86,"^1Y",255],["^ ","^1X",92,"^1Y",255],["^ ","^1X",93,"^1Y",255],["^ ","^1X",103,"^1Y",255],["^ ","^1X",0,"^1Y",259],["^ ","^1X",6,"^1Y",259],["^ ","^1X",11,"^1Y",259,"^K","js/Error"],["^ ","^1X",17,"^1Y",259],["^ ","^1X",18,"^1Y",259],["^ ","^1X",80,"^1Y",259],["^ ","^1X",80,"^1Y",259],["^ ","^1X",0,"^1Y",264],["^ ","^1X",0,"^1Y",264],["^ ","^1X",70,"^1Y",264],["^ ","^1X",0,"^1Y",265],["^ ","^1X",0,"^1Y",268],["^ ","^1X",0,"^1Y",268],["^ ","^1X",70,"^1Y",268],["^ ","^1X",0,"^1Y",269],["^ ","^1X",0,"^1Y",272],["^ ","^1X",0,"^1Y",272],["^ ","^1X",64,"^1Y",272],["^ ","^1X",0,"^1Y",274]],"~i6",[["^ ","^1X",0,"^1Y",247,"^K","re-frame.core/add-post-event-callback"],["^ ","^1X",0,"^1Y",264,"^K","re-frame.core/add-post-event-callback"],["^ ","^1X",0,"^1Y",268,"^K","re-frame.core/add-post-event-callback"],["^ ","^1X",0,"^1Y",272,"^K","re-frame.core/add-post-event-callback"]]],"~i215",["^ ","~i4",[["^ ","^1X",81,"^1Y",264,"^K","f"]]],"~i216",["^ ","~i3",[["^ ","^1X",0,"^1Y",265]],"~i4",[["^ ","^1X",7,"^1Y",265,"^K","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2"]],"^3O",[["^ ","^1X",75,"^1Y",265,"^K","f"]],"^2=",[["^ ","^1X",77,"^1Y",265,"^K","f"]]],"~i217",["^ ","~i4",[["^ ","^1X",81,"^1Y",268,"^K","id"]],"~i7",[["^ ","^1X",84,"^1Y",268,"^K","f"]]],"~i218",["^ ","~i3",[["^ ","^1X",0,"^1Y",269]],"~i4",[["^ ","^1X",7,"^1Y",269,"^K","re-frame.router/add-post-event-callback"]],"~i35",[["^ ","^1X",47,"^1Y",269,"^K","re-frame.router/event-queue"]],"^2D",[["^ ","^1X",75,"^1Y",269,"^K","id"]],"~i66",[["^ ","^1X",78,"^1Y",269,"^K","f"]]],"~i221",["^ ","~i0",[["^ ","^1X",0,"^1Y",274],["^ ","^1X",43,"^1Y",274],["^ ","^1X",0,"^1Y",275]],"~i6",[["^ ","^1X",0,"^1Y",274,"^K","re-frame.core/remove-post-event-callback"]]],"~i222",["^ ","~i3",[["^ ","^1X",94,"^1Y",274,"^K","id"]]],"~i223",["^ ","~i2",[["^ ","^1X",0,"^1Y",275]],"~i3",[["^ ","^1X",7,"^1Y",275,"^K","re-frame.router/remove-post-event-callback"]],"^3G",[["^ ","^1X",50,"^1Y",275,"^K","re-frame.router/event-queue"]],"^2F",[["^ ","^1X",78,"^1Y",275,"^K","id"]]],"~i228",["^ ","~i0",[["^ ","^1X",0,"^1Y",277],["^ ","^1X",0,"^1Y",277],["^ ","^1X",33,"^1Y",277],["^ ","^1X",74,"^1Y",277,"^K","var_args"],["^ ","^1X",0,"^1Y",278],["^ ","^1X",0,"^1Y",278],["^ ","^1X",4,"^1Y",278,"^K","args__4502__auto__"],["^ ","^1X",25,"^1Y",278],["^ ","^1X",0,"^1Y",279],["^ ","^1X",0,"^1Y",279],["^ ","^1X",4,"^1Y",279,"^K","len__4499__auto__"],["^ ","^1X",30,"^1Y",279],["^ ","^1X",30,"^1Y",279],["^ ","^1X",0,"^1Y",280],["^ ","^1X",0,"^1Y",280],["^ ","^1X",4,"^1Y",280,"^K","i__4500__auto__"],["^ ","^1X",28,"^1Y",280],["^ ","^1X",0,"^1Y",282],["^ ","^1X",0,"^1Y",282],["^ ","^1X",3,"^1Y",282],["^ ","^1X",4,"^1Y",282,"^K","i__4500__auto__"],["^ ","^1X",28,"^1Y",282,"^K","len__4499__auto__"],["^ ","^1X",0,"^1Y",283],["^ ","^1X",0,"^1Y",283],["^ ","^1X",0,"^1Y",283,"^K","args__4502__auto__"],["^ ","^1X",24,"^1Y",283],["^ ","^1X",25,"^1Y",283],["^ ","^1X",35,"^1Y",283,"^K","i__4500__auto__"],["^ ","^1X",0,"^1Y",285],["^ ","^1X",15,"^1Y",285],["^ ","^1X",16,"^1Y",285,"^K","i__4500__auto__"],["^ ","^1X",40,"^1Y",285],["^ ","^1X",0,"^1Y",289],["^ ","^1X",0,"^1Y",293],["^ ","^1X",4,"^1Y",293,"^K","argseq__4503__auto__"],["^ ","^1X",27,"^1Y",293],["^ ","^1X",29,"^1Y",293],["^ ","^1X",30,"^1Y",293],["^ ","^1X",36,"^1Y",293],["^ ","^1X",36,"^1Y",293,"^K","args__4502__auto__"],["^ ","^1X",64,"^1Y",293],["^ ","^1X",64,"^1Y",293],["^ ","^1X",69,"^1Y",293,"^K","cljs.core/IndexedSeq"],["^ ","^1X",90,"^1Y",293],["^ ","^1X",90,"^1Y",293,"^K","args__4502__auto__"],["^ ","^1X",115,"^1Y",293],["^ ","^1X",120,"^1Y",293],["^ ","^1X",124,"^1Y",293],["^ ","^1X",131,"^1Y",293],["^ ","^1X",0,"^1Y",294],["^ ","^1X",0,"^1Y",294],["^ ","^1X",7,"^1Y",294,"^K","re-frame.core/register-handler"],["^ ","^1X",75,"^1Y",294,"^K","argseq__4503__auto__"],["^ ","^1X",0,"^1Y",297],["^ ","^1X",0,"^1Y",297],["^ ","^1X",0,"^1Y",297],["^ ","^1X",0,"^1Y",297,"^K","re-frame.core/register-handler"],["^ ","^1X",70,"^1Y",297],["^ ","^1X",0,"^1Y",298],["^ ","^1X",0,"^1Y",307],["^ ","^1X",0,"^1Y",307],["^ ","^1X",0,"^1Y",307,"^K","re-frame.core/register-handler"],["^ ","^1X",57,"^1Y",307],["^ ","^1X",0,"^1Y",309],["^ ","^1X",0,"^1Y",310],["^ ","^1X",0,"^1Y",310],["^ ","^1X",0,"^1Y",310,"^K","re-frame.core/register-handler"],["^ ","^1X",51,"^1Y",310],["^ ","^1X",62,"^1Y",310,"^K","seq27889"],["^ ","^1X",0,"^1Y",311],["^ ","^1X",0,"^1Y",311],["^ ","^1X",4,"^1Y",311,"^K","self__4487__auto__"],["^ ","^1X",25,"^1Y",311],["^ ","^1X",0,"^1Y",312],["^ ","^1X",0,"^1Y",312],["^ ","^1X",7,"^1Y",312,"^K","self__4487__auto__"],["^ ","^1X",63,"^1Y",312],["^ ","^1X",63,"^1Y",312,"^K","cljs.core/seq"],["^ ","^1X",77,"^1Y",312,"^K","seq27889"],["^ ","^1X",0,"^1Y",315]],"~i6",[["^ ","^1X",0,"^1Y",277,"^K","re-frame.core/register-handler"]]],"~i229",["^ ","~i5",[["^ ","^1X",81,"^1Y",297,"^K","args"]]],"~i230",["^ ","~i2",[["^ ","^1X",0,"^1Y",298],["^ ","^1X",4,"^1Y",298,"^K","G__27891"],["^ ","^1X",21,"^1Y",298],["^ ","^1X",4,"^1Y",299,"^K","G__27892"],["^ ","^1X",21,"^1Y",299],["^ ","^1X",4,"^1Y",300,"^K","G__27893"],["^ ","^1X",4,"^1Y",301,"^K","G__27894"],["^ ","^1X",21,"^1Y",301],["^ ","^1X",0,"^1Y",302],["^ ","^1X",0,"^1Y",302],["^ ","^1X",107,"^1Y",302,"^K","G__27891"],["^ ","^1X",122,"^1Y",302,"^K","G__27892"],["^ ","^1X",137,"^1Y",302,"^K","G__27893"],["^ ","^1X",152,"^1Y",302,"^K","G__27894"],["^ ","^1X",202,"^1Y",302,"^K","G__27891"],["^ ","^1X",217,"^1Y",302,"^K","G__27892"],["^ ","^1X",232,"^1Y",302,"^K","G__27893"],["^ ","^1X",247,"^1Y",302,"^K","G__27894"]],"~i3",[["^ ","^1X",1,"^1Y",302,"^K","re-frame.core/console"],["^ ","^1X",55,"^1Y",302,"^K","re-frame.core/console"],["^ ","^1X",170,"^1Y",302,"^K","re-frame.core/console"]],"^2W",[["^ ","^1X",21,"^1Y",300]],"~i117",[["^ ","^1X",66,"^1Y",300]],"~i118",[["^ ","^1X",66,"^1Y",300,"^K","cljs.core/first"]],"^32",[["^ ","^1X",82,"^1Y",300,"^K","args"]]],"~i231",["^ ","~i2",[["^ ","^1X",0,"^1Y",304]],"~i3",[["^ ","^1X",7,"^1Y",304,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1X",53,"^1Y",304,"^K","re-frame.core/reg-event-db"]],"~i22",[["^ ","^1X",80,"^1Y",304,"^K","args"]]],"~i233",["^ ","~i0",[["^ ","^1X",0,"^1Y",315],["^ ","^1X",0,"^1Y",315],["^ ","^1X",29,"^1Y",315],["^ ","^1X",66,"^1Y",315,"^K","var_args"],["^ ","^1X",0,"^1Y",316],["^ ","^1X",0,"^1Y",316],["^ ","^1X",4,"^1Y",316,"^K","args__4502__auto__"],["^ ","^1X",25,"^1Y",316],["^ ","^1X",0,"^1Y",317],["^ ","^1X",0,"^1Y",317],["^ ","^1X",4,"^1Y",317,"^K","len__4499__auto__"],["^ ","^1X",30,"^1Y",317],["^ ","^1X",30,"^1Y",317],["^ ","^1X",0,"^1Y",318],["^ ","^1X",0,"^1Y",318],["^ ","^1X",4,"^1Y",318,"^K","i__4500__auto__"],["^ ","^1X",28,"^1Y",318],["^ ","^1X",0,"^1Y",320],["^ ","^1X",0,"^1Y",320],["^ ","^1X",3,"^1Y",320],["^ ","^1X",4,"^1Y",320,"^K","i__4500__auto__"],["^ ","^1X",28,"^1Y",320,"^K","len__4499__auto__"],["^ ","^1X",0,"^1Y",321],["^ ","^1X",0,"^1Y",321],["^ ","^1X",0,"^1Y",321,"^K","args__4502__auto__"],["^ ","^1X",24,"^1Y",321],["^ ","^1X",25,"^1Y",321],["^ ","^1X",35,"^1Y",321,"^K","i__4500__auto__"],["^ ","^1X",0,"^1Y",323],["^ ","^1X",15,"^1Y",323],["^ ","^1X",16,"^1Y",323,"^K","i__4500__auto__"],["^ ","^1X",40,"^1Y",323],["^ ","^1X",0,"^1Y",327],["^ ","^1X",0,"^1Y",331],["^ ","^1X",4,"^1Y",331,"^K","argseq__4503__auto__"],["^ ","^1X",27,"^1Y",331],["^ ","^1X",29,"^1Y",331],["^ ","^1X",30,"^1Y",331],["^ ","^1X",36,"^1Y",331],["^ ","^1X",36,"^1Y",331,"^K","args__4502__auto__"],["^ ","^1X",64,"^1Y",331],["^ ","^1X",64,"^1Y",331],["^ ","^1X",69,"^1Y",331,"^K","cljs.core/IndexedSeq"],["^ ","^1X",90,"^1Y",331],["^ ","^1X",90,"^1Y",331,"^K","args__4502__auto__"],["^ ","^1X",115,"^1Y",331],["^ ","^1X",120,"^1Y",331],["^ ","^1X",124,"^1Y",331],["^ ","^1X",131,"^1Y",331],["^ ","^1X",0,"^1Y",332],["^ ","^1X",0,"^1Y",332],["^ ","^1X",7,"^1Y",332,"^K","re-frame.core/register-sub"],["^ ","^1X",71,"^1Y",332,"^K","argseq__4503__auto__"],["^ ","^1X",0,"^1Y",335],["^ ","^1X",0,"^1Y",335],["^ ","^1X",0,"^1Y",335],["^ ","^1X",0,"^1Y",335,"^K","re-frame.core/register-sub"],["^ ","^1X",66,"^1Y",335],["^ ","^1X",0,"^1Y",336],["^ ","^1X",0,"^1Y",345],["^ ","^1X",0,"^1Y",345],["^ ","^1X",0,"^1Y",345,"^K","re-frame.core/register-sub"],["^ ","^1X",53,"^1Y",345],["^ ","^1X",0,"^1Y",347],["^ ","^1X",0,"^1Y",348],["^ ","^1X",0,"^1Y",348],["^ ","^1X",0,"^1Y",348,"^K","re-frame.core/register-sub"],["^ ","^1X",47,"^1Y",348],["^ ","^1X",58,"^1Y",348,"^K","seq27905"],["^ ","^1X",0,"^1Y",349],["^ ","^1X",0,"^1Y",349],["^ ","^1X",4,"^1Y",349,"^K","self__4487__auto__"],["^ ","^1X",25,"^1Y",349],["^ ","^1X",0,"^1Y",350],["^ ","^1X",0,"^1Y",350],["^ ","^1X",7,"^1Y",350,"^K","self__4487__auto__"],["^ ","^1X",63,"^1Y",350],["^ ","^1X",63,"^1Y",350,"^K","cljs.core/seq"],["^ ","^1X",77,"^1Y",350,"^K","seq27905"],["^ ","^1X",0,"^1Y",353]],"~i6",[["^ ","^1X",0,"^1Y",315,"^K","re-frame.core/register-sub"]]],"~i234",["^ ","~i5",[["^ ","^1X",77,"^1Y",335,"^K","args"]]],"~i235",["^ ","~i2",[["^ ","^1X",0,"^1Y",336],["^ ","^1X",4,"^1Y",336,"^K","G__27907"],["^ ","^1X",21,"^1Y",336],["^ ","^1X",4,"^1Y",337,"^K","G__27908"],["^ ","^1X",21,"^1Y",337],["^ ","^1X",4,"^1Y",338,"^K","G__27909"],["^ ","^1X",4,"^1Y",339,"^K","G__27910"],["^ ","^1X",21,"^1Y",339],["^ ","^1X",0,"^1Y",340],["^ ","^1X",0,"^1Y",340],["^ ","^1X",107,"^1Y",340,"^K","G__27907"],["^ ","^1X",122,"^1Y",340,"^K","G__27908"],["^ ","^1X",137,"^1Y",340,"^K","G__27909"],["^ ","^1X",152,"^1Y",340,"^K","G__27910"],["^ ","^1X",202,"^1Y",340,"^K","G__27907"],["^ ","^1X",217,"^1Y",340,"^K","G__27908"],["^ ","^1X",232,"^1Y",340,"^K","G__27909"],["^ ","^1X",247,"^1Y",340,"^K","G__27910"]],"~i3",[["^ ","^1X",1,"^1Y",340,"^K","re-frame.core/console"],["^ ","^1X",55,"^1Y",340,"^K","re-frame.core/console"],["^ ","^1X",170,"^1Y",340,"^K","re-frame.core/console"]],"~i109",[["^ ","^1X",21,"^1Y",338]],"~i114",[["^ ","^1X",66,"^1Y",338]],"^2Z",[["^ ","^1X",66,"^1Y",338,"^K","cljs.core/first"]],"^2[",[["^ ","^1X",82,"^1Y",338,"^K","args"]]],"~i236",["^ ","~i2",[["^ ","^1X",0,"^1Y",342]],"~i3",[["^ ","^1X",7,"^1Y",342,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1X",53,"^1Y",342,"^K","re-frame.core/reg-sub-raw"]],"^36",[["^ ","^1X",79,"^1Y",342,"^K","args"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1535834828000,1535834828000,0,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1O","reagent/impl/batching.cljs"],[1535847022000,"^15","^13","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"],["^1O","goog/dom/tagname.js"],[1505449243000,"^15","~$goog.dom.HtmlElement"],["^4D","node_modules/fbjs/lib/camelize.js"],[1535834828000,1535834828000,1506381453000,"^4E"],["~:macro","^13"],[1535834828000],["^1O","goog/math/math.js"],[1505449243000,"^15","~$goog.array","~$goog.asserts"],["^1O","goog/labs/useragent/browser.js"],[1505449243000,"^15","^4N","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1O","re_frame/loggers.cljc"],[1535834828000,"^15","^13","^U"],["^4M","^4H"],[1535847022000],["^1O","goog/array/array.js"],[1505449243000,"^15","^4O"],["^4D","node_modules/prop-types/checkPropTypes.js"],[1535834828000,1535834828000,1519255688000,"^4E","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1O","reagent/impl/util.cljs"],[1535847022000,"^15","^13","^4H","^4I","^4K"],["^1O","re_frame/router.cljc"],[1535834828000,"^15","^13","^[","^Q","^11","~$re-frame.trace"],["^4M","~$net.cgrand.macrovich"],[1511234491000],["^4D","node_modules/fbjs/lib/emptyFunction.js"],[1535834828000,1535834828000,1506381453000,"^4E"],["^1O","goog/debug/error.js"],[1505449243000,"^15"],["^1O","re_frame/registrar.cljc"],[1535834828000,"^15","^13","^Q","^11"],["^4D","node_modules/fbjs/lib/emptyObject.js"],[1535834828000,1535834828000,1506381454000,"^4E"],["^1O","goog/dom/nodetype.js"],[1505449243000,"^15"],["^4D","node_modules/fbjs/lib/shallowEqual.js"],[1535834828000,1535834828000,1506381454000,"^4E"],["^4M","~$reagent.core"],[1535847022000],["^1O","reagent/ratom.cljs"],[1535847022000,"^15","^13","^4J","^4H","~$reagent.impl.batching","^U"],["^1O","re_frame/interop.cljs"],[1535834828000,"^15","^13","~$goog.async.nextTick","^4X","~$reagent.ratom"],["^4D","node_modules/fbjs/lib/hyphenate.js"],[1535834828000,1535834828000,1506381454000,"^4E"],["^4D","node_modules/create-react-class/factory.js"],[1535834828000,1535834828000,1517346959000,"^4E","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","^4S","^4T"],["^4D","node_modules/react/index.js"],[1535834828000,1535834828000,0,"^4E","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1O","shadow/js.js"],[1535834828000,"^15"],["^1O","goog/object/object.js"],[1505449243000,"^15"],["^1O","reagent/impl/template.cljs"],[1535847022000,"^15","^13","^=","^4K","~$clojure.walk","^4J","~$reagent.impl.component","^4Y","^4[","^4I","^4H"],["^4D","node_modules/react-dom/cjs/react-dom.production.min.js"],[1535834828000,1535834828000,0,"^4E","^4S","^=","~$module$node_modules$fbjs$lib$ExecutionEnvironment","^50","~$module$node_modules$fbjs$lib$emptyFunction","~$module$node_modules$fbjs$lib$getActiveElement","~$module$node_modules$fbjs$lib$shallowEqual","~$module$node_modules$fbjs$lib$containsNode","^51"],"~:SHADOW-TIMESTAMP",[1535834828000,1535834828000],["^4D","node_modules/react/cjs/react.development.js"],[1535834828000,1535834828000,0,"^4E","^50","^4S","^51","^4T","^57","~$module$node_modules$prop_types$checkPropTypes"],["^4M","^4["],[1535847022000],["^1O","re_frame/events.cljc"],[1535834828000,"^15","^13","^19","~$re-frame.utils","^Q","^12","^11","^X","^4V"],["^4D","node_modules/fbjs/lib/isNode.js"],[1535834828000,1535834828000,1506381456000,"^4E"],["^1O","goog/math/long.js"],[1505449243000,"^15","^4O","~$goog.reflect"],["^4M","^4I"],[1535847022000],["^4D","node_modules/fbjs/lib/warning.js"],[1535834828000,1535834828000,1506381455000,"^4E","^57"],["^1O","goog/functions/functions.js"],[1505449243000,"^15"],["^1O","reagent/impl/component.cljs"],[1535847022000,"^15","^13","^?","^=","^4J","^4Y","^4[","^4I","^4H"],["^1O","clojure/walk.cljs"],[1535834828000,"^15","^13"],["^1O","goog/structs/map.js"],[1505449243000,"^15","~$goog.iter.Iterator","~$goog.iter.StopIteration","^4Q"],["^1O","goog/labs/useragent/engine.js"],[1505449243000,"^15","^4N","^4P","^4R"],["^1O","goog/asserts/asserts.js"],[1505449243000,"^15","~$goog.debug.Error","~$goog.dom.NodeType","^4R"],["^1O","goog/uri/uri.js"],[1505449243000,"^15","^4N","^4O","^4R","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^4D","node_modules/object-assign/index.js"],[1535834828000,1535834828000,1484580833000,"^4E"],["^4D","node_modules/fbjs/lib/containsNode.js"],[1535834828000,1535834828000,1506381456000,"^4E","~$module$node_modules$fbjs$lib$isTextNode"],["^4D","node_modules/fbjs/lib/hyphenateStyleName.js"],[1535834828000,1535834828000,1506381454000,"^4E","~$module$node_modules$fbjs$lib$hyphenate"],["^1O","re_frame/db.cljc"],[1535834828000,"^15","^13","^Q"],["^1O","goog/base.js"],[1505449243000],["^1O","goog/structs/structs.js"],[1505449243000,"^15","^4N","^4Q"],["^1O","clojure/string.cljs"],[1535834828000,"^15","^13","^4R","~$goog.string.StringBuffer"],["^4D","node_modules/fbjs/lib/ExecutionEnvironment.js"],[1535834828000,1535834828000,1506381453000,"^4E"],["^4D","node_modules/create-react-class/index.js"],[1535834828000,1535834828000,1517346956000,"^4E","^=","~$module$node_modules$create_react_class$factory"],["^1O","re_frame/cofx.cljc"],[1535834828000,"^15","^13","^19","^X","^12","^11"],["^4D","node_modules/react/cjs/react.production.min.js"],[1535834828000,1535834828000,0,"^4E","^50","^4S","^51","^57"],["^1O","goog/debug/entrypointregistry.js"],[1505449243000,"^15","^4O"],["^1O","goog/string/string.js"],[1505449243000,"^15"],["^1O","re_frame/interceptor.cljc"],[1535834828000,"^15","^13","^11","^Q","^4V","^U"],["^1O","clojure/data.cljs"],[1535834828000,"^15","^13","^U"],["^1O","goog/reflect/reflect.js"],[1505449243000,"^15"],["^1O","goog/labs/useragent/util.js"],[1505449243000,"^15","^4R"],["^1O","reagent/core.cljs"],[1535847022000,"^15","^13","^=","~$reagent.impl.template","^55","^4J","^4Y","^4[","^4H","^4I","~$reagent.dom"],["^1O","goog/string/stringbuffer.js"],[1505449243000,"^15"],["^1O","re_frame/std_interceptors.cljc"],[1535834828000,"^15","^13","^X","^11","^12","^19","~$clojure.data","^W","^5=","^4V"],["^1O","goog/iter/iter.js"],[1505449243000,"^15","^4N","^4O","~$goog.functions","~$goog.math"],["^1O","goog/async/nexttick.js"],[1505449243000,"^15","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^5O","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1O","re_frame/utils.cljc"],[1535834828000,"^15","^13","^11"],["^4D","node_modules/fbjs/lib/getActiveElement.js"],[1535834828000,1535834828000,1506381456000,"^4E"],["^1O","reagent/dom.cljs"],[1535847022000,"^15","^13","^A","^4J","^5L","^4Y","^4[","^4H","^4I"],["^4D","node_modules/fbjs/lib/camelizeStyleName.js"],[1535834828000,1535834828000,1506381453000,"^4E","~$module$node_modules$fbjs$lib$camelize"],["^1O","re_frame/fx.cljc"],[1535834828000,"^15","^13","^17","^19","^X","^Q","^[","^12","^11","^4V"],["^4D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1535834828000,1535834828000,1519255688000,"^4E"],["^1O","reagent/interop.cljs"],[1535847022000,"^15","^13"],["^1O","goog/dom/htmlelement.js"],[1505449243000,"^15"],["^1O","cljs/core.cljs"],[1535834828000,"~$goog.math.Long","~$goog.math.Integer","^4R","^4Q","^4N","~$goog.Uri","^5J"],["^1O","reagent/debug.cljs"],[1535847022000,"^15","^13"],["^4M","^4V"],[1535834828000],["^1O","goog/math/integer.js"],[1505449243000,"^15"],["^4D","node_modules/react-dom/cjs/react-dom.development.js"],[1535834828000,1535834828000,0,"^4E","^4S","^=","^4T","^56","^50","^57","^5<","^58","^59","^5:","^51","~$module$node_modules$fbjs$lib$hyphenateStyleName","~$module$node_modules$fbjs$lib$camelizeStyleName"],["^1O","clojure/set.cljs"],[1535834828000,"^15","^13"],["^1O","goog/uri/utils.js"],[1505449243000,"^15","^4N","^4O","^4R"],["^4D","node_modules/fbjs/lib/isTextNode.js"],[1535834828000,1535834828000,1506381456000,"^4E","~$module$node_modules$fbjs$lib$isNode"],["^4D","node_modules/fbjs/lib/invariant.js"],[1535834828000,1535834828000,1506381455000,"^4E"],["^1O","re_frame/trace.cljc"],[1535834828000,"^15","^13","^Q","^11","^5O"],["^1O","re_frame/subs.cljc"],[1535834828000,"^15","^13","^19","^Q","^11","^5=","^12","^4V"],["^1O","re_frame/core.cljc"],[1535834828000,"^15","^13","^[","^S","^Q","^19","^Z","^W","^17","^11","^12","^X","^1<","^U"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^S","^T","^U","^V","^W","^X","^X","^Y","^Z","^[","^[","^10","^11","^Z","^Z","^12","^12","^13","^13","^14","^X","^15","^15","^16","^17","^18","^19","^1:","^12","^17","^17","^U","^U","^1;","^[","^1<","^1<","^11","^11","^S","^S","^1=","^Q","^1>","^1<","^W","^W","^19","^19"],"^1?",["^J",["^1@"]],"~:shadow/js-access-global",["^J",["Error"]],"^1A",["^ ","^1B","^1<","^1C","^1<","^1D","^1<"],"~:defs",["^ ","~$console",["^ ","^K","~$re-frame.core/console","^6","re_frame/core.cljc","^7",164,"^8",1,"^9",164,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",164,"^8",6,"^9",164,"^:",13]],"~$on-changes",["^ ","^K","~$re-frame.core/on-changes","^6","re_frame/core.cljc","^7",127,"^8",1,"^9",127,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",127,"^8",6,"^9",127,"^:",16]],"~$enrich",["^ ","^K","~$re-frame.core/enrich","^6","re_frame/core.cljc","^7",124,"^8",1,"^9",124,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",124,"^8",6,"^9",124,"^:",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",51,"^8",7,"^9",51,"^:",18,"~:arglists",["^1G",["~$quote",["^1G",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^K","~$re-frame.core/reg-sub-raw","~:variadic",false,"^6","re_frame/core.cljc","^:",18,"~:method-params",["^1G",[["^6=","^6>"]]],"~:protocol-impl",null,"~:arglists-meta",["^1G",[null,null]],"^8",1,"^7",51,"^9",51,"~:max-fixed-arity",2,"~:fn-var",true,"^6;",["^1G",["^6<",["^1G",[["^6=","^6>"]]]]],"^6?","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^K","~$re-frame.core/subscribe","^6","re_frame/core.cljc","^7",46,"^8",1,"^9",46,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",46,"^8",6,"^9",46,"^:",15]],"~$assoc-coeffect",["^ ","^K","~$re-frame.core/assoc-coeffect","^6","re_frame/core.cljc","^7",144,"^8",1,"^9",144,"^:",20,"^5",["^ ","^6","re_frame/core.cljc","^7",144,"^8",6,"^9",144,"^:",20]],"~$register-sub",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",234,"^8",7,"^9",234,"^:",19,"^6;",["^1G",["^6<",["^1G",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^6A",true,"^6E",0,"^6B",[["^1G",["^6L"]]],"^6;",["^1G",[["~$&","^6L"]]],"^6D",["^1G",[null]]]],"^K","~$re-frame.core/register-sub","^6A",true,"^6","re_frame/core.cljc","^:",19,"^6M",["^ ","^6A",true,"^6E",0,"^6B",[["^1G",["^6L"]]],"^6;",["^1G",[["~$&","^6L"]]],"^6D",["^1G",[null]]],"^6B",[["^1G",["^6L"]]],"^6C",null,"^6D",["^1G",[null]],"^8",1,"^7",234,"^9",234,"^6E",0,"^6F",true,"^6;",["^1G",[["~$&","^6L"]]]],"~$purge-event-queue",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",194,"^8",7,"^9",194,"^:",24,"^6;",["^1G",["^6<",["^1G",[[]]]]],"^6?","Remove all events queued for processing"],"^K","~$re-frame.core/purge-event-queue","^6A",false,"^6","re_frame/core.cljc","^:",24,"^6B",["^1G",[[]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",194,"^9",194,"^6E",0,"^6F",true,"^6;",["^1G",["^6<",["^1G",[[]]]]],"^6?","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",222,"^8",7,"^9",222,"^:",33,"^6;",["^1G",["^6<",["^1G",[["~$id"]]]]]],"^K","~$re-frame.core/remove-post-event-callback","^6A",false,"^6","re_frame/core.cljc","^:",33,"^6B",["^1G",[["^6R"]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",222,"^9",222,"^6E",1,"^6F",true,"^6;",["^1G",["^6<",["^1G",[["^6R"]]]]]],"~$path",["^ ","^K","~$re-frame.core/path","^6","re_frame/core.cljc","^7",123,"^8",1,"^9",123,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",123,"^8",6,"^9",123,"^:",10]],"~$reg-sub",["^ ","^K","~$re-frame.core/reg-sub","^6","re_frame/core.cljc","^7",45,"^8",1,"^9",45,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",45,"^8",6,"^9",45,"^:",13]],"~$make-restore-fn",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",169,"^8",7,"^9",169,"^:",22,"^6;",["^1G",["^6<",["^1G",[[]]]]],"^6?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^K","~$re-frame.core/make-restore-fn","^6A",false,"^6","re_frame/core.cljc","^:",22,"^6B",["^1G",[[]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",169,"^9",169,"^6E",0,"^6F",true,"^6;",["^1G",["^6<",["^1G",[[]]]]],"^6?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^K","~$re-frame.core/clear-fx","^6","re_frame/core.cljc","^7",61,"^8",1,"^9",61,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",61,"^8",6,"^9",61,"^:",14],"~:tag","~$any"],"~$get-effect",["^ ","^K","~$re-frame.core/get-effect","^6","re_frame/core.cljc","^7",145,"^8",1,"^9",145,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",145,"^8",6,"^9",145,"^:",16]],"~$reg-event-db",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",71,"^8",7,"^9",71,"^:",19,"^6;",["^1G",["^6<",["^1G",[["^6R","~$handler"],["^6R","~$interceptors","^75"]]]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]]],"^K","~$re-frame.core/reg-event-db","^6A",false,"^6","re_frame/core.cljc","^:",19,"^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]],"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",71,"^9",71,"^6E",3,"^6F",true,"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^K","~$re-frame.core/dispatch-sync","^6","re_frame/core.cljc","^7",41,"^8",1,"^9",41,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",41,"^8",6,"^9",41,"^:",19]],"~$clear-event",["^ ","^K","~$re-frame.core/clear-event","^6","re_frame/core.cljc","^7",116,"^8",1,"^9",116,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",116,"^8",6,"^9",116,"^:",17],"^70","^71"],"~$->interceptor",["^ ","^K","~$re-frame.core/->interceptor","^6","re_frame/core.cljc","^7",142,"^8",1,"^9",142,"^:",19,"^5",["^ ","^6","re_frame/core.cljc","^7",142,"^8",6,"^9",142,"^:",19]],"~$set-loggers!",["^ ","^K","~$re-frame.core/set-loggers!","^6","re_frame/core.cljc","^7",157,"^8",1,"^9",157,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",157,"^8",6,"^9",157,"^:",18]],"~$inject-cofx",["^ ","^K","~$re-frame.core/inject-cofx","^6","re_frame/core.cljc","^7",65,"^8",1,"^9",65,"^:",17,"^5",["^ ","^6","re_frame/core.cljc","^7",65,"^8",6,"^9",65,"^:",17]],"~$get-coeffect",["^ ","^K","~$re-frame.core/get-coeffect","^6","re_frame/core.cljc","^7",143,"^8",1,"^9",143,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",143,"^8",6,"^9",143,"^:",18]],"~$debug",["^ ","^K","~$re-frame.core/debug","^6","re_frame/core.cljc","^7",122,"^8",1,"^9",122,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",122,"^8",6,"^9",122,"^:",11],"^70","^71"],"~$assoc-effect",["^ ","^K","~$re-frame.core/assoc-effect","^6","re_frame/core.cljc","^7",146,"^8",1,"^9",146,"^:",18,"^5",["^ ","^6","re_frame/core.cljc","^7",146,"^8",6,"^9",146,"^:",18]],"~$enqueue",["^ ","^K","~$re-frame.core/enqueue","^6","re_frame/core.cljc","^7",147,"^8",1,"^9",147,"^:",13,"^5",["^ ","^6","re_frame/core.cljc","^7",147,"^8",6,"^9",147,"^:",13]],"~$clear-cofx",["^ ","^K","~$re-frame.core/clear-cofx","^6","re_frame/core.cljc","^7",66,"^8",1,"^9",66,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",66,"^8",6,"^9",66,"^:",16],"^70","^71"],"~$reg-event-ctx",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",104,"^8",7,"^9",104,"^:",20,"^6;",["^1G",["^6<",["^1G",[["^6R","^75"],["^6R","^76","^75"]]]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]]],"^K","~$re-frame.core/reg-event-ctx","^6A",false,"^6","re_frame/core.cljc","^:",20,"^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]],"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",104,"^9",104,"^6E",3,"^6F",true,"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^K","~$re-frame.core/reg-fx","^6","re_frame/core.cljc","^7",60,"^8",1,"^9",60,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",60,"^8",6,"^9",60,"^:",12]],"~$trim-v",["^ ","^K","~$re-frame.core/trim-v","^6","re_frame/core.cljc","^7",125,"^8",1,"^9",125,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",125,"^8",6,"^9",125,"^:",12],"^70","^71"],"~$clear-sub",["^ ","^K","~$re-frame.core/clear-sub","^6","re_frame/core.cljc","^7",48,"^8",1,"^9",48,"^:",15,"^5",["^ ","^6","re_frame/core.cljc","^7",48,"^8",6,"^9",48,"^:",15],"^70","^71"],"~$dispatch",["^ ","^K","~$re-frame.core/dispatch","^6","re_frame/core.cljc","^7",40,"^8",1,"^9",40,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",6,"^9",40,"^:",14]],"~$after",["^ ","^K","~$re-frame.core/after","^6","re_frame/core.cljc","^7",126,"^8",1,"^9",126,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",126,"^8",6,"^9",126,"^:",11]],"~$add-post-event-callback",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",201,"^8",7,"^9",201,"^:",30,"^6;",["^1G",["^6<",["^1G",[["~$f"],["^6R","~$f"]]]]],"^6?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^6M",["^ ","^6A",false,"^6E",2,"^6B",["^1G",[["~$f"],["^6R","~$f"]]],"^6;",["^1G",[["~$f"],["^6R","~$f"]]],"^6D",["^1G",[null,null]]]],"^K","~$re-frame.core/add-post-event-callback","^6A",false,"^6","re_frame/core.cljc","^:",30,"^6M",["^ ","^6A",false,"^6E",2,"^6B",["^1G",[["~$f"],["^6R","~$f"]]],"^6;",["^1G",[["~$f"],["^6R","~$f"]]],"^6D",["^1G",[null,null]]],"^6B",["^1G",[["~$f"],["^6R","~$f"]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",201,"^9",201,"^6E",2,"^6F",true,"^6;",["^1G",[["~$f"],["^6R","~$f"]]],"^6?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^K","~$re-frame.core/reg-cofx","^6","re_frame/core.cljc","^7",64,"^8",1,"^9",64,"^:",14,"^5",["^ ","^6","re_frame/core.cljc","^7",64,"^8",6,"^9",64,"^:",14]],"~$reg-event-fx",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",87,"^8",7,"^9",87,"^:",19,"^6;",["^1G",["^6<",["^1G",[["^6R","^75"],["^6R","^76","^75"]]]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]]],"^K","~$re-frame.core/reg-event-fx","^6A",false,"^6","re_frame/core.cljc","^:",19,"^6M",["^ ","^6A",false,"^6E",3,"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6D",["^1G",[null,null]]],"^6B",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6C",null,"^6D",["^1G",[null,null]],"^8",1,"^7",87,"^9",87,"^6E",3,"^6F",true,"^6;",["^1G",[["^6R","^75"],["^6R","^76","^75"]]],"^6?","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^6:",null,"^5",["^ ","^6","re_frame/core.cljc","^7",229,"^8",7,"^9",229,"^:",23,"^6;",["^1G",["^6<",["^1G",[["~$&","^6L"]]]]],"^6M",["^ ","^6A",true,"^6E",0,"^6B",[["^1G",["^6L"]]],"^6;",["^1G",[["~$&","^6L"]]],"^6D",["^1G",[null]]]],"^K","~$re-frame.core/register-handler","^6A",true,"^6","re_frame/core.cljc","^:",23,"^6M",["^ ","^6A",true,"^6E",0,"^6B",[["^1G",["^6L"]]],"^6;",["^1G",[["~$&","^6L"]]],"^6D",["^1G",[null]]],"^6B",[["^1G",["^6L"]]],"^6C",null,"^6D",["^1G",[null]],"^8",1,"^7",229,"^9",229,"^6E",0,"^6F",true,"^6;",["^1G",[["~$&","^6L"]]]],"~$clear-subscription-cache!",["^ ","^K","~$re-frame.core/clear-subscription-cache!","^6","re_frame/core.cljc","^7",49,"^8",1,"^9",49,"^:",31,"^5",["^ ","^6","re_frame/core.cljc","^7",49,"^8",6,"^9",49,"^:",31]]],"^1E",["^ ","^13","^13"],"~:cljs.analyzer/constants",["^ ","^1?",["^J",["~:warn"]],"~:order",["^87"]],"^1K",["^ ","^1@",["^J",[]]],"^1L",["^ "],"^1M",["^15","^13","^[","^S","^Q","^19","^Z","^W","^17","^11","^12","^X","^1<","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^4C",[["^8;","~:static-fns"],true,["^8;","~:elide-asserts"],true,["^8;","~:optimize-constants"],null,["^8;","~:external-config"],null,["^8;","~:tooling-config"],null,["^8;","~:emit-constants"],null,["^8;","~:infer-externs"],true,["^8;","^1T"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^8;","~:fn-invoke-direct"],null,["^8;","^1V"],null]]]
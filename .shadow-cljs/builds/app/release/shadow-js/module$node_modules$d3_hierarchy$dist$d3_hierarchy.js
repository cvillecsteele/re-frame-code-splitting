["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-hierarchy/dist/d3-hierarchy.js"],"~:js","shadow$provide.module$node_modules$d3_hierarchy$dist$d3_hierarchy=function(P,T,z,J,w){(function(a,c){\"object\"===typeof w&&\"undefined\"!==typeof J?c(w):\"function\"===typeof define&&define.amd?define([\"exports\"],c):c(a.d3=a.d3||{})})(this,function(a){function c(a,c){return a.parent===c.parent?1:2}function p(a,c){return a+c.x}function w(a,c){return Math.max(a,c.y)}function C(a){for(var c;c=a.children;)a=c[0];return a}function x(a){for(var c;c=a.children;)a=c[c.length-1];return a}function q(a){var c=0,\nb=a.children,e=b&&b.length;if(e)for(;0<=--e;)c+=b[e].value;else c=1;a.value=c}function z(a,c){var b=new E(a);a=+a.value&&(b.value=a.value);var e,g=[b],f,l,h,n;for(null==c&&(c=W);e=g.pop();)if(a&&(e.value=+e.data.value),(l=c(e.data))&&(n=l.length))for(e.children=Array(n),h=n-1;0<=h;--h)g.push(f=e.children[h]=new E(l[h])),f.parent=e,f.depth=e.depth+1;return b.eachBefore(k)}function W(a){return a.children}function h(a){a.data=a.data.data}function k(a){var c=0;do a.height=c;while((a=a.parent)&&a.height<\n++c)}function E(a){this.data=a;this.depth=this.height=0;this.parent=null}function J(a){var c=0;a=ta.call(a);for(var b=a.length,e,f;b;)f=Math.random()*b--|0,e=a[b],a[b]=a[f],a[f]=e;b=a.length;e=[];for(var l;c<b;)if(f=a[c],l&&y(l,f))++c;else{a:if(c=e,S(f,c))c=[f];else{for(e=0;e<c.length;++e)if(R(f,c[e])&&S(D(c[e],f),c)){c=[c[e],f];break a}for(e=0;e<c.length-1;++e)for(l=e+1;l<c.length;++l)if(R(D(c[e],c[l]),f)&&R(D(c[e],f),c[l])&&R(D(c[l],f),c[e])&&S(u(c[e],c[l],f),c)){c=[c[e],c[l],f];break a}throw Error();\n}a:{c=e=c;switch(c.length){case 1:c=c[0];c={x:c.x,y:c.y,r:c.r};break a;case 2:c=D(c[0],c[1]);break a;case 3:c=u(c[0],c[1],c[2]);break a}c=void 0}l=c;c=0}return l}function R(a,c){var b=a.r-c.r,e=c.x-a.x;a=c.y-a.y;return 0>b||b*b<e*e+a*a}function y(a,c){var b=a.r-c.r+1E-6,e=c.x-a.x;a=c.y-a.y;return 0<b&&b*b>e*e+a*a}function S(a,c){for(var b=0;b<c.length;++b)if(!y(a,c[b]))return!1;return!0}function D(a,c){var b=a.x,e=a.y;a=a.r;var g=c.x,f=c.y;c=c.r;var l=g-b,h=f-e,k=c-a,n=Math.sqrt(l*l+h*h);return{x:(b+\ng+l/n*k)/2,y:(e+f+h/n*k)/2,r:(n+a+c)/2}}function u(a,c,b){var e=a.x,g=a.y;a=a.r;var f=c.x,l=c.y,h=c.r,k=b.x,n=b.y,t=b.r;b=e-f;c=e-k;var p=g-l,q=g-n,r=h-a,u=t-a,A=e*e+g*g-a*a;l=A-f*f-l*l+h*h;n=A-k*k-n*n+t*t;k=c*p-b*q;f=(p*n-q*l)/(2*k)-e;p=(q*r-p*u)/k;q=(c*l-b*n)/(2*k)-g;b=(b*u-c*r)/k;c=p*p+b*b-1;r=2*(a+f*p+q*b);a=f*f+q*q-a*a;a=-(c?(r+Math.sqrt(r*r-4*c*a))/(2*c):a/r);return{x:e+f+p*a,y:g+q+b*a,r:a}}function f(a,c,b){var e=a.x-c.x,g=a.y-c.y,f=e*e+g*g;if(f){var l=c.r+b.r;l*=l;var h=a.r+b.r;h*=h;if(l>\nh){var k=(f+h-l)/(2*f);l=Math.sqrt(Math.max(0,h/f-k*k));b.x=a.x-k*e-l*g;b.y=a.y-k*g+l*e}else k=(f+l-h)/(2*f),l=Math.sqrt(Math.max(0,l/f-k*k)),b.x=c.x+k*e-l*g,b.y=c.y+k*g+l*e}else b.x=c.x+b.r,b.y=c.y}function I(a,c){var b=a.r+c.r-1E-6,e=c.x-a.x;a=c.y-a.y;return 0<b&&b*b>e*e+a*a}function P(a){var c=a._,b=a.next._,e=c.r+b.r;a=(c.x*b.r+b.x*c.r)/e;c=(c.y*b.r+b.y*c.r)/e;return a*a+c*c}function F(a){this._=a;this.previous=this.next=null}function V(a){if(!(b=a.length))return 0;var c,b;var e=a[0];e.x=0;e.y=\n0;if(!(1<b))return e.r;var l=a[1];e.x=-l.r;l.x=e.r;l.y=0;if(!(2<b))return e.r+l.r;f(l,e,c=a[2]);e=new F(e);l=new F(l);c=new F(c);e.next=c.previous=l;l.next=e.previous=c;c.next=l.previous=e;var h=3;a:for(;h<b;++h){f(e._,l._,c=a[h]);c=new F(c);var k=l.next;var n=e.previous;var t=l._.r;var p=e._.r;do if(t<=p){if(I(k._,c._)){l=k;e.next=l;l.previous=e;--h;continue a}t+=k._.r;k=k.next}else{if(I(n._,c._)){e=n;e.next=l;l.previous=e;--h;continue a}p+=n._.r;n=n.previous}while(k!==n.next);c.previous=e;c.next=\nl;e.next=l.previous=l=c;for(k=P(e);(c=c.next)!==l;)(n=P(c))<k&&(e=c,k=n);l=e.next}e=[l._];for(c=l;(c=c.next)!==l;)e.push(c._);c=J(e);for(h=0;h<b;++h)e=a[h],e.x-=c.x,e.y-=c.y;return c.r}function ba(a){if(\"function\"!==typeof a)throw Error();return a}function T(){return 0}function ca(a){return function(){return a}}function aa(a){return Math.sqrt(a.value)}function K(a){return function(c){c.children||(c.r=Math.max(0,+a(c)||0))}}function G(a,c){return function(b){if(e=b.children){var e,g,f=e.length,l=a(b)*\nc||0;if(l)for(g=0;g<f;++g)e[g].r+=l;var h=V(e);if(l)for(g=0;g<f;++g)e[g].r-=l;b.r=h+l}}}function Y(a){return function(c){var b=c.parent;c.r*=a;b&&(c.x=b.x+a*c.x,c.y=b.y+a*c.y)}}function r(a){a.x0=Math.round(a.x0);a.y0=Math.round(a.y0);a.x1=Math.round(a.x1);a.y1=Math.round(a.y1)}function n(a,c,b,e,f){var g=a.children,l=-1,h=g.length;for(e=a.value&&(e-c)/a.value;++l<h;)a=g[l],a.y0=b,a.y1=f,a.x0=c,a.x1=c+=a.value*e}function ha(a){return a.id}function la(a){return a.parentId}function ia(a,c){return a.parent===\nc.parent?1:2}function A(a){var c=a.children;return c?c[0]:a.t}function N(a){var c=a.children;return c?c[c.length-1]:a.t}function X(a,c){this._=a;this.A=this.children=this.parent=null;this.a=this;this.s=this.c=this.m=this.z=0;this.t=null;this.i=c}function da(a){a=new X(a,0);for(var c,b=[a],e,f,l;c=b.pop();)if(f=c._.children)for(c.children=Array(e=f.length),l=e-1;0<=l;--l)b.push(e=c.children[l]=new X(f[l],l)),e.parent=c;(a.parent=new X(null,0)).children=[a];return a}function pa(a,c,b,e,f){var g=a.children,\nl=-1,h=g.length;for(f=a.value&&(f-b)/a.value;++l<h;)a=g[l],a.x0=c,a.x1=e,a.y0=b,a.y1=b+=a.value*f}function ka(a,c,b,e,f,h){for(var g=[],l=c.children,k,v,t=k=0,p=l.length,q,r=c.value,B,u,A,x,y,N;k<p;){c=f-b;q=h-e;do B=l[t++].value;while(!B&&t<p);u=A=B;N=Math.max(q/c,c/q)/(r*a);x=B*B*N;for(y=Math.max(A/x,x/u);t<p;++t){B+=v=l[t].value;v<u&&(u=v);v>A&&(A=v);x=B*B*N;x=Math.max(A/x,x/u);if(x>y){B-=v;break}y=x}g.push(k={value:B,dice:c<q,children:l.slice(k,t)});k.dice?n(k,b,e,f,r?e+=q*B/r:h):pa(k,b,e,r?b+=\nc*B/r:f,h);r-=B;k=t}return g}E.prototype=z.prototype={constructor:E,count:function(){return this.eachAfter(q)},each:function(a){var c,b=[this],e;do{var f=b.reverse();for(b=[];c=f.pop();)if(a(c),c=c.children){var l=0;for(e=c.length;l<e;++l)b.push(c[l])}}while(b.length);return this},eachAfter:function(a){for(var c,b=[this],e=[],f,l;c=b.pop();)if(e.push(c),c=c.children)for(f=0,l=c.length;f<l;++f)b.push(c[f]);for(;c=e.pop();)a(c);return this},eachBefore:function(a){for(var c,b=[this],e;c=b.pop();)if(a(c),\nc=c.children)for(e=c.length-1;0<=e;--e)b.push(c[e]);return this},sum:function(a){return this.eachAfter(function(c){for(var b=+a(c.data)||0,e=c.children,f=e&&e.length;0<=--f;)b+=e[f].value;c.value=b})},sort:function(a){return this.eachBefore(function(c){c.children&&c.children.sort(a)})},path:function(a){var c=this;var b=c;var e=a;if(b!==e){var f=b.ancestors(),l=e.ancestors(),h=null;b=f.pop();for(e=l.pop();b===e;)h=b,b=f.pop(),e=l.pop();b=h}for(e=[c];c!==b;)c=c.parent,e.push(c);for(c=e.length;a!==b;)e.splice(c,\n0,a),a=a.parent;return e},ancestors:function(){for(var a=this,c=[a];a=a.parent;)c.push(a);return c},descendants:function(){var a=[];this.each(function(c){a.push(c)});return a},leaves:function(){var a=[];this.eachBefore(function(c){c.children||a.push(c)});return a},links:function(){var a=this,c=[];a.each(function(b){b!==a&&c.push({source:b.parent,target:b})});return c},copy:function(){return z(this).eachBefore(h)}};var ta=Array.prototype.slice,qa={depth:-1},wa={};X.prototype=Object.create(E.prototype);\nvar xa=(1+Math.sqrt(5))/2,t=function b(a){function c(b,c,e,f,g){ka(a,b,c,e,f,g)}c.ratio=function(a){return b(1<(a=+a)?a:1)};return c}(xa);xa=function e(a){function b(b,c,e,f,h){if((k=b._squarify)&&k.ratio===a)for(var k,v,t,p=-1,q,r=k.length,u=b.value;++p<r;){b=k[p];v=b.children;t=b.value=0;for(q=v.length;t<q;++t)b.value+=v[t].value;b.dice?n(b,c,e,f,e+=(h-e)*b.value/u):pa(b,c,e,c+=(f-c)*b.value/u,h);u-=b.value}else b._squarify=k=ka(a,b,c,e,f,h),k.ratio=a}b.ratio=function(a){return e(1<(a=+a)?a:1)};\nreturn b}(xa);a.cluster=function(){function a(a){var b,c=0;a.eachAfter(function(a){var f=a.children;if(f){var h=f.reduce(p,0)/f.length;a.x=h;a.y=1+f.reduce(w,0)}else a.x=b?c+=e(a,b):0,a.y=0,b=a});var n=C(a),v=x(a),t=n.x-e(n,v)/2,q=v.x+e(v,n)/2;return a.eachAfter(k?function(b){b.x=(b.x-a.x)*f;b.y=(a.y-b.y)*h}:function(b){b.x=(b.x-t)/(q-t)*f;b.y=(1-(a.y?b.y/a.y:1))*h})}var e=c,f=1,h=1,k=!1;a.separation=function(b){return arguments.length?(e=b,a):e};a.size=function(b){return arguments.length?(k=!1,f=\n+b[0],h=+b[1],a):k?null:[f,h]};a.nodeSize=function(b){return arguments.length?(k=!0,f=+b[0],h=+b[1],a):k?[f,h]:null};return a};a.hierarchy=z;a.pack=function(){function a(a){a.x=f/2;a.y=h/2;c?a.eachBefore(K(c)).eachAfter(G(k,.5)).eachBefore(Y(1)):a.eachBefore(K(aa)).eachAfter(G(T,1)).eachAfter(G(k,a.r/Math.min(f,h))).eachBefore(Y(Math.min(f,h)/(2*a.r)));return a}var c=null,f=1,h=1,k=T;a.radius=function(b){return arguments.length?(c=null==b?null:ba(b),a):c};a.size=function(b){return arguments.length?\n(f=+b[0],h=+b[1],a):[f,h]};a.padding=function(b){return arguments.length?(k=\"function\"===typeof b?b:ca(+b),a):k};return a};a.packSiblings=function(a){V(a);return a};a.packEnclose=J;a.partition=function(){function a(a){var b=a.height+1;a.x0=a.y0=k;a.x1=f;a.y1=h/b;a.eachBefore(c(h,b));t&&a.eachBefore(r);return a}function c(a,b){return function(c){c.children&&n(c,c.x0,a*(c.depth+1)/b,c.x1,a*(c.depth+2)/b);var e=c.x0,f=c.y0,h=c.x1-k,t=c.y1-k;h<e&&(e=h=(e+h)/2);t<f&&(f=t=(f+t)/2);c.x0=e;c.y0=f;c.x1=h;\nc.y1=t}}var f=1,h=1,k=0,t=!1;a.round=function(b){return arguments.length?(t=!!b,a):t};a.size=function(b){return arguments.length?(f=+b[0],h=+b[1],a):[f,h]};a.padding=function(b){return arguments.length?(k=+b,a):k};return a};a.stratify=function(){function a(a){var b,e=a.length,h=Array(e),n,t={};for(b=0;b<e;++b){var v=a[b];var p=h[b]=new E(v);null!=(n=c(v,b,a))&&(n+=\"\")&&(v=\"$\"+(p.id=n),t[v]=v in t?wa:p)}for(b=0;b<e;++b)if(p=h[b],n=f(a[b],b,a),null!=n&&(n+=\"\")){v=t[\"$\"+n];if(!v)throw Error(\"missing: \"+\nn);if(v===wa)throw Error(\"ambiguous: \"+n);v.children?v.children.push(p):v.children=[p];p.parent=v}else{if(q)throw Error(\"multiple roots\");var q=p}if(!q)throw Error(\"no root\");q.parent=qa;q.eachBefore(function(a){a.depth=a.parent.depth+1;--e}).eachBefore(k);q.parent=null;if(0<e)throw Error(\"cycle\");return q}var c=ha,f=la;a.id=function(b){return arguments.length?(c=ba(b),a):c};a.parentId=function(b){return arguments.length?(f=ba(b),a):f};return a};a.tree=function(){function a(a){var b=da(a);b.eachAfter(c);\nb.parent.m=-b.z;b.eachBefore(f);if(p)a.eachBefore(h);else{var e=a,v=a,q=a;a.eachBefore(function(a){a.x<e.x&&(e=a);a.x>v.x&&(v=a);a.depth>q.depth&&(q=a)});b=e===v?1:k(e,v)/2;var r=b-e.x,u=n/(v.x+b+r),A=t/(q.depth||1);a.eachBefore(function(a){a.x=(a.x+r)*u;a.y=a.depth*A})}return a}function c(a){var b=a.children,c=a.parent.children,e=a.i?c[a.i-1]:null;if(b){for(var f=0,h=0,n=a.children,t=n.length,v;0<=--t;)v=n[t],v.z+=f,v.m+=f,f+=v.s+(h+=v.c);b=(b[0].z+b[b.length-1].z)/2;e?(a.z=e.z+k(a._,e._),a.m=a.z-\nb):a.z=b}else e&&(a.z=e.z+k(a._,e._));b=a.parent;c=a.parent.A||c[0];if(e){h=f=a;n=f.parent.children[0];t=f.m;v=h.m;for(var p=e.m,q=n.m,r;e=N(e),f=A(f),e&&f;){n=A(n);h=N(h);h.a=a;r=e.z+p-f.z-t+k(e._,f._);if(0<r){var u=e.a.parent===a.parent?e.a:c,B=a,x=r,y=x/(B.i-u.i);B.c-=y;B.s+=x;u.c+=y;B.z+=x;B.m+=x;t+=r;v+=r}p+=e.m;t+=f.m;q+=n.m;v+=h.m}e&&!N(h)&&(h.t=e,h.m+=p-v);f&&!A(n)&&(n.t=f,n.m+=t-q,c=a)}b.A=c}function f(a){a._.x=a.z+a.parent.m;a.m+=a.parent.m}function h(a){a.x*=n;a.y=a.depth*t}var k=ia,n=\n1,t=1,p=null;a.separation=function(b){return arguments.length?(k=b,a):k};a.size=function(b){return arguments.length?(p=!1,n=+b[0],t=+b[1],a):p?null:[n,t]};a.nodeSize=function(b){return arguments.length?(p=!0,n=+b[0],t=+b[1],a):p?[n,t]:null};return a};a.treemap=function(){function a(a){a.x0=a.y0=0;a.x1=k;a.y1=n;a.eachBefore(c);p=[0];h&&a.eachBefore(r);return a}function c(a){var b=p[a.depth],c=a.x0+b,e=a.y0+b,h=a.x1-b,k=a.y1-b;h<c&&(c=h=(c+h)/2);k<e&&(e=k=(e+k)/2);a.x0=c;a.y0=e;a.x1=h;a.y1=k;a.children&&\n(b=p[a.depth+1]=q(a)/2,c+=y(a)-b,e+=u(a)-b,h-=A(a)-b,k-=x(a)-b,h<c&&(c=h=(c+h)/2),k<e&&(e=k=(e+k)/2),f(a,c,e,h,k))}var f=t,h=!1,k=1,n=1,p=[0],q=T,u=T,A=T,x=T,y=T;a.round=function(b){return arguments.length?(h=!!b,a):h};a.size=function(b){return arguments.length?(k=+b[0],n=+b[1],a):[k,n]};a.tile=function(b){return arguments.length?(f=ba(b),a):f};a.padding=function(b){return arguments.length?a.paddingInner(b).paddingOuter(b):a.paddingInner()};a.paddingInner=function(b){return arguments.length?(q=\"function\"===\ntypeof b?b:ca(+b),a):q};a.paddingOuter=function(b){return arguments.length?a.paddingTop(b).paddingRight(b).paddingBottom(b).paddingLeft(b):a.paddingTop()};a.paddingTop=function(b){return arguments.length?(u=\"function\"===typeof b?b:ca(+b),a):u};a.paddingRight=function(b){return arguments.length?(A=\"function\"===typeof b?b:ca(+b),a):A};a.paddingBottom=function(b){return arguments.length?(x=\"function\"===typeof b?b:ca(+b),a):x};a.paddingLeft=function(b){return arguments.length?(y=\"function\"===typeof b?\nb:ca(+b),a):y};return a};a.treemapBinary=function(a,c,f,h,k){function b(a,c,f,h,k,n,t){if(a>=c-1)a=e[a],a.x0=h,a.y0=k,a.x1=n,a.y1=t;else{for(var v=p[a],q=f/2+v,r=a+1,u=c-1;r<u;){var A=r+u>>>1;p[A]<q?r=A+1:u=A}q-p[r-1]<p[r]-q&&a+1<r&&--r;v=p[r]-v;q=f-v;n-h>t-k?(f=(h*q+n*v)/f,b(a,r,v,h,k,f,t),b(r,c,q,f,k,n,t)):(f=(k*q+t*v)/f,b(a,r,v,h,k,n,f),b(r,c,q,h,f,n,t))}}var e=a.children,n,t=e.length,v,p=Array(t+1);for(p[0]=v=n=0;n<t;++n)p[n+1]=v+=e[n].value;b(0,t,a.value,c,f,h,k)};a.treemapDice=n;a.treemapSlice=\npa;a.treemapSliceDice=function(a,c,f,h,k){(a.depth&1?pa:n)(a,c,f,h,k)};a.treemapSquarify=t;a.treemapResquarify=xa;Object.defineProperty(a,\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_hierarchy$dist$d3_hierarchy\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-hierarchy/ v1.1.8 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nfunction cluster() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n\nfunction count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nfunction node_count() {\n  return this.eachAfter(count);\n}\n\nfunction node_each(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n\nfunction node_eachBefore(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n\nfunction node_eachAfter(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n\nfunction node_sum(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n\nfunction node_sort(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n\nfunction node_path(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n\nfunction node_ancestors() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nfunction node_descendants() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n\nfunction node_leaves() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n\nfunction node_links() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n\nfunction hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nfunction computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nfunction Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n\nvar slice = Array.prototype.slice;\n\nfunction shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nfunction enclose(circles) {\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node$1(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nfunction packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nfunction siblings(circles) {\n  packEnclose(circles);\n  return circles;\n}\n\nfunction optional(f) {\n  return f == null ? null : required(f);\n}\n\nfunction required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n\nfunction constantZero() {\n  return 0;\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nfunction index() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n\nfunction roundNode(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n\nfunction treemapDice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n\nfunction partition() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n\nvar keyPrefix = \"$\", // Protect against keys like “__proto__”.\n    preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nfunction stratify() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var d,\n        i,\n        n = data.length,\n        root,\n        parent,\n        node,\n        nodes = new Array(n),\n        nodeId,\n        nodeKey,\n        nodeByKey = {};\n\n    for (i = 0; i < n; ++i) {\n      d = data[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = keyPrefix + (node.id = nodeId);\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], nodeId = parentId(data[i], i, data);\n      if (nodeId == null || !(nodeId += \"\")) {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      } else {\n        parent = nodeByKey[keyPrefix + nodeId];\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n\nfunction defaultSeparation$1(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nfunction tree() {\n  var separation = defaultSeparation$1,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n\nfunction treemapSlice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n\nvar phi = (1 + Math.sqrt(5)) / 2;\n\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nvar squarify = (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n\nfunction index$1() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n\nfunction binary(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n\nfunction sliceDice(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n}\n\nvar resquarify = (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n\nexports.cluster = cluster;\nexports.hierarchy = hierarchy;\nexports.pack = index;\nexports.packSiblings = siblings;\nexports.packEnclose = enclose;\nexports.partition = partition;\nexports.stratify = stratify;\nexports.tree = tree;\nexports.treemap = index$1;\nexports.treemapBinary = binary;\nexports.treemapDice = treemapDice;\nexports.treemapSlice = treemapSlice;\nexports.treemapSliceDice = sliceDice;\nexports.treemapSquarify = squarify;\nexports.treemapResquarify = resquarify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["parentId","y1","ancestors","z","separation","treemapSlice","s","dice","_squarify","next","treemapSquarify","eachBefore","ratio","treemapBinary","packEnclose","copy","cluster","x1","prototype","height","pack","y0","sum","descendants","parent","children","treemap","x","__esModule","treemapResquarify","radius","path","x0","padding","leaves","partition","id","d3","count","paddingOuter","sort","hierarchy","value","paddingInner","tile","previous","tree","a","treemapDice","_","treemapSliceDice","packSiblings","links","t","i","source","r","eachAfter","y","nodeSize","depth","stratify","each","target","A","size","round","paddingLeft","m","data","c","constructor","paddingBottom","paddingRight","paddingTop"]],"~:compiled-at",1535913515850,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_hierarchy$dist$d3_hierarchy.js\",\n\"lineCount\":27,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-hierarchy/dist/d3-hierarchy.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_hierarchy$dist$d3_hierarchy\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-hierarchy/ v1.1.8 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\\n(factory((global.d3 = global.d3 || {})));\\n}(this, (function (exports) { 'use strict';\\n\\nfunction defaultSeparation(a, b) {\\n  return a.parent === b.parent ? 1 : 2;\\n}\\n\\nfunction meanX(children) {\\n  return children.reduce(meanXReduce, 0) / children.length;\\n}\\n\\nfunction meanXReduce(x, c) {\\n  return x + c.x;\\n}\\n\\nfunction maxY(children) {\\n  return 1 + children.reduce(maxYReduce, 0);\\n}\\n\\nfunction maxYReduce(y, c) {\\n  return Math.max(y, c.y);\\n}\\n\\nfunction leafLeft(node) {\\n  var children;\\n  while (children = node.children) node = children[0];\\n  return node;\\n}\\n\\nfunction leafRight(node) {\\n  var children;\\n  while (children = node.children) node = children[children.length - 1];\\n  return node;\\n}\\n\\nfunction cluster() {\\n  var separation = defaultSeparation,\\n      dx = 1,\\n      dy = 1,\\n      nodeSize = false;\\n\\n  function cluster(root) {\\n    var previousNode,\\n        x = 0;\\n\\n    // First walk, computing the initial x & y values.\\n    root.eachAfter(function(node) {\\n      var children = node.children;\\n      if (children) {\\n        node.x = meanX(children);\\n        node.y = maxY(children);\\n      } else {\\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\\n        node.y = 0;\\n        previousNode = node;\\n      }\\n    });\\n\\n    var left = leafLeft(root),\\n        right = leafRight(root),\\n        x0 = left.x - separation(left, right) / 2,\\n        x1 = right.x + separation(right, left) / 2;\\n\\n    // Second walk, normalizing x & y to the desired size.\\n    return root.eachAfter(nodeSize ? function(node) {\\n      node.x = (node.x - root.x) * dx;\\n      node.y = (root.y - node.y) * dy;\\n    } : function(node) {\\n      node.x = (node.x - x0) / (x1 - x0) * dx;\\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\\n    });\\n  }\\n\\n  cluster.separation = function(x) {\\n    return arguments.length ? (separation = x, cluster) : separation;\\n  };\\n\\n  cluster.size = function(x) {\\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\\n  };\\n\\n  cluster.nodeSize = function(x) {\\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\\n  };\\n\\n  return cluster;\\n}\\n\\nfunction count(node) {\\n  var sum = 0,\\n      children = node.children,\\n      i = children && children.length;\\n  if (!i) sum = 1;\\n  else while (--i >= 0) sum += children[i].value;\\n  node.value = sum;\\n}\\n\\nfunction node_count() {\\n  return this.eachAfter(count);\\n}\\n\\nfunction node_each(callback) {\\n  var node = this, current, next = [node], children, i, n;\\n  do {\\n    current = next.reverse(), next = [];\\n    while (node = current.pop()) {\\n      callback(node), children = node.children;\\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\\n        next.push(children[i]);\\n      }\\n    }\\n  } while (next.length);\\n  return this;\\n}\\n\\nfunction node_eachBefore(callback) {\\n  var node = this, nodes = [node], children, i;\\n  while (node = nodes.pop()) {\\n    callback(node), children = node.children;\\n    if (children) for (i = children.length - 1; i >= 0; --i) {\\n      nodes.push(children[i]);\\n    }\\n  }\\n  return this;\\n}\\n\\nfunction node_eachAfter(callback) {\\n  var node = this, nodes = [node], next = [], children, i, n;\\n  while (node = nodes.pop()) {\\n    next.push(node), children = node.children;\\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\\n      nodes.push(children[i]);\\n    }\\n  }\\n  while (node = next.pop()) {\\n    callback(node);\\n  }\\n  return this;\\n}\\n\\nfunction node_sum(value) {\\n  return this.eachAfter(function(node) {\\n    var sum = +value(node.data) || 0,\\n        children = node.children,\\n        i = children && children.length;\\n    while (--i >= 0) sum += children[i].value;\\n    node.value = sum;\\n  });\\n}\\n\\nfunction node_sort(compare) {\\n  return this.eachBefore(function(node) {\\n    if (node.children) {\\n      node.children.sort(compare);\\n    }\\n  });\\n}\\n\\nfunction node_path(end) {\\n  var start = this,\\n      ancestor = leastCommonAncestor(start, end),\\n      nodes = [start];\\n  while (start !== ancestor) {\\n    start = start.parent;\\n    nodes.push(start);\\n  }\\n  var k = nodes.length;\\n  while (end !== ancestor) {\\n    nodes.splice(k, 0, end);\\n    end = end.parent;\\n  }\\n  return nodes;\\n}\\n\\nfunction leastCommonAncestor(a, b) {\\n  if (a === b) return a;\\n  var aNodes = a.ancestors(),\\n      bNodes = b.ancestors(),\\n      c = null;\\n  a = aNodes.pop();\\n  b = bNodes.pop();\\n  while (a === b) {\\n    c = a;\\n    a = aNodes.pop();\\n    b = bNodes.pop();\\n  }\\n  return c;\\n}\\n\\nfunction node_ancestors() {\\n  var node = this, nodes = [node];\\n  while (node = node.parent) {\\n    nodes.push(node);\\n  }\\n  return nodes;\\n}\\n\\nfunction node_descendants() {\\n  var nodes = [];\\n  this.each(function(node) {\\n    nodes.push(node);\\n  });\\n  return nodes;\\n}\\n\\nfunction node_leaves() {\\n  var leaves = [];\\n  this.eachBefore(function(node) {\\n    if (!node.children) {\\n      leaves.push(node);\\n    }\\n  });\\n  return leaves;\\n}\\n\\nfunction node_links() {\\n  var root = this, links = [];\\n  root.each(function(node) {\\n    if (node !== root) { // Don\\u2019t include the root\\u2019s parent, if any.\\n      links.push({source: node.parent, target: node});\\n    }\\n  });\\n  return links;\\n}\\n\\nfunction hierarchy(data, children) {\\n  var root = new Node(data),\\n      valued = +data.value && (root.value = data.value),\\n      node,\\n      nodes = [root],\\n      child,\\n      childs,\\n      i,\\n      n;\\n\\n  if (children == null) children = defaultChildren;\\n\\n  while (node = nodes.pop()) {\\n    if (valued) node.value = +node.data.value;\\n    if ((childs = children(node.data)) && (n = childs.length)) {\\n      node.children = new Array(n);\\n      for (i = n - 1; i >= 0; --i) {\\n        nodes.push(child = node.children[i] = new Node(childs[i]));\\n        child.parent = node;\\n        child.depth = node.depth + 1;\\n      }\\n    }\\n  }\\n\\n  return root.eachBefore(computeHeight);\\n}\\n\\nfunction node_copy() {\\n  return hierarchy(this).eachBefore(copyData);\\n}\\n\\nfunction defaultChildren(d) {\\n  return d.children;\\n}\\n\\nfunction copyData(node) {\\n  node.data = node.data.data;\\n}\\n\\nfunction computeHeight(node) {\\n  var height = 0;\\n  do node.height = height;\\n  while ((node = node.parent) && (node.height < ++height));\\n}\\n\\nfunction Node(data) {\\n  this.data = data;\\n  this.depth =\\n  this.height = 0;\\n  this.parent = null;\\n}\\n\\nNode.prototype = hierarchy.prototype = {\\n  constructor: Node,\\n  count: node_count,\\n  each: node_each,\\n  eachAfter: node_eachAfter,\\n  eachBefore: node_eachBefore,\\n  sum: node_sum,\\n  sort: node_sort,\\n  path: node_path,\\n  ancestors: node_ancestors,\\n  descendants: node_descendants,\\n  leaves: node_leaves,\\n  links: node_links,\\n  copy: node_copy\\n};\\n\\nvar slice = Array.prototype.slice;\\n\\nfunction shuffle(array) {\\n  var m = array.length,\\n      t,\\n      i;\\n\\n  while (m) {\\n    i = Math.random() * m-- | 0;\\n    t = array[m];\\n    array[m] = array[i];\\n    array[i] = t;\\n  }\\n\\n  return array;\\n}\\n\\nfunction enclose(circles) {\\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\\n\\n  while (i < n) {\\n    p = circles[i];\\n    if (e && enclosesWeak(e, p)) ++i;\\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\\n  }\\n\\n  return e;\\n}\\n\\nfunction extendBasis(B, p) {\\n  var i, j;\\n\\n  if (enclosesWeakAll(p, B)) return [p];\\n\\n  // If we get here then B must have at least one element.\\n  for (i = 0; i < B.length; ++i) {\\n    if (enclosesNot(p, B[i])\\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\\n      return [B[i], p];\\n    }\\n  }\\n\\n  // If we get here then B must have at least two elements.\\n  for (i = 0; i < B.length - 1; ++i) {\\n    for (j = i + 1; j < B.length; ++j) {\\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\\n        return [B[i], B[j], p];\\n      }\\n    }\\n  }\\n\\n  // If we get here then something is very wrong.\\n  throw new Error;\\n}\\n\\nfunction enclosesNot(a, b) {\\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\\n}\\n\\nfunction enclosesWeak(a, b) {\\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\\n}\\n\\nfunction enclosesWeakAll(a, B) {\\n  for (var i = 0; i < B.length; ++i) {\\n    if (!enclosesWeak(a, B[i])) {\\n      return false;\\n    }\\n  }\\n  return true;\\n}\\n\\nfunction encloseBasis(B) {\\n  switch (B.length) {\\n    case 1: return encloseBasis1(B[0]);\\n    case 2: return encloseBasis2(B[0], B[1]);\\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\\n  }\\n}\\n\\nfunction encloseBasis1(a) {\\n  return {\\n    x: a.x,\\n    y: a.y,\\n    r: a.r\\n  };\\n}\\n\\nfunction encloseBasis2(a, b) {\\n  var x1 = a.x, y1 = a.y, r1 = a.r,\\n      x2 = b.x, y2 = b.y, r2 = b.r,\\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\\n      l = Math.sqrt(x21 * x21 + y21 * y21);\\n  return {\\n    x: (x1 + x2 + x21 / l * r21) / 2,\\n    y: (y1 + y2 + y21 / l * r21) / 2,\\n    r: (l + r1 + r2) / 2\\n  };\\n}\\n\\nfunction encloseBasis3(a, b, c) {\\n  var x1 = a.x, y1 = a.y, r1 = a.r,\\n      x2 = b.x, y2 = b.y, r2 = b.r,\\n      x3 = c.x, y3 = c.y, r3 = c.r,\\n      a2 = x1 - x2,\\n      a3 = x1 - x3,\\n      b2 = y1 - y2,\\n      b3 = y1 - y3,\\n      c2 = r2 - r1,\\n      c3 = r3 - r1,\\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\\n      ab = a3 * b2 - a2 * b3,\\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\\n      xb = (b3 * c2 - b2 * c3) / ab,\\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\\n      yb = (a2 * c3 - a3 * c2) / ab,\\n      A = xb * xb + yb * yb - 1,\\n      B = 2 * (r1 + xa * xb + ya * yb),\\n      C = xa * xa + ya * ya - r1 * r1,\\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\\n  return {\\n    x: x1 + xa + xb * r,\\n    y: y1 + ya + yb * r,\\n    r: r\\n  };\\n}\\n\\nfunction place(b, a, c) {\\n  var dx = b.x - a.x, x, a2,\\n      dy = b.y - a.y, y, b2,\\n      d2 = dx * dx + dy * dy;\\n  if (d2) {\\n    a2 = a.r + c.r, a2 *= a2;\\n    b2 = b.r + c.r, b2 *= b2;\\n    if (a2 > b2) {\\n      x = (d2 + b2 - a2) / (2 * d2);\\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\\n      c.x = b.x - x * dx - y * dy;\\n      c.y = b.y - x * dy + y * dx;\\n    } else {\\n      x = (d2 + a2 - b2) / (2 * d2);\\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\\n      c.x = a.x + x * dx - y * dy;\\n      c.y = a.y + x * dy + y * dx;\\n    }\\n  } else {\\n    c.x = a.x + c.r;\\n    c.y = a.y;\\n  }\\n}\\n\\nfunction intersects(a, b) {\\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\\n}\\n\\nfunction score(node) {\\n  var a = node._,\\n      b = node.next._,\\n      ab = a.r + b.r,\\n      dx = (a.x * b.r + b.x * a.r) / ab,\\n      dy = (a.y * b.r + b.y * a.r) / ab;\\n  return dx * dx + dy * dy;\\n}\\n\\nfunction Node$1(circle) {\\n  this._ = circle;\\n  this.next = null;\\n  this.previous = null;\\n}\\n\\nfunction packEnclose(circles) {\\n  if (!(n = circles.length)) return 0;\\n\\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\\n\\n  // Place the first circle.\\n  a = circles[0], a.x = 0, a.y = 0;\\n  if (!(n > 1)) return a.r;\\n\\n  // Place the second circle.\\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\\n  if (!(n > 2)) return a.r + b.r;\\n\\n  // Place the third circle.\\n  place(b, a, c = circles[2]);\\n\\n  // Initialize the front-chain using the first three circles a, b and c.\\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\\n  a.next = c.previous = b;\\n  b.next = a.previous = c;\\n  c.next = b.previous = a;\\n\\n  // Attempt to place each remaining circle\\u2026\\n  pack: for (i = 3; i < n; ++i) {\\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\\n\\n    // Find the closest intersecting circle on the front-chain, if any.\\n    // \\u201cCloseness\\u201d is determined by linear distance along the front-chain.\\n    // \\u201cAhead\\u201d or \\u201cbehind\\u201d is likewise determined by linear distance.\\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\\n    do {\\n      if (sj <= sk) {\\n        if (intersects(j._, c._)) {\\n          b = j, a.next = b, b.previous = a, --i;\\n          continue pack;\\n        }\\n        sj += j._.r, j = j.next;\\n      } else {\\n        if (intersects(k._, c._)) {\\n          a = k, a.next = b, b.previous = a, --i;\\n          continue pack;\\n        }\\n        sk += k._.r, k = k.previous;\\n      }\\n    } while (j !== k.next);\\n\\n    // Success! Insert the new circle c between a and b.\\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\\n\\n    // Compute the new closest circle pair to the centroid.\\n    aa = score(a);\\n    while ((c = c.next) !== b) {\\n      if ((ca = score(c)) < aa) {\\n        a = c, aa = ca;\\n      }\\n    }\\n    b = a.next;\\n  }\\n\\n  // Compute the enclosing circle of the front chain.\\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\\n\\n  // Translate the circles to put the enclosing circle around the origin.\\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\\n\\n  return c.r;\\n}\\n\\nfunction siblings(circles) {\\n  packEnclose(circles);\\n  return circles;\\n}\\n\\nfunction optional(f) {\\n  return f == null ? null : required(f);\\n}\\n\\nfunction required(f) {\\n  if (typeof f !== \\\"function\\\") throw new Error;\\n  return f;\\n}\\n\\nfunction constantZero() {\\n  return 0;\\n}\\n\\nfunction constant(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\\nfunction defaultRadius(d) {\\n  return Math.sqrt(d.value);\\n}\\n\\nfunction index() {\\n  var radius = null,\\n      dx = 1,\\n      dy = 1,\\n      padding = constantZero;\\n\\n  function pack(root) {\\n    root.x = dx / 2, root.y = dy / 2;\\n    if (radius) {\\n      root.eachBefore(radiusLeaf(radius))\\n          .eachAfter(packChildren(padding, 0.5))\\n          .eachBefore(translateChild(1));\\n    } else {\\n      root.eachBefore(radiusLeaf(defaultRadius))\\n          .eachAfter(packChildren(constantZero, 1))\\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\\n    }\\n    return root;\\n  }\\n\\n  pack.radius = function(x) {\\n    return arguments.length ? (radius = optional(x), pack) : radius;\\n  };\\n\\n  pack.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\\n  };\\n\\n  pack.padding = function(x) {\\n    return arguments.length ? (padding = typeof x === \\\"function\\\" ? x : constant(+x), pack) : padding;\\n  };\\n\\n  return pack;\\n}\\n\\nfunction radiusLeaf(radius) {\\n  return function(node) {\\n    if (!node.children) {\\n      node.r = Math.max(0, +radius(node) || 0);\\n    }\\n  };\\n}\\n\\nfunction packChildren(padding, k) {\\n  return function(node) {\\n    if (children = node.children) {\\n      var children,\\n          i,\\n          n = children.length,\\n          r = padding(node) * k || 0,\\n          e;\\n\\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\\n      e = packEnclose(children);\\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\\n      node.r = e + r;\\n    }\\n  };\\n}\\n\\nfunction translateChild(k) {\\n  return function(node) {\\n    var parent = node.parent;\\n    node.r *= k;\\n    if (parent) {\\n      node.x = parent.x + k * node.x;\\n      node.y = parent.y + k * node.y;\\n    }\\n  };\\n}\\n\\nfunction roundNode(node) {\\n  node.x0 = Math.round(node.x0);\\n  node.y0 = Math.round(node.y0);\\n  node.x1 = Math.round(node.x1);\\n  node.y1 = Math.round(node.y1);\\n}\\n\\nfunction treemapDice(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      node,\\n      i = -1,\\n      n = nodes.length,\\n      k = parent.value && (x1 - x0) / parent.value;\\n\\n  while (++i < n) {\\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\\n    node.x0 = x0, node.x1 = x0 += node.value * k;\\n  }\\n}\\n\\nfunction partition() {\\n  var dx = 1,\\n      dy = 1,\\n      padding = 0,\\n      round = false;\\n\\n  function partition(root) {\\n    var n = root.height + 1;\\n    root.x0 =\\n    root.y0 = padding;\\n    root.x1 = dx;\\n    root.y1 = dy / n;\\n    root.eachBefore(positionNode(dy, n));\\n    if (round) root.eachBefore(roundNode);\\n    return root;\\n  }\\n\\n  function positionNode(dy, n) {\\n    return function(node) {\\n      if (node.children) {\\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\\n      }\\n      var x0 = node.x0,\\n          y0 = node.y0,\\n          x1 = node.x1 - padding,\\n          y1 = node.y1 - padding;\\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n      node.x0 = x0;\\n      node.y0 = y0;\\n      node.x1 = x1;\\n      node.y1 = y1;\\n    };\\n  }\\n\\n  partition.round = function(x) {\\n    return arguments.length ? (round = !!x, partition) : round;\\n  };\\n\\n  partition.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\\n  };\\n\\n  partition.padding = function(x) {\\n    return arguments.length ? (padding = +x, partition) : padding;\\n  };\\n\\n  return partition;\\n}\\n\\nvar keyPrefix = \\\"$\\\", // Protect against keys like \\u201c__proto__\\u201d.\\n    preroot = {depth: -1},\\n    ambiguous = {};\\n\\nfunction defaultId(d) {\\n  return d.id;\\n}\\n\\nfunction defaultParentId(d) {\\n  return d.parentId;\\n}\\n\\nfunction stratify() {\\n  var id = defaultId,\\n      parentId = defaultParentId;\\n\\n  function stratify(data) {\\n    var d,\\n        i,\\n        n = data.length,\\n        root,\\n        parent,\\n        node,\\n        nodes = new Array(n),\\n        nodeId,\\n        nodeKey,\\n        nodeByKey = {};\\n\\n    for (i = 0; i < n; ++i) {\\n      d = data[i], node = nodes[i] = new Node(d);\\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \\\"\\\")) {\\n        nodeKey = keyPrefix + (node.id = nodeId);\\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\\n      }\\n    }\\n\\n    for (i = 0; i < n; ++i) {\\n      node = nodes[i], nodeId = parentId(data[i], i, data);\\n      if (nodeId == null || !(nodeId += \\\"\\\")) {\\n        if (root) throw new Error(\\\"multiple roots\\\");\\n        root = node;\\n      } else {\\n        parent = nodeByKey[keyPrefix + nodeId];\\n        if (!parent) throw new Error(\\\"missing: \\\" + nodeId);\\n        if (parent === ambiguous) throw new Error(\\\"ambiguous: \\\" + nodeId);\\n        if (parent.children) parent.children.push(node);\\n        else parent.children = [node];\\n        node.parent = parent;\\n      }\\n    }\\n\\n    if (!root) throw new Error(\\\"no root\\\");\\n    root.parent = preroot;\\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\\n    root.parent = null;\\n    if (n > 0) throw new Error(\\\"cycle\\\");\\n\\n    return root;\\n  }\\n\\n  stratify.id = function(x) {\\n    return arguments.length ? (id = required(x), stratify) : id;\\n  };\\n\\n  stratify.parentId = function(x) {\\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\\n  };\\n\\n  return stratify;\\n}\\n\\nfunction defaultSeparation$1(a, b) {\\n  return a.parent === b.parent ? 1 : 2;\\n}\\n\\n// function radialSeparation(a, b) {\\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\\n// }\\n\\n// This function is used to traverse the left contour of a subtree (or\\n// subforest). It returns the successor of v on this contour. This successor is\\n// either given by the leftmost child of v or by the thread of v. The function\\n// returns null if and only if v is on the highest level of its subtree.\\nfunction nextLeft(v) {\\n  var children = v.children;\\n  return children ? children[0] : v.t;\\n}\\n\\n// This function works analogously to nextLeft.\\nfunction nextRight(v) {\\n  var children = v.children;\\n  return children ? children[children.length - 1] : v.t;\\n}\\n\\n// Shifts the current subtree rooted at w+. This is done by increasing\\n// prelim(w+) and mod(w+) by shift.\\nfunction moveSubtree(wm, wp, shift) {\\n  var change = shift / (wp.i - wm.i);\\n  wp.c -= change;\\n  wp.s += shift;\\n  wm.c += change;\\n  wp.z += shift;\\n  wp.m += shift;\\n}\\n\\n// All other shifts, applied to the smaller subtrees between w- and w+, are\\n// performed by this function. To prepare the shifts, we have to adjust\\n// change(w+), shift(w+), and change(w-).\\nfunction executeShifts(v) {\\n  var shift = 0,\\n      change = 0,\\n      children = v.children,\\n      i = children.length,\\n      w;\\n  while (--i >= 0) {\\n    w = children[i];\\n    w.z += shift;\\n    w.m += shift;\\n    shift += w.s + (change += w.c);\\n  }\\n}\\n\\n// If vi-\\u2019s ancestor is a sibling of v, returns vi-\\u2019s ancestor. Otherwise,\\n// returns the specified (default) ancestor.\\nfunction nextAncestor(vim, v, ancestor) {\\n  return vim.a.parent === v.parent ? vim.a : ancestor;\\n}\\n\\nfunction TreeNode(node, i) {\\n  this._ = node;\\n  this.parent = null;\\n  this.children = null;\\n  this.A = null; // default ancestor\\n  this.a = this; // ancestor\\n  this.z = 0; // prelim\\n  this.m = 0; // mod\\n  this.c = 0; // change\\n  this.s = 0; // shift\\n  this.t = null; // thread\\n  this.i = i; // number\\n}\\n\\nTreeNode.prototype = Object.create(Node.prototype);\\n\\nfunction treeRoot(root) {\\n  var tree = new TreeNode(root, 0),\\n      node,\\n      nodes = [tree],\\n      child,\\n      children,\\n      i,\\n      n;\\n\\n  while (node = nodes.pop()) {\\n    if (children = node._.children) {\\n      node.children = new Array(n = children.length);\\n      for (i = n - 1; i >= 0; --i) {\\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\\n        child.parent = node;\\n      }\\n    }\\n  }\\n\\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\\n  return tree;\\n}\\n\\n// Node-link tree diagram using the Reingold-Tilford \\\"tidy\\\" algorithm\\nfunction tree() {\\n  var separation = defaultSeparation$1,\\n      dx = 1,\\n      dy = 1,\\n      nodeSize = null;\\n\\n  function tree(root) {\\n    var t = treeRoot(root);\\n\\n    // Compute the layout using Buchheim et al.\\u2019s algorithm.\\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\\n    t.eachBefore(secondWalk);\\n\\n    // If a fixed node size is specified, scale x and y.\\n    if (nodeSize) root.eachBefore(sizeNode);\\n\\n    // If a fixed tree size is specified, scale x and y based on the extent.\\n    // Compute the left-most, right-most, and depth-most nodes for extents.\\n    else {\\n      var left = root,\\n          right = root,\\n          bottom = root;\\n      root.eachBefore(function(node) {\\n        if (node.x < left.x) left = node;\\n        if (node.x > right.x) right = node;\\n        if (node.depth > bottom.depth) bottom = node;\\n      });\\n      var s = left === right ? 1 : separation(left, right) / 2,\\n          tx = s - left.x,\\n          kx = dx / (right.x + s + tx),\\n          ky = dy / (bottom.depth || 1);\\n      root.eachBefore(function(node) {\\n        node.x = (node.x + tx) * kx;\\n        node.y = node.depth * ky;\\n      });\\n    }\\n\\n    return root;\\n  }\\n\\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\\n  // applied recursively to the children of v, as well as the function\\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\\n  // node v is placed to the midpoint of its outermost children.\\n  function firstWalk(v) {\\n    var children = v.children,\\n        siblings = v.parent.children,\\n        w = v.i ? siblings[v.i - 1] : null;\\n    if (children) {\\n      executeShifts(v);\\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\\n      if (w) {\\n        v.z = w.z + separation(v._, w._);\\n        v.m = v.z - midpoint;\\n      } else {\\n        v.z = midpoint;\\n      }\\n    } else if (w) {\\n      v.z = w.z + separation(v._, w._);\\n    }\\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\\n  }\\n\\n  // Computes all real x-coordinates by summing up the modifiers recursively.\\n  function secondWalk(v) {\\n    v._.x = v.z + v.parent.m;\\n    v.m += v.parent.m;\\n  }\\n\\n  // The core of the algorithm. Here, a new subtree is combined with the\\n  // previous subtrees. Threads are used to traverse the inside and outside\\n  // contours of the left and right subtree up to the highest common level. The\\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\\n  // superscript o means outside and i means inside, the subscript - means left\\n  // subtree and + means right subtree. For summing up the modifiers along the\\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\\n  // nodes of the inside contours conflict, we compute the left one of the\\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\\n  // Finally, we add a new thread (if necessary).\\n  function apportion(v, w, ancestor) {\\n    if (w) {\\n      var vip = v,\\n          vop = v,\\n          vim = w,\\n          vom = vip.parent.children[0],\\n          sip = vip.m,\\n          sop = vop.m,\\n          sim = vim.m,\\n          som = vom.m,\\n          shift;\\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\\n        vom = nextLeft(vom);\\n        vop = nextRight(vop);\\n        vop.a = v;\\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\\n        if (shift > 0) {\\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\\n          sip += shift;\\n          sop += shift;\\n        }\\n        sim += vim.m;\\n        sip += vip.m;\\n        som += vom.m;\\n        sop += vop.m;\\n      }\\n      if (vim && !nextRight(vop)) {\\n        vop.t = vim;\\n        vop.m += sim - sop;\\n      }\\n      if (vip && !nextLeft(vom)) {\\n        vom.t = vip;\\n        vom.m += sip - som;\\n        ancestor = v;\\n      }\\n    }\\n    return ancestor;\\n  }\\n\\n  function sizeNode(node) {\\n    node.x *= dx;\\n    node.y = node.depth * dy;\\n  }\\n\\n  tree.separation = function(x) {\\n    return arguments.length ? (separation = x, tree) : separation;\\n  };\\n\\n  tree.size = function(x) {\\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\\n  };\\n\\n  tree.nodeSize = function(x) {\\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\\n  };\\n\\n  return tree;\\n}\\n\\nfunction treemapSlice(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      node,\\n      i = -1,\\n      n = nodes.length,\\n      k = parent.value && (y1 - y0) / parent.value;\\n\\n  while (++i < n) {\\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\\n    node.y0 = y0, node.y1 = y0 += node.value * k;\\n  }\\n}\\n\\nvar phi = (1 + Math.sqrt(5)) / 2;\\n\\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\\n  var rows = [],\\n      nodes = parent.children,\\n      row,\\n      nodeValue,\\n      i0 = 0,\\n      i1 = 0,\\n      n = nodes.length,\\n      dx, dy,\\n      value = parent.value,\\n      sumValue,\\n      minValue,\\n      maxValue,\\n      newRatio,\\n      minRatio,\\n      alpha,\\n      beta;\\n\\n  while (i0 < n) {\\n    dx = x1 - x0, dy = y1 - y0;\\n\\n    // Find the next non-empty node.\\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\\n    minValue = maxValue = sumValue;\\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\\n    beta = sumValue * sumValue * alpha;\\n    minRatio = Math.max(maxValue / beta, beta / minValue);\\n\\n    // Keep adding nodes while the aspect ratio maintains or improves.\\n    for (; i1 < n; ++i1) {\\n      sumValue += nodeValue = nodes[i1].value;\\n      if (nodeValue < minValue) minValue = nodeValue;\\n      if (nodeValue > maxValue) maxValue = nodeValue;\\n      beta = sumValue * sumValue * alpha;\\n      newRatio = Math.max(maxValue / beta, beta / minValue);\\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\\n      minRatio = newRatio;\\n    }\\n\\n    // Position and record the row orientation.\\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\\n    value -= sumValue, i0 = i1;\\n  }\\n\\n  return rows;\\n}\\n\\nvar squarify = (function custom(ratio) {\\n\\n  function squarify(parent, x0, y0, x1, y1) {\\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\\n  }\\n\\n  squarify.ratio = function(x) {\\n    return custom((x = +x) > 1 ? x : 1);\\n  };\\n\\n  return squarify;\\n})(phi);\\n\\nfunction index$1() {\\n  var tile = squarify,\\n      round = false,\\n      dx = 1,\\n      dy = 1,\\n      paddingStack = [0],\\n      paddingInner = constantZero,\\n      paddingTop = constantZero,\\n      paddingRight = constantZero,\\n      paddingBottom = constantZero,\\n      paddingLeft = constantZero;\\n\\n  function treemap(root) {\\n    root.x0 =\\n    root.y0 = 0;\\n    root.x1 = dx;\\n    root.y1 = dy;\\n    root.eachBefore(positionNode);\\n    paddingStack = [0];\\n    if (round) root.eachBefore(roundNode);\\n    return root;\\n  }\\n\\n  function positionNode(node) {\\n    var p = paddingStack[node.depth],\\n        x0 = node.x0 + p,\\n        y0 = node.y0 + p,\\n        x1 = node.x1 - p,\\n        y1 = node.y1 - p;\\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n    node.x0 = x0;\\n    node.y0 = y0;\\n    node.x1 = x1;\\n    node.y1 = y1;\\n    if (node.children) {\\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\\n      x0 += paddingLeft(node) - p;\\n      y0 += paddingTop(node) - p;\\n      x1 -= paddingRight(node) - p;\\n      y1 -= paddingBottom(node) - p;\\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\\n      tile(node, x0, y0, x1, y1);\\n    }\\n  }\\n\\n  treemap.round = function(x) {\\n    return arguments.length ? (round = !!x, treemap) : round;\\n  };\\n\\n  treemap.size = function(x) {\\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\\n  };\\n\\n  treemap.tile = function(x) {\\n    return arguments.length ? (tile = required(x), treemap) : tile;\\n  };\\n\\n  treemap.padding = function(x) {\\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\\n  };\\n\\n  treemap.paddingInner = function(x) {\\n    return arguments.length ? (paddingInner = typeof x === \\\"function\\\" ? x : constant(+x), treemap) : paddingInner;\\n  };\\n\\n  treemap.paddingOuter = function(x) {\\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\\n  };\\n\\n  treemap.paddingTop = function(x) {\\n    return arguments.length ? (paddingTop = typeof x === \\\"function\\\" ? x : constant(+x), treemap) : paddingTop;\\n  };\\n\\n  treemap.paddingRight = function(x) {\\n    return arguments.length ? (paddingRight = typeof x === \\\"function\\\" ? x : constant(+x), treemap) : paddingRight;\\n  };\\n\\n  treemap.paddingBottom = function(x) {\\n    return arguments.length ? (paddingBottom = typeof x === \\\"function\\\" ? x : constant(+x), treemap) : paddingBottom;\\n  };\\n\\n  treemap.paddingLeft = function(x) {\\n    return arguments.length ? (paddingLeft = typeof x === \\\"function\\\" ? x : constant(+x), treemap) : paddingLeft;\\n  };\\n\\n  return treemap;\\n}\\n\\nfunction binary(parent, x0, y0, x1, y1) {\\n  var nodes = parent.children,\\n      i, n = nodes.length,\\n      sum, sums = new Array(n + 1);\\n\\n  for (sums[0] = sum = i = 0; i < n; ++i) {\\n    sums[i + 1] = sum += nodes[i].value;\\n  }\\n\\n  partition(0, n, parent.value, x0, y0, x1, y1);\\n\\n  function partition(i, j, value, x0, y0, x1, y1) {\\n    if (i >= j - 1) {\\n      var node = nodes[i];\\n      node.x0 = x0, node.y0 = y0;\\n      node.x1 = x1, node.y1 = y1;\\n      return;\\n    }\\n\\n    var valueOffset = sums[i],\\n        valueTarget = (value / 2) + valueOffset,\\n        k = i + 1,\\n        hi = j - 1;\\n\\n    while (k < hi) {\\n      var mid = k + hi >>> 1;\\n      if (sums[mid] < valueTarget) k = mid + 1;\\n      else hi = mid;\\n    }\\n\\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\\n\\n    var valueLeft = sums[k] - valueOffset,\\n        valueRight = value - valueLeft;\\n\\n    if ((x1 - x0) > (y1 - y0)) {\\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\\n      partition(i, k, valueLeft, x0, y0, xk, y1);\\n      partition(k, j, valueRight, xk, y0, x1, y1);\\n    } else {\\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\\n      partition(i, k, valueLeft, x0, y0, x1, yk);\\n      partition(k, j, valueRight, x0, yk, x1, y1);\\n    }\\n  }\\n}\\n\\nfunction sliceDice(parent, x0, y0, x1, y1) {\\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\\n}\\n\\nvar resquarify = (function custom(ratio) {\\n\\n  function resquarify(parent, x0, y0, x1, y1) {\\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\\n      var rows,\\n          row,\\n          nodes,\\n          i,\\n          j = -1,\\n          n,\\n          m = rows.length,\\n          value = parent.value;\\n\\n      while (++j < m) {\\n        row = rows[j], nodes = row.children;\\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\\n        value -= row.value;\\n      }\\n    } else {\\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\\n      rows.ratio = ratio;\\n    }\\n  }\\n\\n  resquarify.ratio = function(x) {\\n    return custom((x = +x) > 1 ? x : 1);\\n  };\\n\\n  return resquarify;\\n})(phi);\\n\\nexports.cluster = cluster;\\nexports.hierarchy = hierarchy;\\nexports.pack = index;\\nexports.packSiblings = siblings;\\nexports.packEnclose = enclose;\\nexports.partition = partition;\\nexports.stratify = stratify;\\nexports.tree = tree;\\nexports.treemap = index$1;\\nexports.treemapBinary = binary;\\nexports.treemapDice = treemapDice;\\nexports.treemapSlice = treemapSlice;\\nexports.treemapSliceDice = sliceDice;\\nexports.treemapSquarify = squarify;\\nexports.treemapResquarify = resquarify;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"defaultSeparation\",\"a\",\"b\",\"parent\",\"meanXReduce\",\"x\",\"c\",\"maxYReduce\",\"y\",\"Math\",\"max\",\"leafLeft\",\"node\",\"children\",\"leafRight\",\"length\",\"count\",\"sum\",\"i\",\"value\",\"hierarchy\",\"data\",\"root\",\"Node\",\"valued\",\"nodes\",\"child\",\"childs\",\"n\",\"defaultChildren\",\"pop\",\"Array\",\"push\",\"depth\",\"eachBefore\",\"computeHeight\",\"d\",\"copyData\",\"height\",\"enclose\",\"circles\",\"slice\",\"call\",\"m\",\"array\",\"t\",\"random\",\"B\",\"e\",\"p\",\"enclosesWeak\",\"enclosesWeakAll\",\"enclosesNot\",\"encloseBasis2\",\"j\",\"encloseBasis3\",\"Error\",\"r\",\"dr\",\"dx\",\"dy\",\"x1\",\"y1\",\"r1\",\"x2\",\"y2\",\"r2\",\"x21\",\"y21\",\"r21\",\"l\",\"sqrt\",\"x3\",\"y3\",\"r3\",\"a2\",\"a3\",\"b2\",\"b3\",\"c2\",\"c3\",\"d1\",\"d2\",\"ab\",\"xa\",\"xb\",\"ya\",\"yb\",\"A\",\"C\",\"place\",\"intersects\",\"score\",\"_\",\"next\",\"Node$1\",\"circle\",\"previous\",\"packEnclose\",\"k\",\"sj\",\"sk\",\"aa\",\"ca\",\"required\",\"f\",\"constantZero\",\"constant\",\"defaultRadius\",\"radiusLeaf\",\"radius\",\"packChildren\",\"padding\",\"translateChild\",\"roundNode\",\"x0\",\"round\",\"y0\",\"treemapDice\",\"defaultId\",\"id\",\"defaultParentId\",\"parentId\",\"defaultSeparation$1\",\"nextLeft\",\"v\",\"nextRight\",\"TreeNode\",\"s\",\"z\",\"treeRoot\",\"tree\",\"treemapSlice\",\"squarifyRatio\",\"ratio\",\"rows\",\"row\",\"nodeValue\",\"i1\",\"i0\",\"sumValue\",\"minValue\",\"maxValue\",\"newRatio\",\"minRatio\",\"alpha\",\"beta\",\"dice\",\"prototype\",\"constructor\",\"node_count\",\"eachAfter\",\"each\",\"node_each\",\"callback\",\"current\",\"reverse\",\"node_eachAfter\",\"node_eachBefore\",\"node_sum\",\"sort\",\"node_sort\",\"compare\",\"path\",\"node_path\",\"end\",\"start\",\"aNodes\",\"ancestors\",\"bNodes\",\"ancestor\",\"splice\",\"node_ancestors\",\"descendants\",\"node_descendants\",\"leaves\",\"node_leaves\",\"links\",\"node_links\",\"source\",\"target\",\"copy\",\"node_copy\",\"preroot\",\"ambiguous\",\"Object\",\"create\",\"phi\",\"squarify\",\"custom\",\"squarify.ratio\",\"resquarify\",\"_squarify\",\"resquarify.ratio\",\"cluster\",\"previousNode\",\"reduce\",\"separation\",\"left\",\"right\",\"nodeSize\",\"cluster.separation\",\"arguments\",\"size\",\"cluster.size\",\"cluster.nodeSize\",\"pack\",\"index\",\"min\",\"pack.radius\",\"pack.size\",\"pack.padding\",\"packSiblings\",\"siblings\",\"partition\",\"positionNode\",\"partition.round\",\"partition.size\",\"partition.padding\",\"stratify\",\"nodeId\",\"nodeByKey\",\"nodeKey\",\"keyPrefix\",\"stratify.id\",\"stratify.parentId\",\"firstWalk\",\"secondWalk\",\"sizeNode\",\"bottom\",\"tx\",\"kx\",\"ky\",\"w\",\"shift\",\"change\",\"midpoint\",\"vop\",\"vip\",\"vom\",\"sip\",\"sop\",\"sim\",\"vim\",\"som\",\"wp\",\"wm\",\"tree.separation\",\"tree.size\",\"tree.nodeSize\",\"treemap\",\"index$1\",\"paddingStack\",\"paddingInner\",\"paddingLeft\",\"paddingTop\",\"paddingRight\",\"paddingBottom\",\"tile\",\"treemap.round\",\"treemap.size\",\"treemap.tile\",\"treemap.padding\",\"paddingOuter\",\"treemap.paddingInner\",\"treemap.paddingOuter\",\"treemap.paddingTop\",\"treemap.paddingRight\",\"treemap.paddingBottom\",\"treemap.paddingLeft\",\"treemapBinary\",\"binary\",\"valueOffset\",\"sums\",\"valueTarget\",\"hi\",\"mid\",\"valueLeft\",\"valueRight\",\"xk\",\"yk\",\"treemapSliceDice\",\"sliceDice\",\"treemapSquarify\",\"treemapResquarify\",\"defineProperty\"]\n}\n"]
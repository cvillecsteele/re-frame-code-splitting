["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/d3-geo/dist/d3-geo.js"],"~:js","shadow$provide.module$node_modules$d3_geo$dist$d3_geo=function(P,T,z,J,w){(function(a,c){\"object\"===typeof w&&\"undefined\"!==typeof J?c(w,z(\"module$node_modules$d3_array$dist$d3_array\")):\"function\"===typeof define&&define.amd?define([\"exports\",\"d3-array\"],c):c(a.d3=a.d3||{},a.d3)})(this,function(a,c){function p(){this.reset()}function w(a,b,c){var m=a.s=b+c,e=m-b;a.t=b-(m-e)+(c-e)}function C(a){return 1<a?0:-1>a?za:Math.acos(a)}function x(a){return 1<a?Oa:-1>a?-Oa:Math.asin(a)}function q(a){return(a=\nfa(a/2))*a}function H(){}function z(a,b){if(a&&id.hasOwnProperty(a.type))id[a.type](a,b)}function h(a,b,c){var m=-1;c=a.length-c;for(b.lineStart();++m<c;){var e=a[m];b.point(e[0],e[1],e[2])}b.lineEnd()}function k(a,b){var c=-1,m=a.length;for(b.polygonStart();++c<m;)h(a[c],b,1);b.polygonEnd()}function E(a,b){if(a&&hd.hasOwnProperty(a.type))hd[a.type](a,b);else z(a,b)}function J(){Jb.point=y}function R(){S(Md,Nd)}function y(a,b){Jb.point=S;Md=a;Nd=b;a*=oa;b*=oa;kd=a;ld=ja(b=b/2+fd);md=fa(b)}function S(a,\nb){a*=oa;b*=oa;b=b/2+fd;var c=a-kd,m=0<=c?1:-1,e=m*c;c=ja(b);b=fa(b);var g=md*b,f=ld*c+g*ja(e);m=g*m*fa(e);Db.add(Wa(m,f));kd=a;ld=c;md=b}function D(a){return[Wa(a[1],a[0]),x(a[2])]}function u(a){var b=a[0];a=a[1];var c=ja(a);return[c*ja(b),c*fa(b),fa(a)]}function f(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]}function I(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}function P(a,b){a[0]+=b[0];a[1]+=b[1];a[2]+=b[2]}function F(a,b){return[a[0]*b,a[1]*b,a[2]*b]}function V(a){var b=\nRa(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);a[0]/=b;a[1]/=b;a[2]/=b}function ba(a,b){Ob.push(Ya=[La=a,Ma=a]);b<bb&&(bb=b);b>vb&&(vb=b)}function T(a,b){var c=u([a*oa,b*oa]);if(gc){var m=I(gc,c);m=I([m[1],-m[0],0],m);V(m);m=D(m);var e=a-$b,g=0<e?1:-1,f=m[0]*Ja*g;e=180<Ba(e);e^(g*$b<f&&f<g*a)?(m=m[1]*Ja,m>vb&&(vb=m)):(f=(f+360)%360-180,e^(g*$b<f&&f<g*a))?(m=-m[1]*Ja,m<bb&&(bb=m)):(b<bb&&(bb=b),b>vb&&(vb=b));e?a<$b?r(La,a)>r(La,Ma)&&(Ma=a):r(a,Ma)>r(La,Ma)&&(La=a):Ma>=La?(a<La&&(La=a),a>Ma&&(Ma=a)):a>$b?r(La,a)>\nr(La,Ma)&&(Ma=a):r(a,Ma)>r(La,Ma)&&(La=a)}else Ob.push(Ya=[La=a,Ma=a]);b<bb&&(bb=b);b>vb&&(vb=b);gc=c;$b=a}function ca(){Ia.point=T}function aa(){Ya[0]=La;Ya[1]=Ma;Ia.point=ba;gc=null}function K(a,b){if(gc){var c=a-$b;wc.add(180<Ba(c)?c+(0<c?360:-360):c)}else ke=a,Nc=b;Jb.point(a,b);T(a,b)}function G(){Jb.lineStart()}function Y(){K(ke,Nc);Jb.lineEnd();1E-6<Ba(wc)&&(La=-(Ma=180));Ya[0]=La;Ya[1]=Ma;gc=null}function r(a,b){return 0>(b-=a)?b+360:b}function n(a,b){return a[0]-b[0]}function ha(a,b){return a[0]<=\na[1]?a[0]<=b&&b<=a[1]:b<a[0]||a[1]<b}function la(a,b){a*=oa;b*=oa;var c=ja(b);ia(c*ja(a),c*fa(a),fa(b))}function ia(a,b,c){++jb;qc+=(a-qc)/jb;nd+=(b-nd)/jb;Ib+=(c-Ib)/jb}function A(){mb.point=N}function N(a,b){a*=oa;b*=oa;var c=ja(b);cb=c*ja(a);kb=c*fa(a);ib=fa(b);mb.point=X;ia(cb,kb,ib)}function X(a,b){a*=oa;b*=oa;var c=ja(b),e=c*ja(a);a=c*fa(a);b=fa(b);var m=Wa(Ra((m=kb*b-ib*a)*m+(m=ib*e-cb*b)*m+(m=cb*a-kb*e)*m),cb*e+kb*a+ib*b);pc+=m;Sa+=m*(cb+(cb=e));ac+=m*(kb+(kb=a));Pb+=m*(ib+(ib=b));ia(cb,kb,\nib)}function da(){mb.point=la}function pa(){mb.point=ta}function ka(){qa(yc,le);mb.point=la}function ta(a,b){yc=a;le=b;a*=oa;b*=oa;mb.point=qa;var c=ja(b);cb=c*ja(a);kb=c*fa(a);ib=fa(b);ia(cb,kb,ib)}function qa(a,b){a*=oa;b*=oa;var c=ja(b),e=c*ja(a);a=c*fa(a);b=fa(b);c=kb*b-ib*a;var m=ib*e-cb*b,g=cb*a-kb*e,f=Ra(c*c+m*m+g*g),l=x(f);f=f&&-l/f;bc+=f*c;xc+=f*m;Qb+=f*g;pc+=l;Sa+=l*(cb+(cb=e));ac+=l*(kb+(kb=a));Pb+=l*(ib+(ib=b));ia(cb,kb,ib)}function wa(a){return function(){return a}}function xa(a,b){function c(c,\ne){return c=a(c,e),b(c[0],c[1])}a.invert&&b.invert&&(c.invert=function(c,e){return c=b.invert(c,e),c&&a.invert(c[0],c[1])});return c}function t(a,b){return[a>za?a-ub:a<-za?a+ub:a,b]}function l(a,c,g){return(a%=ub)?c||g?xa(b(a),e(c,g)):b(a):c||g?e(c,g):t}function g(a){return function(b,c){return b+=a,[b>za?b-ub:b<-za?b+ub:b,c]}}function b(a){var b=g(a);b.invert=g(-a);return b}function e(a,b){function c(a,b){var c=ja(b),l=ja(a)*c;a=fa(a)*c;b=fa(b);c=b*e+l*m;return[Wa(a*g-c*f,l*e-b*m),x(c*g+a*f)]}var e=\nja(a),m=fa(a),g=ja(b),f=fa(b);c.invert=function(a,b){var c=ja(b),l=ja(a)*c;a=fa(a)*c;b=fa(b);c=b*g-a*f;return[Wa(a*g+b*f,l*e+c*m),x(c*e-l*m)]};return c}function v(a){function b(b){b=a(b[0]*oa,b[1]*oa);return b[0]*=Ja,b[1]*=Ja,b}a=l(a[0]*oa,a[1]*oa,2<a.length?a[2]*oa:0);b.invert=function(b){b=a.invert(b[0]*oa,b[1]*oa);return b[0]*=Ja,b[1]*=Ja,b};return b}function B(a,b,c,e,g,f){if(c){var m=ja(b),l=fa(b);c*=e;if(null==g)g=b+e*ub,f=b-c/2;else if(g=L(m,g),f=L(m,f),0<e?g<f:g>f)g+=e*ub;for(;0<e?g>f:g<f;g-=\nc)b=D([m,-l*ja(g),-l*fa(g)]),a.point(b[0],b[1])}}function L(a,b){b=u(b);b[0]-=a;V(b);a=C(-b[1]);return((0>-b[2]?-a:a)+ub-1E-6)%ub}function U(){var a=[],b;return{point:function(a,c){b.push([a,c])},lineStart:function(){a.push(b=[])},lineEnd:H,rejoin:function(){1<a.length&&a.push(a.pop().concat(a.shift()))},result:function(){var c=a;a=[];b=null;return c}}}function Fa(a,b){return 1E-6>Ba(a[0]-b[0])&&1E-6>Ba(a[1]-b[1])}function Ga(a,b,c,e){this.x=a;this.z=b;this.o=c;this.e=e;this.v=!1;this.n=this.p=null}\nfunction Da(a,b,c,e,g){var m=[],f=[];a.forEach(function(a){if(!(0>=(b=a.length-1))){var b,c=a[0],e=a[b];if(Fa(c,e)){g.lineStart();for(l=0;l<b;++l)g.point((c=a[l])[0],c[1]);g.lineEnd()}else m.push(b=new Ga(c,a,null,!0)),f.push(b.o=new Ga(c,null,b,!1)),m.push(b=new Ga(e,a,null,!1)),f.push(b.o=new Ga(e,null,b,!0))}});if(m.length){f.sort(b);Ha(m);Ha(f);var l=0;for(a=f.length;l<a;++l)f[l].e=c=!c;c=m[0];for(var h;;){for(var k=c,v=!0;k.v;)if((k=k.n)===c)return;b=k.z;g.lineStart();do{k.v=k.o.v=!0;if(k.e){if(v)for(l=\n0,a=b.length;l<a;++l)g.point((h=b[l])[0],h[1]);else e(k.x,k.n.x,1,g);k=k.n}else{if(v)for(b=k.p.z,l=b.length-1;0<=l;--l)g.point((h=b[l])[0],h[1]);else e(k.x,k.p.x,-1,g);k=k.p}k=k.o;b=k.z;v=!v}while(!k.v);g.lineEnd()}}}function Ha(a){if(b=a.length){for(var b,c=0,e=a[0],m;++c<b;)e.n=m=a[c],m.p=e,e=m;e.n=m=a[0];m.p=e}}function Ca(a,b){var c=b[0];b=b[1];var e=fa(b),m=[fa(c),-ja(c),0],g=0,f=0;Oc.reset();1===e?b=Oa+1E-6:-1===e&&(b=-Oa-1E-6);e=0;for(var l=a.length;e<l;++e)if(k=(h=a[e]).length){var h,k,v=\nh[k-1],n=v[0],t=v[1]/2+fd,B=fa(t),M=ja(t);for(t=0;t<k;++t,n=q,B=r,M=ea,v=p){var p=h[t],q=p[0];ea=p[1]/2+fd;var r=fa(ea),ea=ja(ea),A=q-n,L=0<=A?1:-1,U=L*A,Qa=U>za;B*=r;Oc.add(Wa(B*L*fa(U),M*ea+B*ja(U)));g+=Qa?A+L*ub:A;Qa^n>=c^q>=c&&(v=I(u(v),u(p)),V(v),n=I(m,v),V(n),n=(Qa^0<=A?-1:1)*x(n[2]),b>n||b===n&&(v[0]||v[1]))&&(f+=Qa^0<=A?1:-1)}}return(-1E-6>g||1E-6>g&&-1E-6>Oc)^f&1}function ra(a,b,e,g){return function(m){function f(b,c){a(b,c)&&m.point(b,c)}function l(a,b){B.point(a,b)}function h(){A.point=\nl;B.lineStart()}function k(){A.point=f;B.lineEnd()}function v(a,b){u.push([a,b]);M.point(a,b)}function n(){M.lineStart();u=[]}function t(){v(u[0][0],u[0][1]);M.lineEnd();var a=M.clean(),b=p.result(),c=b.length,e;u.pop();r.push(u);u=null;if(c)if(a&1){if(c=b[0],0<(b=c.length-1)){q||(m.polygonStart(),q=!0);m.lineStart();for(a=0;a<b;++a)m.point((e=c[a])[0],e[1]);m.lineEnd()}}else 1<c&&a&2&&b.push(b.pop().concat(b.shift())),ea.push(b.filter(ua))}var B=b(m),p=U(),M=b(p),q=!1,r,ea,u,A={point:f,lineStart:h,\nlineEnd:k,polygonStart:function(){A.point=v;A.lineStart=n;A.lineEnd=t;ea=[];r=[]},polygonEnd:function(){A.point=f;A.lineStart=h;A.lineEnd=k;ea=c.merge(ea);var a=Ca(r,g);ea.length?(q||(m.polygonStart(),q=!0),Da(ea,Ua,a,e,m)):a&&(q||(m.polygonStart(),q=!0),m.lineStart(),e(null,null,1,m),m.lineEnd());q&&(m.polygonEnd(),q=!1);ea=r=null},sphere:function(){m.polygonStart();m.lineStart();e(null,null,1,m);m.lineEnd();m.polygonEnd()}};return A}}function ua(a){return 1<a.length}function Ua(a,b){return(0>(a=\na.x)[0]?a[1]-Oa-1E-6:Oa-a[1])-(0>(b=b.x)[0]?b[1]-Oa-1E-6:Oa-b[1])}function Mb(a){function b(a,b){return ja(a)*ja(b)>m}function c(a,b,c){var e=u(a),g=u(b),l=[1,0,0];g=I(e,g);var h=f(g,g);e=g[0];var k=h-e*e;if(!k)return!c&&a;h=m*h/k;k=-m*e/k;e=I(l,g);l=F(l,h);g=F(g,k);P(l,g);g=f(l,e);h=f(e,e);k=g*g-h*(f(l,l)-1);if(!(0>k)){var v=Ra(k);k=F(e,(-g-v)/h);P(k,l);k=D(k);if(!c)return k;c=a[0];var n=b[0];a=a[1];b=b[1];if(n<c){var t=c;c=n;n=t}var B=n-c,p=1E-6>Ba(B-za);!p&&b<a&&(t=a,a=b,b=t);if(p||1E-6>B?p?0<\na+b^k[1]<(1E-6>Ba(k[0]-c)?a:b):a<=k[1]&&k[1]<=b:B>za^(c<=k[0]&&k[0]<=n))return b=F(e,(-g+v)/h),P(b,l),[k,D(b)]}}function e(b,c){var e=l?a:za-a,m=0;b<-e?m|=1:b>e&&(m|=2);c<-e?m|=4:c>e&&(m|=8);return m}var m=ja(a),g=6*oa,l=0<m,h=1E-6<Ba(m);return ra(b,function(a){var m,g,f,k,v;return{lineStart:function(){k=f=!1;v=1},point:function(n,t){var B=[n,t],p=b(n,t);t=l?p?0:e(n,t):p?e(n+(0>n?za:-za),t):0;!m&&(k=f=p)&&a.lineStart();p!==f&&(n=c(m,B),!n||Fa(m,n)||Fa(B,n))&&(B[0]+=1E-6,B[1]+=1E-6,p=b(B[0],B[1]));\nif(p!==f)v=0,p?(a.lineStart(),n=c(B,m),a.point(n[0],n[1])):(n=c(m,B),a.point(n[0],n[1]),a.lineEnd()),m=n;else if(h&&m&&l^p){var M;t&g||!(M=c(B,m,!0))||(v=0,l?(a.lineStart(),a.point(M[0][0],M[0][1]),a.point(M[1][0],M[1][1]),a.lineEnd()):(a.point(M[1][0],M[1][1]),a.lineEnd(),a.lineStart(),a.point(M[0][0],M[0][1])))}!p||m&&Fa(m,B)||a.point(B[0],B[1]);m=B;f=p;g=t},lineEnd:function(){f&&a.lineEnd();m=null},clean:function(){return v|(k&&f)<<1}}},function(b,c,e,m){B(m,a,g,e,b,c)},l?[0,-a]:[-za,a-za])}function eb(a,\nb,c,e,g,f){var m=a[0],l=a[1],h=0,k=1,v=b[0]-m,n=b[1]-l;c-=m;if(v||!(0<c)){c/=v;if(0>v){if(c<h)return;c<k&&(k=c)}else if(0<v){if(c>k)return;c>h&&(h=c)}c=g-m;if(v||!(0>c)){c/=v;if(0>v){if(c>k)return;c>h&&(h=c)}else if(0<v){if(c<h)return;c<k&&(k=c)}c=e-l;if(n||!(0<c)){c/=n;if(0>n){if(c<h)return;c<k&&(k=c)}else if(0<n){if(c>k)return;c>h&&(h=c)}c=f-l;if(n||!(0>c)){c/=n;if(0>n){if(c>k)return;c>h&&(h=c)}else if(0<n){if(c<h)return;c<k&&(k=c)}0<h&&(a[0]=m+h*v,a[1]=l+h*n);1>k&&(b[0]=m+k*v,b[1]=l+k*n);return!0}}}}}\nfunction Pa(a,b,e,g){function m(c,m,l,k){var v=0,n=0;if(null==c||(v=f(c,l))!==(n=f(m,l))||0>h(c,m)^0<l){do k.point(0===v||3===v?a:e,1<v?g:b);while((v=(v+l+4)%4)!==n)}else k.point(m[0],m[1])}function f(c,m){return 1E-6>Ba(c[0]-a)?0<m?0:3:1E-6>Ba(c[0]-e)?0<m?2:1:1E-6>Ba(c[1]-b)?0<m?1:0:0<m?3:2}function l(a,b){return h(a.x,b.x)}function h(a,b){var c=f(a,1),e=f(b,1);return c!==e?c-e:0===c?b[1]-a[1]:1===c?a[0]-b[0]:2===c?a[1]-b[1]:b[0]-a[0]}return function(f){function h(c,m){a<=c&&c<=e&&b<=m&&m<=g&&v.point(c,\nm)}function k(c,m){var f=a<=c&&c<=e&&b<=m&&m<=g;B&&p.push([c,m]);if(L)M=c,q=m,ea=f,L=!1,f&&(v.lineStart(),v.point(c,m));else if(f&&A)v.point(c,m);else{var l=[r=Math.max(-1E9,Math.min(1E9,r)),u=Math.max(-1E9,Math.min(1E9,u))],h=[c=Math.max(-1E9,Math.min(1E9,c)),m=Math.max(-1E9,Math.min(1E9,m))];eb(l,h,a,b,e,g)?(A||(v.lineStart(),v.point(l[0],l[1])),v.point(h[0],h[1]),f||v.lineEnd(),x=!1):f&&(v.lineStart(),v.point(c,m),x=!1)}r=c;u=m;A=f}var v=f,n=U(),t,B,p,M,q,ea,r,u,A,L,x,Qa={point:h,lineStart:function(){Qa.point=\nk;B&&B.push(p=[]);L=!0;A=!1;r=u=NaN},lineEnd:function(){t&&(k(M,q),ea&&A&&n.rejoin(),t.push(n.result()));Qa.point=h;A&&v.lineEnd()},polygonStart:function(){v=n;t=[];B=[];x=!0},polygonEnd:function(){for(var b,e=b=0,h=B.length;e<h;++e){var k=B[e],n=1,M=k.length,q=k[0],r=q[0];for(q=q[1];n<M;++n){var u=r;var ea=q;q=k[n];r=q[0];q=q[1];ea<=g?q>g&&(r-u)*(g-ea)>(q-ea)*(a-u)&&++b:q<=g&&(r-u)*(g-ea)<(q-ea)*(a-u)&&--b}}e=x&&b;h=(t=c.merge(t)).length;if(e||h)f.polygonStart(),e&&(f.lineStart(),m(null,null,1,f),\nf.lineEnd()),h&&Da(t,l,b,m,f),f.polygonEnd();v=f;t=B=p=null}};return Qa}}function ob(){uc.point=uc.lineEnd=H}function fb(a,b){a*=oa;b*=oa;zb=a;Vb=fa(b);hc=ja(b);uc.point=pb}function pb(a,b){a*=oa;b*=oa;var c=fa(b);b=ja(b);var e=Ba(a-zb),m=ja(e);e=fa(e);e*=b;var g=hc*c-Vb*b*m;m=Vb*c+hc*b*m;od.add(Wa(Ra(e*e+g*g),m));zb=a;Vb=c;hc=b}function Ta(a){od.reset();E(a,uc);return+od}function Va(a,b){zc[0]=a;zc[1]=b;return Ta(xb)}function Aa(a,b){return a&&me.hasOwnProperty(a.type)?me[a.type](a,b):!1}function ya(a,\nb){var c=Va(a[0],a[1]),e=Va(a[0],b);a=Va(b,a[1]);return e+a<=c+1E-6}function Na(a,b){return!!Ca(a.map(Ka),gb(b))}function Ka(a){return a=a.map(gb),a.pop(),a}function gb(a){return[a[0]*oa,a[1]*oa]}function rb(a,b,e){var m=c.range(a,b-1E-6,e).concat(b);return function(a){return m.map(function(b){return[a,b]})}}function Za(a,b,e){var m=c.range(a,b-1E-6,e).concat(b);return function(a){return m.map(function(b){return[b,a]})}}function Ab(){function a(){return{type:\"MultiLineString\",coordinates:b()}}function b(){return c.range(tc(l/\np)*p,f,p).map(ea).concat(c.range(tc(n/q)*q,v,q).map(A)).concat(c.range(tc(g/t)*t,e,t).filter(function(a){return 1E-6<Ba(a%p)}).map(r)).concat(c.range(tc(k/B)*B,h,B).filter(function(a){return 1E-6<Ba(a%q)}).map(u))}var e,g,f,l,h,k,v,n,t=10,B=t,p=90,q=360,r,u,ea,A,L=2.5;a.lines=function(){return b().map(function(a){return{type:\"LineString\",coordinates:a}})};a.outline=function(){return{type:\"Polygon\",coordinates:[ea(l).concat(A(v).slice(1),ea(f).reverse().slice(1),A(n).reverse().slice(1))]}};a.extent=\nfunction(b){return arguments.length?a.extentMajor(b).extentMinor(b):a.extentMinor()};a.extentMajor=function(b){if(!arguments.length)return[[l,n],[f,v]];l=+b[0][0];f=+b[1][0];n=+b[0][1];v=+b[1][1];l>f&&(b=l,l=f,f=b);n>v&&(b=n,n=v,v=b);return a.precision(L)};a.extentMinor=function(b){if(!arguments.length)return[[g,k],[e,h]];g=+b[0][0];e=+b[1][0];k=+b[0][1];h=+b[1][1];g>e&&(b=g,g=e,e=b);k>h&&(b=k,k=h,h=b);return a.precision(L)};a.step=function(b){return arguments.length?a.stepMajor(b).stepMinor(b):a.stepMinor()};\na.stepMajor=function(b){if(!arguments.length)return[p,q];p=+b[0];q=+b[1];return a};a.stepMinor=function(b){if(!arguments.length)return[t,B];t=+b[0];B=+b[1];return a};a.precision=function(b){if(!arguments.length)return L;L=+b;r=rb(k,h,90);u=Za(g,e,L);ea=rb(n,v,90);A=Za(l,f,L);return a};return a.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function $a(a){return a}function Tc(){Kb.point=Cc}function Cc(a,b){Kb.point=dc;$d=ic=a;Sc=Td=b}function dc(a,\nb){Sd.add(Td*a-ic*b);ic=a;Td=b}function ab(){dc($d,Sc)}function Gb(a,b){kc+=a;qd+=b;++Lb}function Dc(){Xa.point=Ec}function Ec(a,b){Xa.point=Uc;Gb(Fb=a,nb=b)}function Uc(a,b){var c=a-Fb,e=b-nb;c=Ra(c*c+e*e);Sb+=c*(Fb+a)/2;rd+=c*(nb+b)/2;Wb+=c;Gb(Fb=a,nb=b)}function Vc(){Xa.point=Gb}function nc(){Xa.point=ud}function Wc(){oc(Jc,td)}function ud(a,b){Xa.point=oc;Gb(Jc=Fb=a,td=nb=b)}function oc(a,b){var c=a-Fb,e=b-nb;c=Ra(c*c+e*e);Sb+=c*(Fb+a)/2;rd+=c*(nb+b)/2;Wb+=c;c=nb*a-Fb*b;sd+=c*(Fb+a);Kc+=c*(nb+\nb);wb+=3*c;Gb(Fb=a,nb=b)}function Ea(a){this._context=a}function Xb(a,b){Ac.point=ea;fe=mc=a;ee=lc=b}function ea(a,b){mc-=a;lc-=b;yd.add(Ra(mc*mc+lc*lc));mc=a;lc=b}function lb(){this._string=[]}function Tb(a){return\"m0,\"+a+\"a\"+a+\",\"+a+\" 0 1,1 0,\"+-2*a+\"a\"+a+\",\"+a+\" 0 1,1 0,\"+2*a+\"z\"}function Bb(a){return function(b){var c=new sb,e;for(e in a)c[e]=a[e];c.stream=b;return c}}function sb(){}function tb(a,b,c){var e=a.clipExtent&&a.clipExtent();a.scale(150).translate([0,0]);null!=e&&a.clipExtent(null);\nE(c,a.stream(pd));b(pd.result());null!=e&&a.clipExtent(e);return a}function Hb(a,b,c){return tb(a,function(c){var e=b[1][0]-b[0][0],m=b[1][1]-b[0][1],g=Math.min(e/(c[1][0]-c[0][0]),m/(c[1][1]-c[0][1]));e=+b[0][0]+(e-g*(c[1][0]+c[0][0]))/2;c=+b[0][1]+(m-g*(c[1][1]+c[0][1]))/2;a.scale(150*g).translate([e,c])},c)}function Qa(a,b,c){return tb(a,function(c){var e=+b,m=e/(c[1][0]-c[0][0]);e=(e-m*(c[1][0]+c[0][0]))/2;c=-m*c[0][1];a.scale(150*m).translate([e,c])},c)}function yb(a,b,c){return tb(a,function(c){var e=\n+b,m=e/(c[1][1]-c[0][1]),g=-m*c[0][0];c=(e-m*(c[1][1]+c[0][1]))/2;a.scale(150*m).translate([g,c])},c)}function Nb(a){return Bb({point:function(b,c){b=a(b,c);this.stream.point(b[0],b[1])}})}function Fc(a,b){function c(e,m,g,f,l,h,k,v,n,t,B,p,q,ea){var r=k-e,u=v-m,A=r*r+u*u;if(A>4*b&&q--){var L=f+t,M=l+B,U=h+p,Qa=Ra(L*L+M*M+U*U),y=x(U/=Qa),N=1E-6>Ba(Ba(U)-1)||1E-6>Ba(g-n)?(g+n)/2:Wa(M,L),w=a(N,y);y=w[0];w=w[1];var ra=y-e,lb=w-m,Ca=u*ra-r*lb;if(Ca*Ca/A>b||.3<Ba((r*ra+u*lb)/A-.5)||f*t+l*B+h*p<be)c(e,\nm,g,f,l,h,y,w,N,L/=Qa,M/=Qa,U,q,ea),ea.point(y,w),c(y,w,N,L,M,U,k,v,n,t,B,p,q,ea)}}return function(b){function e(c,e){c=a(c,e);b.point(c[0],c[1])}function m(){r=NaN;x.point=g;b.lineStart()}function g(e,m){var g=u([e,m]);m=a(e,m);c(r,A,ea,L,M,U,r=m[0],A=m[1],ea=e,L=g[0],M=g[1],U=g[2],16,b);b.point(r,A)}function f(){x.point=e;b.lineEnd()}function l(){m();x.point=h;x.lineEnd=k}function h(a,b){g(v=a,b);n=r;t=A;B=L;p=M;q=U;x.point=g}function k(){c(r,A,ea,L,M,U,n,t,v,B,p,q,16,b);x.lineEnd=f;f()}var v,n,\nt,B,p,q,ea,r,A,L,M,U,x={point:e,lineStart:m,lineEnd:f,polygonStart:function(){b.polygonStart();x.lineStart=l},polygonEnd:function(){b.polygonEnd();x.lineStart=m}};return x}}function xd(a){return Bb({point:function(b,c){b=a(b,c);return this.stream.point(b[0],b[1])}})}function Zc(a,b,c){function e(e,m){return[b+a*e,c-a*m]}e.invert=function(e,m){return[(e-b)/a,(c-m)/a]};return e}function $c(a,b,c,e){function m(a,e){return[f*a-l*e+b,c-l*a-f*e]}var g=ja(e);e=fa(e);var f=g*a,l=e*a,h=g/a,k=e/a,v=(e*c-g*\nb)/a,n=(e*b+g*c)/a;m.invert=function(a,b){return[h*a-k*b+v,n-k*a-h*b]};return m}function Cb(a){return ad(function(){return a})()}function ad(a){function b(a){return lb(a[0]*oa,a[1]*oa)}function c(a){return(a=lb.invert(a[0],a[1]))&&[a[0]*Ja,a[1]*Ja]}function e(){var a=$c(f,0,0,r).apply(null,m(v,n));a=(r?$c:Zc)(f,h-a[0],k-a[1],r);q=l(t,B,p);ra=xa(m,a);lb=xa(q,ra);a=ra;w=+N?Fc(a,N):Nb(a);return g()}function g(){Ca=C=null;return b}var m,f=150,h=480,k=250,v=0,n=0,t=0,B=0,p=0,q,r=0,ea=null,u=Pd,A=null,\nL,U,x,y=$a,N=.5,w,ra,lb,Ca,C;b.stream=function(a){return Ca&&C===a?Ca:Ca=ae(xd(q)(u(w(y(C=a)))))};b.preclip=function(a){return arguments.length?(u=a,ea=void 0,g()):u};b.postclip=function(a){return arguments.length?(y=a,A=L=U=x=null,g()):y};b.clipAngle=function(a){return arguments.length?(u=+a?Mb(ea=a*oa):(ea=null,Pd),g()):ea*Ja};b.clipExtent=function(a){return arguments.length?(y=null==a?(A=L=U=x=null,$a):Pa(A=+a[0][0],L=+a[0][1],U=+a[1][0],x=+a[1][1]),g()):null==A?null:[[A,L],[U,x]]};b.scale=function(a){return arguments.length?\n(f=+a,e()):f};b.translate=function(a){return arguments.length?(h=+a[0],k=+a[1],e()):[h,k]};b.center=function(a){return arguments.length?(v=a[0]%360*oa,n=a[1]%360*oa,e()):[v*Ja,n*Ja]};b.rotate=function(a){return arguments.length?(t=a[0]%360*oa,B=a[1]%360*oa,p=2<a.length?a[2]%360*oa:0,e()):[t*Ja,B*Ja,p*Ja]};b.angle=function(a){return arguments.length?(r=a%360*oa,e()):r*Ja};b.precision=function(a){if(arguments.length){var b=ra;var c=N=a*a;b=(w=+c?Fc(b,c):Nb(b),g())}else b=Ra(N);return b};b.fitExtent=\nfunction(a,c){return Hb(b,a,c)};b.fitSize=function(a,c){return Hb(b,[[0,0],a],c)};b.fitWidth=function(a,c){return Qa(b,a,c)};b.fitHeight=function(a,c){return yb(b,a,c)};return function(){m=a.apply(this,arguments);b.invert=m.invert&&c;return e()}}function Ad(a){var b=0,c=za/3,e=ad(a);a=e(b,c);a.parallels=function(a){return arguments.length?e(b=a[0]*oa,c=a[1]*oa):[b*Ja,c*Ja]};return a}function ge(a){function b(a,b){return[a*c,fa(b)/c]}var c=ja(a);b.invert=function(a,b){return[a/c,x(b*c)]};return b}\nfunction Bd(a,b){function c(a,b){b=Ra(m-2*g*fa(b))/g;return[b*fa(a*=g),f-b*ja(a)]}var e=fa(a),g=(e+fa(b))/2;if(1E-6>Ba(g))return ge(a);var m=1+e*(2*g-e),f=Ra(m)/g;c.invert=function(a,b){b=f-b;return[Wa(a,Ba(b))/g*ec(b),x((m-(a*a+b*b)*g*g)/(2*g))]};return c}function Gc(){return Ad(Bd).scale(155.424).center([0,33.6442])}function Hc(){return Gc().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Cd(a){var b=a.length;return{point:function(c,e){for(var g=\n-1;++g<b;)a[g].point(c,e)},sphere:function(){for(var c=-1;++c<b;)a[c].sphere()},lineStart:function(){for(var c=-1;++c<b;)a[c].lineStart()},lineEnd:function(){for(var c=-1;++c<b;)a[c].lineEnd()},polygonStart:function(){for(var c=-1;++c<b;)a[c].polygonStart()},polygonEnd:function(){for(var c=-1;++c<b;)a[c].polygonEnd()}}}function rc(a){return function(b,c){var e=ja(b),g=ja(c);e=a(e*g);return[e*g*fa(b),e*fa(c)]}}function sc(a){return function(b,c){var e=Ra(b*b+c*c),g=a(e),m=fa(g);g=ja(g);return[Wa(b*\nm,e*g),x(e&&c*m/e)]}}function Yb(a,b){return[a,Lc(fc((Oa+b)/2))]}function Dd(a){function b(){var b=za*g(),e=c(v(c.rotate()).invert([0,0]));return f(null==l?[[e[0]-b,e[1]-b],[e[0]+b,e[1]+b]]:a===Yb?[[Math.max(e[0]-b,l),h],[Math.min(e[0]+b,k),n]]:[[l,Math.max(e[1]-b,h)],[k,Math.min(e[1]+b,n)]])}var c=Cb(a),e=c.center,g=c.scale,m=c.translate,f=c.clipExtent,l=null,h,k,n;c.scale=function(a){return arguments.length?(g(a),b()):g()};c.translate=function(a){return arguments.length?(m(a),b()):m()};c.center=\nfunction(a){return arguments.length?(e(a),b()):e()};c.clipExtent=function(a){return arguments.length?(null==a?l=h=k=n=null:(l=+a[0][0],h=+a[0][1],k=+a[1][0],n=+a[1][1]),b()):null==l?null:[[l,h],[k,n]]};return b()}function he(a,b){function c(a,b){0<m?b<-Oa+1E-6&&(b=-Oa+1E-6):b>Oa-1E-6&&(b=Oa-1E-6);b=m/gd(fc((Oa+b)/2),g);return[b*fa(g*a),m-b*ja(g*a)]}var e=ja(a),g=a===b?fa(a):Lc(e/ja(b))/Lc(fc((Oa+b)/2)/fc((Oa+a)/2)),m=e*gd(fc((Oa+a)/2),g)/g;if(!g)return Yb;c.invert=function(a,b){b=m-b;var c=ec(g)*\nRa(a*a+b*b);return[Wa(a,Ba(b))/g*ec(b),2*Zb(gd(m/c,1/g))-Oa]};return c}function Ub(a,b){return[a,b]}function Ic(a,b){function c(a,b){b=m-b;a*=g;return[b*fa(a),m-b*ja(a)]}var e=ja(a),g=a===b?fa(a):(e-ja(b))/(b-a),m=e/g+a;if(1E-6>Ba(g))return Ub;c.invert=function(a,b){b=m-b;return[Wa(a,Ba(b))/g*ec(b),m-ec(g)*Ra(a*a+b*b)]};return c}function bd(a,b){b=x(Bc*fa(b));var c=b*b,e=c*c*c;return[a*ja(b)/(Bc*(1.340264+3*-.081106*c+e*(7*8.93E-4+.034164*c))),b*(1.340264+-.081106*c+e*(8.93E-4+.003796*c))]}function Ed(a,\nb){var c=ja(b),e=ja(a)*c;return[c*fa(a)/e,fa(b)/e]}function cd(a,b,c,e){return 1===a&&1===b&&0===c&&0===e?$a:Bb({point:function(g,m){this.stream.point(g*a+c,m*b+e)}})}function Fd(a,b){var c=b*b,e=c*c;return[a*(.8707-.131979*c+e*(-.013791+e*(.003971*c-.001529*e))),b*(1.007226+c*(.015085+e*(-.044475+.028874*c-.005916*e)))]}function dd(a,b){return[ja(b)*fa(a),fa(b)]}function Gd(a,b){var c=ja(b),e=1+ja(a)*c;return[c*fa(a)/e,fa(b)/e]}function Hd(a,b){return[Lc(fc((Oa+b)/2)),-a]}p.prototype={constructor:p,\nreset:function(){this.s=this.t=0},add:function(a){w(ed,a,this.t);w(this,ed.s,this.s);this.s?this.t+=ed.t:this.s=ed.t},valueOf:function(){return this.s}};var ed=new p,za=Math.PI,Oa=za/2,fd=za/4,ub=2*za,Ja=180/za,oa=za/180,Ba=Math.abs,Zb=Math.atan,Wa=Math.atan2,ja=Math.cos,tc=Math.ceil,Kd=Math.exp,Lc=Math.log,gd=Math.pow,fa=Math.sin,ec=Math.sign||function(a){return 0<a?1:0>a?-1:0},Ra=Math.sqrt,fc=Math.tan,hd={Feature:function(a,b){z(a.geometry,b)},FeatureCollection:function(a,b){a=a.features;for(var c=\n-1,e=a.length;++c<e;)z(a[c].geometry,b)}},id={Sphere:function(a,b){b.sphere()},Point:function(a,b){a=a.coordinates;b.point(a[0],a[1],a[2])},MultiPoint:function(a,b){for(var c=a.coordinates,e=-1,g=c.length;++e<g;)a=c[e],b.point(a[0],a[1],a[2])},LineString:function(a,b){h(a.coordinates,b,0)},MultiLineString:function(a,b){a=a.coordinates;for(var c=-1,e=a.length;++c<e;)h(a[c],b,0)},Polygon:function(a,b){k(a.coordinates,b)},MultiPolygon:function(a,b){a=a.coordinates;for(var c=-1,e=a.length;++c<e;)k(a[c],\nb)},GeometryCollection:function(a,b){a=a.geometries;for(var c=-1,e=a.length;++c<e;)z(a[c],b)}},Db=new p,Mc=new p,Md,Nd,kd,ld,md,Jb={point:H,lineStart:H,lineEnd:H,polygonStart:function(){Db.reset();Jb.lineStart=J;Jb.lineEnd=R},polygonEnd:function(){var a=+Db;Mc.add(0>a?ub+a:a);this.lineStart=this.lineEnd=this.point=H},sphere:function(){Mc.add(ub)}},La,bb,Ma,vb,$b,ke,Nc,gc,wc=new p,Ob,Ya,Ia={point:ba,lineStart:ca,lineEnd:aa,polygonStart:function(){Ia.point=K;Ia.lineStart=G;Ia.lineEnd=Y;wc.reset();Jb.polygonStart()},\npolygonEnd:function(){Jb.polygonEnd();Ia.point=ba;Ia.lineStart=ca;Ia.lineEnd=aa;0>Db?(La=-(Ma=180),bb=-(vb=90)):1E-6<wc?vb=90:-1E-6>wc&&(bb=-90);Ya[0]=La;Ya[1]=Ma}},jb,pc,qc,nd,Ib,Sa,ac,Pb,bc,xc,Qb,yc,le,cb,kb,ib,mb={sphere:H,point:la,lineStart:A,lineEnd:da,polygonStart:function(){mb.lineStart=pa;mb.lineEnd=ka},polygonEnd:function(){mb.lineStart=A;mb.lineEnd=da}};t.invert=t;var Oc=new p,Pd=ra(function(){return!0},function(a){var b=NaN,c=NaN,e=NaN,g;return{lineStart:function(){a.lineStart();g=1},point:function(m,\nf){var l=0<m?za:-za,h=Ba(m-b);if(1E-6>Ba(h-za))a.point(b,c=0<(c+f)/2?Oa:-Oa),a.point(e,c),a.lineEnd(),a.lineStart(),a.point(l,c),a.point(m,c),g=0;else if(e!==l&&h>=za){1E-6>Ba(b-e)&&(b-=1E-6*e);1E-6>Ba(m-l)&&(m-=1E-6*l);h=b;var k=c,v=m,n,t,B=fa(h-v);c=1E-6<Ba(B)?Zb((fa(k)*(t=ja(f))*fa(v)-fa(f)*(n=ja(k))*fa(h))/(n*t*B)):(k+f)/2;a.point(e,c);a.lineEnd();a.lineStart();a.point(l,c);g=0}a.point(b=m,c=f);e=l},lineEnd:function(){a.lineEnd();b=c=NaN},clean:function(){return 2-g}}},function(a,b,c,e){null==\na?(c*=Oa,e.point(-za,c),e.point(0,c),e.point(za,c),e.point(za,0),e.point(za,-c),e.point(0,-c),e.point(-za,-c),e.point(-za,0),e.point(-za,c)):1E-6<Ba(a[0]-b[0])?(a=a[0]<b[0]?za:-za,c=c*a/2,e.point(-a,c),e.point(0,c),e.point(a,c)):e.point(b[0],b[1])},[-za,-Oa]),od=new p,zb,Vb,hc,uc={sphere:H,point:H,lineStart:function(){uc.point=fb;uc.lineEnd=ob},lineEnd:H,polygonStart:H,polygonEnd:H},zc=[null,null],xb={type:\"LineString\",coordinates:zc},Qd={Feature:function(a,b){return Aa(a.geometry,b)},FeatureCollection:function(a,\nb){a=a.features;for(var c=-1,e=a.length;++c<e;)if(Aa(a[c].geometry,b))return!0;return!1}},me={Sphere:function(){return!0},Point:function(a,b){return 0===Va(a.coordinates,b)},MultiPoint:function(a,b){a=a.coordinates;for(var c=-1,e=a.length;++c<e;)if(0===Va(a[c],b))return!0;return!1},LineString:function(a,b){return ya(a.coordinates,b)},MultiLineString:function(a,b){a=a.coordinates;for(var c=-1,e=a.length;++c<e;)if(ya(a[c],b))return!0;return!1},Polygon:function(a,b){return Na(a.coordinates,b)},MultiPolygon:function(a,\nb){a=a.coordinates;for(var c=-1,e=a.length;++c<e;)if(Na(a[c],b))return!0;return!1},GeometryCollection:function(a,b){a=a.geometries;for(var c=-1,e=a.length;++c<e;)if(Aa(a[c],b))return!0;return!1}},Rd=new p,Sd=new p,$d,Sc,ic,Td,Kb={point:H,lineStart:H,lineEnd:H,polygonStart:function(){Kb.lineStart=Tc;Kb.lineEnd=ab},polygonEnd:function(){Kb.lineStart=Kb.lineEnd=Kb.point=H;Rd.add(Ba(Sd));Sd.reset()},result:function(){var a=Rd/2;Rd.reset();return a}},cc=Infinity,Eb=cc,jc=-cc,Rb=jc,pd={point:function(a,\nb){a<cc&&(cc=a);a>jc&&(jc=a);b<Eb&&(Eb=b);b>Rb&&(Rb=b)},lineStart:H,lineEnd:H,polygonStart:H,polygonEnd:H,result:function(){var a=[[cc,Eb],[jc,Rb]];jc=Rb=-(Eb=cc=Infinity);return a}},kc=0,qd=0,Lb=0,Sb=0,rd=0,Wb=0,sd=0,Kc=0,wb=0,Jc,td,Fb,nb,Xa={point:Gb,lineStart:Dc,lineEnd:Vc,polygonStart:function(){Xa.lineStart=nc;Xa.lineEnd=Wc},polygonEnd:function(){Xa.point=Gb;Xa.lineStart=Dc;Xa.lineEnd=Vc},result:function(){var a=wb?[sd/wb,Kc/wb]:Wb?[Sb/Wb,rd/Wb]:Lb?[kc/Lb,qd/Lb]:[NaN,NaN];kc=qd=Lb=Sb=rd=Wb=sd=\nKc=wb=0;return a}};Ea.prototype={_radius:4.5,pointRadius:function(a){return this._radius=a,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath();this._point=NaN},point:function(a,b){switch(this._point){case 0:this._context.moveTo(a,b);this._point=1;break;case 1:this._context.lineTo(a,b);break;default:this._context.moveTo(a+this._radius,b),this._context.arc(a,b,this._radius,\n0,ub)}},result:H};var yd=new p,zd,fe,ee,mc,lc,Ac={point:H,lineStart:function(){Ac.point=Xb},lineEnd:function(){zd&&ea(fe,ee);Ac.point=H},polygonStart:function(){zd=!0},polygonEnd:function(){zd=null},result:function(){var a=+yd;yd.reset();return a}};lb.prototype={_radius:4.5,_circle:Tb(4.5),pointRadius:function(a){(a=+a)!==this._radius&&(this._radius=a,this._circle=null);return this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===\nthis._line&&this._string.push(\"Z\");this._point=NaN},point:function(a,b){switch(this._point){case 0:this._string.push(\"M\",a,\",\",b);this._point=1;break;case 1:this._string.push(\"L\",a,\",\",b);break;default:null==this._circle&&(this._circle=Tb(this._radius)),this._string.push(\"M\",a,\",\",b,this._circle)}},result:function(){if(this._string.length){var a=this._string.join(\"\");this._string=[];return a}return null}};sb.prototype={constructor:sb,point:function(a,b){this.stream.point(a,b)},sphere:function(){this.stream.sphere()},\nlineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var be=ja(30*oa),ae=Bb({point:function(a,b){this.stream.point(a*oa,b*oa)}}),db=rc(function(a){return Ra(2/(1+a))});db.invert=sc(function(a){return 2*x(a/2)});var Pc=rc(function(a){return(a=C(a))&&a/fa(a)});Pc.invert=sc(function(a){return a});Yb.invert=function(a,b){return[a,2*Zb(Kd(b))-Oa]};Ub.invert=Ub;var Bc=\nRa(3)/2;bd.invert=function(a,b){for(var c=b,e=c*c,g=e*e*e,f=0,m;12>f&&!(m=c*(1.340264+-.081106*e+g*(8.93E-4+.003796*e))-b,e=1.340264+3*-.081106*e+g*(7*8.93E-4+.034164*e),c-=m/=e,e=c*c,g=e*e*e,1E-12>Ba(m));++f);return[Bc*a*(1.340264+3*-.081106*e+g*(7*8.93E-4+.034164*e))/ja(c),x(fa(c)/Bc)]};Ed.invert=sc(Zb);Fd.invert=function(a,b){var c=b,e=25;do{var g=c*c;var f=g*g;c-=f=(c*(1.007226+g*(.015085+f*(-.044475+.028874*g-.005916*f)))-b)/(1.007226+g*(.045255+f*(-.311325+.259866*g-.005916*11*f)))}while(1E-6<\nBa(f)&&0<--e);return[a/(.8707+(g=c*c)*(-.131979+g*(-.013791+g*g*g*(.003971-.001529*g)))),c]};dd.invert=sc(x);Gd.invert=sc(function(a){return 2*Zb(a)});Hd.invert=function(a,b){return[-b,2*Zb(Kd(a))-Oa]};a.geoArea=function(a){Mc.reset();E(a,Jb);return 2*Mc};a.geoBounds=function(a){var b,c,e;vb=Ma=-(La=bb=Infinity);Ob=[];E(a,Ia);if(b=Ob.length){Ob.sort(n);a=1;var g=Ob[0];for(c=[g];a<b;++a){var f=Ob[a];ha(g,f[0])||ha(g,f[1])?(r(g[0],f[1])>r(g[0],g[1])&&(g[1]=f[1]),r(f[0],g[1])>r(g[0],g[1])&&(g[0]=f[0])):\nc.push(g=f)}var m=-Infinity;b=c.length-1;a=0;for(g=c[b];a<=b;g=f,++a)f=c[a],(e=r(g[1],f[0]))>m&&(m=e,La=f[0],Ma=g[1])}Ob=Ya=null;return Infinity===La||Infinity===bb?[[NaN,NaN],[NaN,NaN]]:[[La,bb],[Ma,vb]]};a.geoCentroid=function(a){jb=pc=qc=nd=Ib=Sa=ac=Pb=bc=xc=Qb=0;E(a,mb);a=bc;var b=xc,c=Qb,e=a*a+b*b+c*c;return 1E-12>e&&(a=Sa,b=ac,c=Pb,1E-6>pc&&(a=qc,b=nd,c=Ib),e=a*a+b*b+c*c,1E-12>e)?[NaN,NaN]:[Wa(b,a)*Ja,x(c/Ra(e))*Ja]};a.geoCircle=function(){function a(){var a=b.apply(this,arguments),m=c.apply(this,\narguments)*oa,k=e.apply(this,arguments)*oa;g=[];f=l(-a[0]*oa,-a[1]*oa,0).invert;B(h,m,k,1);a={type:\"Polygon\",coordinates:[g]};g=f=null;return a}var b=wa([0,0]),c=wa(90),e=wa(6),g,f,h={point:function(a,b){g.push(a=f(a,b));a[0]*=Ja;a[1]*=Ja}};a.center=function(c){return arguments.length?(b=\"function\"===typeof c?c:wa([+c[0],+c[1]]),a):b};a.radius=function(b){return arguments.length?(c=\"function\"===typeof b?b:wa(+b),a):c};a.precision=function(b){return arguments.length?(e=\"function\"===typeof b?b:wa(+b),\na):e};return a};a.geoClipAntimeridian=Pd;a.geoClipCircle=Mb;a.geoClipExtent=function(){var a=0,b=0,c=960,e=500,g,f,l;return l={stream:function(m){return g&&f===m?g:g=Pa(a,b,c,e)(f=m)},extent:function(m){return arguments.length?(a=+m[0][0],b=+m[0][1],c=+m[1][0],e=+m[1][1],g=f=null,l):[[a,b],[c,e]]}}};a.geoClipRectangle=Pa;a.geoContains=function(a,b){return(a&&Qd.hasOwnProperty(a.type)?Qd[a.type]:Aa)(a,b)};a.geoDistance=Va;a.geoGraticule=Ab;a.geoGraticule10=function(){return Ab()()};a.geoInterpolate=\nfunction(a,b){var c=a[0]*oa,e=a[1]*oa;a=b[0]*oa;b=b[1]*oa;var g=ja(e),f=fa(e),l=ja(b),m=fa(b),h=g*ja(c),k=g*fa(c),v=l*ja(a),n=l*fa(a),t=2*x(Ra(q(b-e)+g*l*q(a-c))),B=fa(t);a=t?function(a){var b=fa(a*=t)/B,c=fa(t-a)/B;a=c*h+b*v;var e=c*k+b*n;b=c*f+b*m;return[Wa(e,a)*Ja,Wa(b,Ra(a*a+e*e))*Ja]}:function(){return[c*Ja,e*Ja]};a.distance=t;return a};a.geoLength=Ta;a.geoPath=function(a,b){function c(a){a&&(\"function\"===typeof e&&f.pointRadius(+e.apply(this,arguments)),E(a,g(f)));return f.result()}var e=4.5,\ng,f;c.area=function(a){E(a,g(Kb));return Kb.result()};c.measure=function(a){E(a,g(Ac));return Ac.result()};c.bounds=function(a){E(a,g(pd));return pd.result()};c.centroid=function(a){E(a,g(Xa));return Xa.result()};c.projection=function(b){return arguments.length?(g=null==b?(a=null,$a):(a=b).stream,c):a};c.context=function(a){if(!arguments.length)return b;f=null==a?(b=null,new lb):new Ea(b=a);\"function\"!==typeof e&&f.pointRadius(e);return c};c.pointRadius=function(a){if(!arguments.length)return e;e=\n\"function\"===typeof a?a:(f.pointRadius(+a),+a);return c};return c.projection(a).context(b)};a.geoAlbers=Hc;a.geoAlbersUsa=function(){function a(a){var b=a[0];a=a[1];return n=null,(f.point(b,a),n)||(h.point(b,a),n)||(v.point(b,a),n)}function b(){c=e=null;return a}var c,e,g=Hc(),f,l=Gc().rotate([154,0]).center([-2,58.5]).parallels([55,65]),h,k=Gc().rotate([157,0]).center([-3,19.9]).parallels([8,18]),v,n,t={point:function(a,b){n=[a,b]}};a.invert=function(a){var b=g.scale(),c=g.translate(),e=(a[0]-c[0])/\nb;b=(a[1]-c[1])/b;return(.12<=b&&.234>b&&-.425<=e&&-.214>e?l:.166<=b&&.234>b&&-.214<=e&&-.115>e?k:g).invert(a)};a.stream=function(a){return c&&e===a?c:c=Cd([g.stream(e=a),l.stream(a),k.stream(a)])};a.precision=function(a){if(!arguments.length)return g.precision();g.precision(a);l.precision(a);k.precision(a);return b()};a.scale=function(b){if(!arguments.length)return g.scale();g.scale(b);l.scale(.35*b);k.scale(b);return a.translate(g.translate())};a.translate=function(a){if(!arguments.length)return g.translate();\nvar c=g.scale(),e=+a[0],m=+a[1];f=g.translate(a).clipExtent([[e-.455*c,m-.238*c],[e+.455*c,m+.238*c]]).stream(t);h=l.translate([e-.307*c,m+.201*c]).clipExtent([[e-.425*c+1E-6,m+.12*c+1E-6],[e-.214*c-1E-6,m+.234*c-1E-6]]).stream(t);v=k.translate([e-.205*c,m+.212*c]).clipExtent([[e-.214*c+1E-6,m+.166*c+1E-6],[e-.115*c-1E-6,m+.234*c-1E-6]]).stream(t);return b()};a.fitExtent=function(b,c){return Hb(a,b,c)};a.fitSize=function(b,c){return Hb(a,[[0,0],b],c)};a.fitWidth=function(b,c){return Qa(a,b,c)};a.fitHeight=\nfunction(b,c){return yb(a,b,c)};return a.scale(1070)};a.geoAzimuthalEqualArea=function(){return Cb(db).scale(124.75).clipAngle(179.999)};a.geoAzimuthalEqualAreaRaw=db;a.geoAzimuthalEquidistant=function(){return Cb(Pc).scale(79.4188).clipAngle(179.999)};a.geoAzimuthalEquidistantRaw=Pc;a.geoConicConformal=function(){return Ad(he).scale(109.5).parallels([30,30])};a.geoConicConformalRaw=he;a.geoConicEqualArea=Gc;a.geoConicEqualAreaRaw=Bd;a.geoConicEquidistant=function(){return Ad(Ic).scale(131.154).center([0,\n13.9389])};a.geoConicEquidistantRaw=Ic;a.geoEqualEarth=function(){return Cb(bd).scale(177.158)};a.geoEqualEarthRaw=bd;a.geoEquirectangular=function(){return Cb(Ub).scale(152.63)};a.geoEquirectangularRaw=Ub;a.geoGnomonic=function(){return Cb(Ed).scale(144.049).clipAngle(60)};a.geoGnomonicRaw=Ed;a.geoIdentity=function(){function a(){B=p=null;return q}var b=1,c=0,e=0,g=1,f=1,l=$a,h=null,k,v,n,t=$a,B,p,q;return q={stream:function(a){return B&&p===a?B:B=l(t(p=a))},postclip:function(b){return arguments.length?\n(t=b,h=k=v=n=null,a()):t},clipExtent:function(b){return arguments.length?(t=null==b?(h=k=v=n=null,$a):Pa(h=+b[0][0],k=+b[0][1],v=+b[1][0],n=+b[1][1]),a()):null==h?null:[[h,k],[v,n]]},scale:function(m){return arguments.length?(l=cd((b=+m)*g,b*f,c,e),a()):b},translate:function(m){return arguments.length?(l=cd(b*g,b*f,c=+m[0],e=+m[1]),a()):[c,e]},reflectX:function(m){return arguments.length?(l=cd(b*(g=m?-1:1),b*f,c,e),a()):0>g},reflectY:function(m){return arguments.length?(l=cd(b*g,b*(f=m?-1:1),c,e),\na()):0>f},fitExtent:function(a,b){return Hb(q,a,b)},fitSize:function(a,b){return Hb(q,[[0,0],a],b)},fitWidth:function(a,b){return Qa(q,a,b)},fitHeight:function(a,b){return yb(q,a,b)}}};a.geoProjection=Cb;a.geoProjectionMutator=ad;a.geoMercator=function(){return Dd(Yb).scale(961/ub)};a.geoMercatorRaw=Yb;a.geoNaturalEarth1=function(){return Cb(Fd).scale(175.295)};a.geoNaturalEarth1Raw=Fd;a.geoOrthographic=function(){return Cb(dd).scale(249.5).clipAngle(90.000001)};a.geoOrthographicRaw=dd;a.geoStereographic=\nfunction(){return Cb(Gd).scale(250).clipAngle(142)};a.geoStereographicRaw=Gd;a.geoTransverseMercator=function(){var a=Dd(Hd),b=a.center,c=a.rotate;a.center=function(a){return arguments.length?b([-a[1],a[0]]):(a=b(),[a[1],-a[0]])};a.rotate=function(a){return arguments.length?c([a[0],a[1],2<a.length?a[2]+90:90]):(a=c(),[a[0],a[1],a[2]-90])};return c([0,0,90]).scale(159.155)};a.geoTransverseMercatorRaw=Hd;a.geoRotation=v;a.geoStream=E;a.geoTransform=function(a){return{stream:Bb(a)}};Object.defineProperty(a,\n\"__esModule\",{value:!0})})}","~:source","shadow$provide[\"module$node_modules$d3_geo$dist$d3_geo\"] = function(global,process,require,module,exports) {\n// https://d3js.org/d3-geo/ v1.11.1 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n(factory((global.d3 = global.d3 || {}),global.d3));\n}(this, (function (exports,d3Array) { 'use strict';\n\n// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nfunction adder() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n\nvar epsilon = 1e-6;\nvar epsilon2 = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar quarterPi = pi / 4;\nvar tau = pi * 2;\n\nvar degrees = 180 / pi;\nvar radians = pi / 180;\n\nvar abs = Math.abs;\nvar atan = Math.atan;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar ceil = Math.ceil;\nvar exp = Math.exp;\nvar log = Math.log;\nvar pow = Math.pow;\nvar sin = Math.sin;\nvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nvar sqrt = Math.sqrt;\nvar tan = Math.tan;\n\nfunction acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nfunction asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nfunction haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n\nfunction noop() {}\n\nfunction streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nfunction geoStream(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n\nvar areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nfunction area(object) {\n  areaSum.reset();\n  geoStream(object, areaStream);\n  return areaSum * 2;\n}\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nfunction cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nfunction cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nfunction cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nfunction cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nfunction cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nfunction cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n\nvar lambda0$1, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00$1, phi00$1, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0$1, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign$$1 = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign$$1,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0$1) {\n        if (lambda < lambda0$1) lambda0$1 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0$1, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00$1 = lambda, phi00$1 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00$1, phi00$1);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);\n  range[0] = lambda0$1, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nfunction bounds(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n  ranges = [];\n  geoStream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0$1 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0$1, phi0], [lambda1, phi1]];\n}\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00$2, phi00$2, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00$2, phi00$2);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00$2 = lambda, phi00$2 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroid(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  geoStream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction compose(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nfunction rotation(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nfunction circle() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n\nfunction clipBuffer() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nfunction clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n\nvar sum = adder();\n\nfunction polygonContains(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign$$1 = delta >= 0 ? 1 : -1,\n          absDelta = sign$$1 * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign$$1 * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n\nfunction clip(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = d3Array.merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n\nvar clipAntimeridian = clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n\nfunction clipCircle(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n\nfunction clipLine(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nfunction clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = d3Array.merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nfunction extent() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n\nvar lengthSum = adder(),\n    lambda0$2,\n    sinPhi0$1,\n    cosPhi0$1;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0$2),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n}\n\nfunction length(object) {\n  lengthSum.reset();\n  geoStream(object, lengthStream);\n  return +lengthSum;\n}\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nfunction distance(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nfunction contains(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n\nfunction graticuleX(y0, y1, dy) {\n  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nfunction graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nfunction graticule10() {\n  return graticule()();\n}\n\nfunction interpolate(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n\nfunction identity(x) {\n  return x;\n}\n\nvar areaSum$1 = adder(),\n    areaRingSum$1 = adder(),\n    x00,\n    y00,\n    x0$1,\n    y0$1;\n\nvar areaStream$1 = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream$1.lineStart = areaRingStart$1;\n    areaStream$1.lineEnd = areaRingEnd$1;\n  },\n  polygonEnd: function() {\n    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\n    areaSum$1.add(abs(areaRingSum$1));\n    areaRingSum$1.reset();\n  },\n  result: function() {\n    var area = areaSum$1 / 2;\n    areaSum$1.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart$1() {\n  areaStream$1.point = areaPointFirst$1;\n}\n\nfunction areaPointFirst$1(x, y) {\n  areaStream$1.point = areaPoint$1;\n  x00 = x0$1 = x, y00 = y0$1 = y;\n}\n\nfunction areaPoint$1(x, y) {\n  areaRingSum$1.add(y0$1 * x - x0$1 * y);\n  x0$1 = x, y0$1 = y;\n}\n\nfunction areaRingEnd$1() {\n  areaPoint$1(x00, y00);\n}\n\nvar x0$2 = Infinity,\n    y0$2 = x0$2,\n    x1 = -x0$2,\n    y1 = x1;\n\nvar boundsStream$1 = {\n  point: boundsPoint$1,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0$2, y0$2], [x1, y1]];\n    x1 = y1 = -(y0$2 = x0$2 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint$1(x, y) {\n  if (x < x0$2) x0$2 = x;\n  if (x > x1) x1 = x;\n  if (y < y0$2) y0$2 = y;\n  if (y > y1) y1 = y;\n}\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0$1 = 0,\n    Y0$1 = 0,\n    Z0$1 = 0,\n    X1$1 = 0,\n    Y1$1 = 0,\n    Z1$1 = 0,\n    X2$1 = 0,\n    Y2$1 = 0,\n    Z2$1 = 0,\n    x00$1,\n    y00$1,\n    x0$3,\n    y0$3;\n\nvar centroidStream$1 = {\n  point: centroidPoint$1,\n  lineStart: centroidLineStart$1,\n  lineEnd: centroidLineEnd$1,\n  polygonStart: function() {\n    centroidStream$1.lineStart = centroidRingStart$1;\n    centroidStream$1.lineEnd = centroidRingEnd$1;\n  },\n  polygonEnd: function() {\n    centroidStream$1.point = centroidPoint$1;\n    centroidStream$1.lineStart = centroidLineStart$1;\n    centroidStream$1.lineEnd = centroidLineEnd$1;\n  },\n  result: function() {\n    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n        : [NaN, NaN];\n    X0$1 = Y0$1 = Z0$1 =\n    X1$1 = Y1$1 = Z1$1 =\n    X2$1 = Y2$1 = Z2$1 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint$1(x, y) {\n  X0$1 += x;\n  Y0$1 += y;\n  ++Z0$1;\n}\n\nfunction centroidLineStart$1() {\n  centroidStream$1.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream$1.point = centroidPointLine;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidLineEnd$1() {\n  centroidStream$1.point = centroidPoint$1;\n}\n\nfunction centroidRingStart$1() {\n  centroidStream$1.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd$1() {\n  centroidPointRing(x00$1, y00$1);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream$1.point = centroidPointRing;\n  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0$3,\n      dy = y - y0$3,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n\n  z = y0$3 * x - x0$3 * y;\n  X2$1 += z * (x0$3 + x);\n  Y2$1 += z * (y0$3 + y);\n  Z2$1 += z * 3;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n\nvar lengthSum$1 = adder(),\n    lengthRing,\n    x00$2,\n    y00$2,\n    x0$4,\n    y0$4;\n\nvar lengthStream$1 = {\n  point: noop,\n  lineStart: function() {\n    lengthStream$1.point = lengthPointFirst$1;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint$1(x00$2, y00$2);\n    lengthStream$1.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum$1;\n    lengthSum$1.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst$1(x, y) {\n  lengthStream$1.point = lengthPoint$1;\n  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n}\n\nfunction lengthPoint$1(x, y) {\n  x0$4 -= x, y0$4 -= y;\n  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\n  x0$4 = x, y0$4 = y;\n}\n\nfunction PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle$1(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle$1(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle$1(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n\nfunction index(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      geoStream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    geoStream(object, projectionStream(areaStream$1));\n    return areaStream$1.result();\n  };\n\n  path.measure = function(object) {\n    geoStream(object, projectionStream(lengthStream$1));\n    return lengthStream$1.result();\n  };\n\n  path.bounds = function(object) {\n    geoStream(object, projectionStream(boundsStream$1));\n    return boundsStream$1.result();\n  };\n\n  path.centroid = function(object) {\n    geoStream(object, projectionStream(centroidStream$1));\n    return centroidStream$1.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n\nfunction transform(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nfunction transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream$1));\n  fitBounds(boundsStream$1.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nfunction fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nfunction fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nfunction resample(project, delta2) {\n  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample$1(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform$$1(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform$$1.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform$$1;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform$$1(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform$$1.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform$$1;\n}\n\nfunction projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nfunction projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform$$1);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n\nfunction conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n\nfunction cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nfunction conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nfunction conicEqualArea() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n\nfunction albers() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nfunction albersUsa() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n\nfunction azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nfunction azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n\nvar azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nfunction azimuthalEqualArea() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n\nvar azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nfunction azimuthalEquidistant() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n\nfunction mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nfunction mercator() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nfunction mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nfunction conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nfunction conicConformal() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n\nfunction equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nfunction equirectangular() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n\nfunction conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nfunction conicEquidistant() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nfunction equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nfunction equalEarth() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n\nfunction gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nfunction gnomonic() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n\nfunction scaleTranslate$1(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nfunction identity$1() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, // clip extent\n      postclip = identity,\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));\n    },\n    postclip: function(_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    },\n    fitWidth: function(width, object) {\n      return fitWidth(projection, width, object);\n    },\n    fitHeight: function(height, object) {\n      return fitHeight(projection, height, object);\n    }\n  };\n}\n\nfunction naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nfunction naturalEarth1() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n\nfunction orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nfunction orthographic() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n\nfunction stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nfunction stereographic() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n\nfunction transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nfunction transverseMercator() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n\nexports.geoArea = area;\nexports.geoBounds = bounds;\nexports.geoCentroid = centroid;\nexports.geoCircle = circle;\nexports.geoClipAntimeridian = clipAntimeridian;\nexports.geoClipCircle = clipCircle;\nexports.geoClipExtent = extent;\nexports.geoClipRectangle = clipRectangle;\nexports.geoContains = contains;\nexports.geoDistance = distance;\nexports.geoGraticule = graticule;\nexports.geoGraticule10 = graticule10;\nexports.geoInterpolate = interpolate;\nexports.geoLength = length;\nexports.geoPath = index;\nexports.geoAlbers = albers;\nexports.geoAlbersUsa = albersUsa;\nexports.geoAzimuthalEqualArea = azimuthalEqualArea;\nexports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\nexports.geoAzimuthalEquidistant = azimuthalEquidistant;\nexports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\nexports.geoConicConformal = conicConformal;\nexports.geoConicConformalRaw = conicConformalRaw;\nexports.geoConicEqualArea = conicEqualArea;\nexports.geoConicEqualAreaRaw = conicEqualAreaRaw;\nexports.geoConicEquidistant = conicEquidistant;\nexports.geoConicEquidistantRaw = conicEquidistantRaw;\nexports.geoEqualEarth = equalEarth;\nexports.geoEqualEarthRaw = equalEarthRaw;\nexports.geoEquirectangular = equirectangular;\nexports.geoEquirectangularRaw = equirectangularRaw;\nexports.geoGnomonic = gnomonic;\nexports.geoGnomonicRaw = gnomonicRaw;\nexports.geoIdentity = identity$1;\nexports.geoProjection = projection;\nexports.geoProjectionMutator = projectionMutator;\nexports.geoMercator = mercator;\nexports.geoMercatorRaw = mercatorRaw;\nexports.geoNaturalEarth1 = naturalEarth1;\nexports.geoNaturalEarth1Raw = naturalEarth1Raw;\nexports.geoOrthographic = orthographic;\nexports.geoOrthographicRaw = orthographicRaw;\nexports.geoStereographic = stereographic;\nexports.geoStereographicRaw = stereographicRaw;\nexports.geoTransverseMercator = transverseMercator;\nexports.geoTransverseMercatorRaw = transverseMercatorRaw;\nexports.geoRotation = rotation;\nexports.geoStream = geoStream;\nexports.geoTransform = transform;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$d3_array$dist$d3_array"]],"~:properties",["^5",["geoConicEquidistantRaw","MultiLineString","n","fitSize","z","geoClipExtent","stream","geoDistance","geoEquirectangularRaw","geoBounds","invert","s","polygonStart","precision","valueOf","geoConicEquidistant","geoGnomonicRaw","reflectX","geoClipAntimeridian","e","reflectY","geoOrthographic","geoCircle","translate","prototype","scale","lines","area","clipAngle","stepMajor","geoGraticule","geoInterpolate","geoStereographicRaw","p","geoAlbers","Feature","LineString","geoRotation","geoTransverseMercator","geoProjection","x","measure","__esModule","geoConicConformal","geoConicEqualArea","radius","geoIdentity","pointRadius","v","_point","reset","d3","Sphere","outline","coordinates","geoAzimuthalEqualAreaRaw","geoMercator","geoEquirectangular","fitWidth","geoTransverseMercatorRaw","angle","extentMajor","geoClipCircle","geoContains","value","center","geoNaturalEarth1Raw","context","GeometryCollection","_radius","_context","lineEnd","geoAlbersUsa","parallels","geoAzimuthalEquidistantRaw","geoGnomonic","geoArea","fitExtent","geoGraticule10","distance","geoAzimuthalEqualArea","geoStereographic","geoOrthographicRaw","Point","t","_line","stepMinor","geoPath","preclip","type","projection","geoStream","geoCentroid","geoMercatorRaw","geoConicEqualAreaRaw","lineStart","FeatureCollection","polygonEnd","clipExtent","sphere","add","bounds","fitHeight","geoEqualEarthRaw","clean","geoTransform","geoLength","rejoin","geoEqualEarth","extentMinor","Polygon","MultiPolygon","geoProjectionMutator","centroid","geoAzimuthalEquidistant","_circle","rotate","extent","geoConicConformalRaw","_string","postclip","point","o","geoClipRectangle","result","constructor","geoNaturalEarth1","MultiPoint","step"]],"~:compiled-at",1535913515844,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$d3_geo$dist$d3_geo.js\",\n\"lineCount\":72,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/d3-geo/dist/d3-geo.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$d3_geo$dist$d3_geo\\\"] = function(global,process,require,module,exports) {\\n// https://d3js.org/d3-geo/ v1.11.1 Copyright 2018 Mike Bostock\\n(function (global, factory) {\\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\\ntypeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\\n(factory((global.d3 = global.d3 || {}),global.d3));\\n}(this, (function (exports,d3Array) { 'use strict';\\n\\n// Adds floating point numbers with twice the normal precision.\\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\\n// 305\\u2013363 (1997).\\n// Code adapted from GeographicLib by Charles F. F. Karney,\\n// http://geographiclib.sourceforge.net/\\n\\nfunction adder() {\\n  return new Adder;\\n}\\n\\nfunction Adder() {\\n  this.reset();\\n}\\n\\nAdder.prototype = {\\n  constructor: Adder,\\n  reset: function() {\\n    this.s = // rounded value\\n    this.t = 0; // exact error\\n  },\\n  add: function(y) {\\n    add(temp, y, this.t);\\n    add(this, temp.s, this.s);\\n    if (this.s) this.t += temp.t;\\n    else this.s = temp.t;\\n  },\\n  valueOf: function() {\\n    return this.s;\\n  }\\n};\\n\\nvar temp = new Adder;\\n\\nfunction add(adder, a, b) {\\n  var x = adder.s = a + b,\\n      bv = x - a,\\n      av = x - bv;\\n  adder.t = (a - av) + (b - bv);\\n}\\n\\nvar epsilon = 1e-6;\\nvar epsilon2 = 1e-12;\\nvar pi = Math.PI;\\nvar halfPi = pi / 2;\\nvar quarterPi = pi / 4;\\nvar tau = pi * 2;\\n\\nvar degrees = 180 / pi;\\nvar radians = pi / 180;\\n\\nvar abs = Math.abs;\\nvar atan = Math.atan;\\nvar atan2 = Math.atan2;\\nvar cos = Math.cos;\\nvar ceil = Math.ceil;\\nvar exp = Math.exp;\\nvar log = Math.log;\\nvar pow = Math.pow;\\nvar sin = Math.sin;\\nvar sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\\nvar sqrt = Math.sqrt;\\nvar tan = Math.tan;\\n\\nfunction acos(x) {\\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\\n}\\n\\nfunction asin(x) {\\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\\n}\\n\\nfunction haversin(x) {\\n  return (x = sin(x / 2)) * x;\\n}\\n\\nfunction noop() {}\\n\\nfunction streamGeometry(geometry, stream) {\\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\\n    streamGeometryType[geometry.type](geometry, stream);\\n  }\\n}\\n\\nvar streamObjectType = {\\n  Feature: function(object, stream) {\\n    streamGeometry(object.geometry, stream);\\n  },\\n  FeatureCollection: function(object, stream) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) streamGeometry(features[i].geometry, stream);\\n  }\\n};\\n\\nvar streamGeometryType = {\\n  Sphere: function(object, stream) {\\n    stream.sphere();\\n  },\\n  Point: function(object, stream) {\\n    object = object.coordinates;\\n    stream.point(object[0], object[1], object[2]);\\n  },\\n  MultiPoint: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\\n  },\\n  LineString: function(object, stream) {\\n    streamLine(object.coordinates, stream, 0);\\n  },\\n  MultiLineString: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamLine(coordinates[i], stream, 0);\\n  },\\n  Polygon: function(object, stream) {\\n    streamPolygon(object.coordinates, stream);\\n  },\\n  MultiPolygon: function(object, stream) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) streamPolygon(coordinates[i], stream);\\n  },\\n  GeometryCollection: function(object, stream) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) streamGeometry(geometries[i], stream);\\n  }\\n};\\n\\nfunction streamLine(coordinates, stream, closed) {\\n  var i = -1, n = coordinates.length - closed, coordinate;\\n  stream.lineStart();\\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\\n  stream.lineEnd();\\n}\\n\\nfunction streamPolygon(coordinates, stream) {\\n  var i = -1, n = coordinates.length;\\n  stream.polygonStart();\\n  while (++i < n) streamLine(coordinates[i], stream, 1);\\n  stream.polygonEnd();\\n}\\n\\nfunction geoStream(object, stream) {\\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\\n    streamObjectType[object.type](object, stream);\\n  } else {\\n    streamGeometry(object, stream);\\n  }\\n}\\n\\nvar areaRingSum = adder();\\n\\nvar areaSum = adder(),\\n    lambda00,\\n    phi00,\\n    lambda0,\\n    cosPhi0,\\n    sinPhi0;\\n\\nvar areaStream = {\\n  point: noop,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: function() {\\n    areaRingSum.reset();\\n    areaStream.lineStart = areaRingStart;\\n    areaStream.lineEnd = areaRingEnd;\\n  },\\n  polygonEnd: function() {\\n    var areaRing = +areaRingSum;\\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\\n    this.lineStart = this.lineEnd = this.point = noop;\\n  },\\n  sphere: function() {\\n    areaSum.add(tau);\\n  }\\n};\\n\\nfunction areaRingStart() {\\n  areaStream.point = areaPointFirst;\\n}\\n\\nfunction areaRingEnd() {\\n  areaPoint(lambda00, phi00);\\n}\\n\\nfunction areaPointFirst(lambda, phi) {\\n  areaStream.point = areaPoint;\\n  lambda00 = lambda, phi00 = phi;\\n  lambda *= radians, phi *= radians;\\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\\n}\\n\\nfunction areaPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\\n\\n  // Spherical excess E for a spherical triangle with vertices: south pole,\\n  // previous point, current point.  Uses a formula derived from Cagnoli\\u2019s\\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\\n  var dLambda = lambda - lambda0,\\n      sdLambda = dLambda >= 0 ? 1 : -1,\\n      adLambda = sdLambda * dLambda,\\n      cosPhi = cos(phi),\\n      sinPhi = sin(phi),\\n      k = sinPhi0 * sinPhi,\\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\\n      v = k * sdLambda * sin(adLambda);\\n  areaRingSum.add(atan2(v, u));\\n\\n  // Advance the previous points.\\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\\n}\\n\\nfunction area(object) {\\n  areaSum.reset();\\n  geoStream(object, areaStream);\\n  return areaSum * 2;\\n}\\n\\nfunction spherical(cartesian) {\\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\\n}\\n\\nfunction cartesian(spherical) {\\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\\n}\\n\\nfunction cartesianDot(a, b) {\\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\\n}\\n\\nfunction cartesianCross(a, b) {\\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\\n}\\n\\n// TODO return a\\nfunction cartesianAddInPlace(a, b) {\\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\\n}\\n\\nfunction cartesianScale(vector, k) {\\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\\n}\\n\\n// TODO return d\\nfunction cartesianNormalizeInPlace(d) {\\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\\n  d[0] /= l, d[1] /= l, d[2] /= l;\\n}\\n\\nvar lambda0$1, phi0, lambda1, phi1, // bounds\\n    lambda2, // previous lambda-coordinate\\n    lambda00$1, phi00$1, // first point\\n    p0, // previous 3D point\\n    deltaSum = adder(),\\n    ranges,\\n    range;\\n\\nvar boundsStream = {\\n  point: boundsPoint,\\n  lineStart: boundsLineStart,\\n  lineEnd: boundsLineEnd,\\n  polygonStart: function() {\\n    boundsStream.point = boundsRingPoint;\\n    boundsStream.lineStart = boundsRingStart;\\n    boundsStream.lineEnd = boundsRingEnd;\\n    deltaSum.reset();\\n    areaStream.polygonStart();\\n  },\\n  polygonEnd: function() {\\n    areaStream.polygonEnd();\\n    boundsStream.point = boundsPoint;\\n    boundsStream.lineStart = boundsLineStart;\\n    boundsStream.lineEnd = boundsLineEnd;\\n    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\\n    else if (deltaSum > epsilon) phi1 = 90;\\n    else if (deltaSum < -epsilon) phi0 = -90;\\n    range[0] = lambda0$1, range[1] = lambda1;\\n  }\\n};\\n\\nfunction boundsPoint(lambda, phi) {\\n  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\\n  if (phi < phi0) phi0 = phi;\\n  if (phi > phi1) phi1 = phi;\\n}\\n\\nfunction linePoint(lambda, phi) {\\n  var p = cartesian([lambda * radians, phi * radians]);\\n  if (p0) {\\n    var normal = cartesianCross(p0, p),\\n        equatorial = [normal[1], -normal[0], 0],\\n        inflection = cartesianCross(equatorial, normal);\\n    cartesianNormalizeInPlace(inflection);\\n    inflection = spherical(inflection);\\n    var delta = lambda - lambda2,\\n        sign$$1 = delta > 0 ? 1 : -1,\\n        lambdai = inflection[0] * degrees * sign$$1,\\n        phii,\\n        antimeridian = abs(delta) > 180;\\n    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\\n      phii = inflection[1] * degrees;\\n      if (phii > phi1) phi1 = phii;\\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\\n      phii = -inflection[1] * degrees;\\n      if (phii < phi0) phi0 = phii;\\n    } else {\\n      if (phi < phi0) phi0 = phi;\\n      if (phi > phi1) phi1 = phi;\\n    }\\n    if (antimeridian) {\\n      if (lambda < lambda2) {\\n        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\\n      } else {\\n        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\\n      }\\n    } else {\\n      if (lambda1 >= lambda0$1) {\\n        if (lambda < lambda0$1) lambda0$1 = lambda;\\n        if (lambda > lambda1) lambda1 = lambda;\\n      } else {\\n        if (lambda > lambda2) {\\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\\n        } else {\\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\\n        }\\n      }\\n    }\\n  } else {\\n    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);\\n  }\\n  if (phi < phi0) phi0 = phi;\\n  if (phi > phi1) phi1 = phi;\\n  p0 = p, lambda2 = lambda;\\n}\\n\\nfunction boundsLineStart() {\\n  boundsStream.point = linePoint;\\n}\\n\\nfunction boundsLineEnd() {\\n  range[0] = lambda0$1, range[1] = lambda1;\\n  boundsStream.point = boundsPoint;\\n  p0 = null;\\n}\\n\\nfunction boundsRingPoint(lambda, phi) {\\n  if (p0) {\\n    var delta = lambda - lambda2;\\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\\n  } else {\\n    lambda00$1 = lambda, phi00$1 = phi;\\n  }\\n  areaStream.point(lambda, phi);\\n  linePoint(lambda, phi);\\n}\\n\\nfunction boundsRingStart() {\\n  areaStream.lineStart();\\n}\\n\\nfunction boundsRingEnd() {\\n  boundsRingPoint(lambda00$1, phi00$1);\\n  areaStream.lineEnd();\\n  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);\\n  range[0] = lambda0$1, range[1] = lambda1;\\n  p0 = null;\\n}\\n\\n// Finds the left-right distance between two longitudes.\\n// This is almost the same as (lambda1 - lambda0 + 360\\u00b0) % 360\\u00b0, except that we want\\n// the distance between \\u00b1180\\u00b0 to be 360\\u00b0.\\nfunction angle(lambda0, lambda1) {\\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\\n}\\n\\nfunction rangeCompare(a, b) {\\n  return a[0] - b[0];\\n}\\n\\nfunction rangeContains(range, x) {\\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\\n}\\n\\nfunction bounds(feature) {\\n  var i, n, a, b, merged, deltaMax, delta;\\n\\n  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\\n  ranges = [];\\n  geoStream(feature, boundsStream);\\n\\n  // First, sort ranges by their minimum longitudes.\\n  if (n = ranges.length) {\\n    ranges.sort(rangeCompare);\\n\\n    // Then, merge any ranges that overlap.\\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\\n      b = ranges[i];\\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\\n      } else {\\n        merged.push(a = b);\\n      }\\n    }\\n\\n    // Finally, find the largest gap between the merged ranges.\\n    // The final bounding box will be the inverse of this gap.\\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\\n      b = merged[i];\\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\\n    }\\n  }\\n\\n  ranges = range = null;\\n\\n  return lambda0$1 === Infinity || phi0 === Infinity\\n      ? [[NaN, NaN], [NaN, NaN]]\\n      : [[lambda0$1, phi0], [lambda1, phi1]];\\n}\\n\\nvar W0, W1,\\n    X0, Y0, Z0,\\n    X1, Y1, Z1,\\n    X2, Y2, Z2,\\n    lambda00$2, phi00$2, // first point\\n    x0, y0, z0; // previous point\\n\\nvar centroidStream = {\\n  sphere: noop,\\n  point: centroidPoint,\\n  lineStart: centroidLineStart,\\n  lineEnd: centroidLineEnd,\\n  polygonStart: function() {\\n    centroidStream.lineStart = centroidRingStart;\\n    centroidStream.lineEnd = centroidRingEnd;\\n  },\\n  polygonEnd: function() {\\n    centroidStream.lineStart = centroidLineStart;\\n    centroidStream.lineEnd = centroidLineEnd;\\n  }\\n};\\n\\n// Arithmetic mean of Cartesian vectors.\\nfunction centroidPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi);\\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\\n}\\n\\nfunction centroidPointCartesian(x, y, z) {\\n  ++W0;\\n  X0 += (x - X0) / W0;\\n  Y0 += (y - Y0) / W0;\\n  Z0 += (z - Z0) / W0;\\n}\\n\\nfunction centroidLineStart() {\\n  centroidStream.point = centroidLinePointFirst;\\n}\\n\\nfunction centroidLinePointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi);\\n  x0 = cosPhi * cos(lambda);\\n  y0 = cosPhi * sin(lambda);\\n  z0 = sin(phi);\\n  centroidStream.point = centroidLinePoint;\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidLinePoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi),\\n      x = cosPhi * cos(lambda),\\n      y = cosPhi * sin(lambda),\\n      z = sin(phi),\\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\\n  W1 += w;\\n  X1 += w * (x0 + (x0 = x));\\n  Y1 += w * (y0 + (y0 = y));\\n  Z1 += w * (z0 + (z0 = z));\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidLineEnd() {\\n  centroidStream.point = centroidPoint;\\n}\\n\\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\\n// J. Applied Mechanics 42, 239 (1975).\\nfunction centroidRingStart() {\\n  centroidStream.point = centroidRingPointFirst;\\n}\\n\\nfunction centroidRingEnd() {\\n  centroidRingPoint(lambda00$2, phi00$2);\\n  centroidStream.point = centroidPoint;\\n}\\n\\nfunction centroidRingPointFirst(lambda, phi) {\\n  lambda00$2 = lambda, phi00$2 = phi;\\n  lambda *= radians, phi *= radians;\\n  centroidStream.point = centroidRingPoint;\\n  var cosPhi = cos(phi);\\n  x0 = cosPhi * cos(lambda);\\n  y0 = cosPhi * sin(lambda);\\n  z0 = sin(phi);\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroidRingPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var cosPhi = cos(phi),\\n      x = cosPhi * cos(lambda),\\n      y = cosPhi * sin(lambda),\\n      z = sin(phi),\\n      cx = y0 * z - z0 * y,\\n      cy = z0 * x - x0 * z,\\n      cz = x0 * y - y0 * x,\\n      m = sqrt(cx * cx + cy * cy + cz * cz),\\n      w = asin(m), // line weight = angle\\n      v = m && -w / m; // area weight multiplier\\n  X2 += v * cx;\\n  Y2 += v * cy;\\n  Z2 += v * cz;\\n  W1 += w;\\n  X1 += w * (x0 + (x0 = x));\\n  Y1 += w * (y0 + (y0 = y));\\n  Z1 += w * (z0 + (z0 = z));\\n  centroidPointCartesian(x0, y0, z0);\\n}\\n\\nfunction centroid(object) {\\n  W0 = W1 =\\n  X0 = Y0 = Z0 =\\n  X1 = Y1 = Z1 =\\n  X2 = Y2 = Z2 = 0;\\n  geoStream(object, centroidStream);\\n\\n  var x = X2,\\n      y = Y2,\\n      z = Z2,\\n      m = x * x + y * y + z * z;\\n\\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\\n  if (m < epsilon2) {\\n    x = X1, y = Y1, z = Z1;\\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\\n    m = x * x + y * y + z * z;\\n    // If the feature still has an undefined ccentroid, then return.\\n    if (m < epsilon2) return [NaN, NaN];\\n  }\\n\\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\\n}\\n\\nfunction constant(x) {\\n  return function() {\\n    return x;\\n  };\\n}\\n\\nfunction compose(a, b) {\\n\\n  function compose(x, y) {\\n    return x = a(x, y), b(x[0], x[1]);\\n  }\\n\\n  if (a.invert && b.invert) compose.invert = function(x, y) {\\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\\n  };\\n\\n  return compose;\\n}\\n\\nfunction rotationIdentity(lambda, phi) {\\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\\n}\\n\\nrotationIdentity.invert = rotationIdentity;\\n\\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\\n    : rotationLambda(deltaLambda))\\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\\n    : rotationIdentity);\\n}\\n\\nfunction forwardRotationLambda(deltaLambda) {\\n  return function(lambda, phi) {\\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\\n  };\\n}\\n\\nfunction rotationLambda(deltaLambda) {\\n  var rotation = forwardRotationLambda(deltaLambda);\\n  rotation.invert = forwardRotationLambda(-deltaLambda);\\n  return rotation;\\n}\\n\\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\\n  var cosDeltaPhi = cos(deltaPhi),\\n      sinDeltaPhi = sin(deltaPhi),\\n      cosDeltaGamma = cos(deltaGamma),\\n      sinDeltaGamma = sin(deltaGamma);\\n\\n  function rotation(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        x = cos(lambda) * cosPhi,\\n        y = sin(lambda) * cosPhi,\\n        z = sin(phi),\\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\\n    return [\\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\\n    ];\\n  }\\n\\n  rotation.invert = function(lambda, phi) {\\n    var cosPhi = cos(phi),\\n        x = cos(lambda) * cosPhi,\\n        y = sin(lambda) * cosPhi,\\n        z = sin(phi),\\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\\n    return [\\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\\n    ];\\n  };\\n\\n  return rotation;\\n}\\n\\nfunction rotation(rotate) {\\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\\n\\n  function forward(coordinates) {\\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\\n  }\\n\\n  forward.invert = function(coordinates) {\\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\\n  };\\n\\n  return forward;\\n}\\n\\n// Generates a circle centered at [0\\u00b0, 0\\u00b0], with a given radius and precision.\\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\\n  if (!delta) return;\\n  var cosRadius = cos(radius),\\n      sinRadius = sin(radius),\\n      step = direction * delta;\\n  if (t0 == null) {\\n    t0 = radius + direction * tau;\\n    t1 = radius - step / 2;\\n  } else {\\n    t0 = circleRadius(cosRadius, t0);\\n    t1 = circleRadius(cosRadius, t1);\\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\\n  }\\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\\n    stream.point(point[0], point[1]);\\n  }\\n}\\n\\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\\nfunction circleRadius(cosRadius, point) {\\n  point = cartesian(point), point[0] -= cosRadius;\\n  cartesianNormalizeInPlace(point);\\n  var radius = acos(-point[1]);\\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\\n}\\n\\nfunction circle() {\\n  var center = constant([0, 0]),\\n      radius = constant(90),\\n      precision = constant(6),\\n      ring,\\n      rotate,\\n      stream = {point: point};\\n\\n  function point(x, y) {\\n    ring.push(x = rotate(x, y));\\n    x[0] *= degrees, x[1] *= degrees;\\n  }\\n\\n  function circle() {\\n    var c = center.apply(this, arguments),\\n        r = radius.apply(this, arguments) * radians,\\n        p = precision.apply(this, arguments) * radians;\\n    ring = [];\\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\\n    circleStream(stream, r, p, 1);\\n    c = {type: \\\"Polygon\\\", coordinates: [ring]};\\n    ring = rotate = null;\\n    return c;\\n  }\\n\\n  circle.center = function(_) {\\n    return arguments.length ? (center = typeof _ === \\\"function\\\" ? _ : constant([+_[0], +_[1]]), circle) : center;\\n  };\\n\\n  circle.radius = function(_) {\\n    return arguments.length ? (radius = typeof _ === \\\"function\\\" ? _ : constant(+_), circle) : radius;\\n  };\\n\\n  circle.precision = function(_) {\\n    return arguments.length ? (precision = typeof _ === \\\"function\\\" ? _ : constant(+_), circle) : precision;\\n  };\\n\\n  return circle;\\n}\\n\\nfunction clipBuffer() {\\n  var lines = [],\\n      line;\\n  return {\\n    point: function(x, y) {\\n      line.push([x, y]);\\n    },\\n    lineStart: function() {\\n      lines.push(line = []);\\n    },\\n    lineEnd: noop,\\n    rejoin: function() {\\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\\n    },\\n    result: function() {\\n      var result = lines;\\n      lines = [];\\n      line = null;\\n      return result;\\n    }\\n  };\\n}\\n\\nfunction pointEqual(a, b) {\\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\\n}\\n\\nfunction Intersection(point, points, other, entry) {\\n  this.x = point;\\n  this.z = points;\\n  this.o = other; // another intersection\\n  this.e = entry; // is an entry?\\n  this.v = false; // visited\\n  this.n = this.p = null; // next & previous\\n}\\n\\n// A generalized polygon clipping algorithm: given a polygon that has been cut\\n// into its visible line segments, and rejoins the segments by interpolating\\n// along the clip edge.\\nfunction clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\\n  var subject = [],\\n      clip = [],\\n      i,\\n      n;\\n\\n  segments.forEach(function(segment) {\\n    if ((n = segment.length - 1) <= 0) return;\\n    var n, p0 = segment[0], p1 = segment[n], x;\\n\\n    // If the first and last points of a segment are coincident, then treat as a\\n    // closed ring. TODO if all rings are closed, then the winding order of the\\n    // exterior ring should be checked.\\n    if (pointEqual(p0, p1)) {\\n      stream.lineStart();\\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\\n      stream.lineEnd();\\n      return;\\n    }\\n\\n    subject.push(x = new Intersection(p0, segment, null, true));\\n    clip.push(x.o = new Intersection(p0, null, x, false));\\n    subject.push(x = new Intersection(p1, segment, null, false));\\n    clip.push(x.o = new Intersection(p1, null, x, true));\\n  });\\n\\n  if (!subject.length) return;\\n\\n  clip.sort(compareIntersection);\\n  link(subject);\\n  link(clip);\\n\\n  for (i = 0, n = clip.length; i < n; ++i) {\\n    clip[i].e = startInside = !startInside;\\n  }\\n\\n  var start = subject[0],\\n      points,\\n      point;\\n\\n  while (1) {\\n    // Find first unvisited intersection.\\n    var current = start,\\n        isSubject = true;\\n    while (current.v) if ((current = current.n) === start) return;\\n    points = current.z;\\n    stream.lineStart();\\n    do {\\n      current.v = current.o.v = true;\\n      if (current.e) {\\n        if (isSubject) {\\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.n.x, 1, stream);\\n        }\\n        current = current.n;\\n      } else {\\n        if (isSubject) {\\n          points = current.p.z;\\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\\n        } else {\\n          interpolate(current.x, current.p.x, -1, stream);\\n        }\\n        current = current.p;\\n      }\\n      current = current.o;\\n      points = current.z;\\n      isSubject = !isSubject;\\n    } while (!current.v);\\n    stream.lineEnd();\\n  }\\n}\\n\\nfunction link(array) {\\n  if (!(n = array.length)) return;\\n  var n,\\n      i = 0,\\n      a = array[0],\\n      b;\\n  while (++i < n) {\\n    a.n = b = array[i];\\n    b.p = a;\\n    a = b;\\n  }\\n  a.n = b = array[0];\\n  b.p = a;\\n}\\n\\nvar sum = adder();\\n\\nfunction polygonContains(polygon, point) {\\n  var lambda = point[0],\\n      phi = point[1],\\n      sinPhi = sin(phi),\\n      normal = [sin(lambda), -cos(lambda), 0],\\n      angle = 0,\\n      winding = 0;\\n\\n  sum.reset();\\n\\n  if (sinPhi === 1) phi = halfPi + epsilon;\\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\\n\\n  for (var i = 0, n = polygon.length; i < n; ++i) {\\n    if (!(m = (ring = polygon[i]).length)) continue;\\n    var ring,\\n        m,\\n        point0 = ring[m - 1],\\n        lambda0 = point0[0],\\n        phi0 = point0[1] / 2 + quarterPi,\\n        sinPhi0 = sin(phi0),\\n        cosPhi0 = cos(phi0);\\n\\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\\n      var point1 = ring[j],\\n          lambda1 = point1[0],\\n          phi1 = point1[1] / 2 + quarterPi,\\n          sinPhi1 = sin(phi1),\\n          cosPhi1 = cos(phi1),\\n          delta = lambda1 - lambda0,\\n          sign$$1 = delta >= 0 ? 1 : -1,\\n          absDelta = sign$$1 * delta,\\n          antimeridian = absDelta > pi,\\n          k = sinPhi0 * sinPhi1;\\n\\n      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\\n      angle += antimeridian ? delta + sign$$1 * tau : delta;\\n\\n      // Are the longitudes either side of the point\\u2019s meridian (lambda),\\n      // and are the latitudes smaller than the parallel (phi)?\\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\\n        cartesianNormalizeInPlace(arc);\\n        var intersection = cartesianCross(normal, arc);\\n        cartesianNormalizeInPlace(intersection);\\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\\n        }\\n      }\\n    }\\n  }\\n\\n  // First, determine whether the South pole is inside or outside:\\n  //\\n  // It is inside if:\\n  // * the polygon winds around it in a clockwise direction.\\n  // * the polygon does not (cumulatively) wind around it, but has a negative\\n  //   (counter-clockwise) area.\\n  //\\n  // Second, count the (signed) number of times a segment crosses a lambda\\n  // from the point to the South pole.  If it is zero, then the point is the\\n  // same side as the South pole.\\n\\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\\n}\\n\\nfunction clip(pointVisible, clipLine, interpolate, start) {\\n  return function(sink) {\\n    var line = clipLine(sink),\\n        ringBuffer = clipBuffer(),\\n        ringSink = clipLine(ringBuffer),\\n        polygonStarted = false,\\n        polygon,\\n        segments,\\n        ring;\\n\\n    var clip = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() {\\n        clip.point = pointRing;\\n        clip.lineStart = ringStart;\\n        clip.lineEnd = ringEnd;\\n        segments = [];\\n        polygon = [];\\n      },\\n      polygonEnd: function() {\\n        clip.point = point;\\n        clip.lineStart = lineStart;\\n        clip.lineEnd = lineEnd;\\n        segments = d3Array.merge(segments);\\n        var startInside = polygonContains(polygon, start);\\n        if (segments.length) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\\n        } else if (startInside) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          interpolate(null, null, 1, sink);\\n          sink.lineEnd();\\n        }\\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\\n        segments = polygon = null;\\n      },\\n      sphere: function() {\\n        sink.polygonStart();\\n        sink.lineStart();\\n        interpolate(null, null, 1, sink);\\n        sink.lineEnd();\\n        sink.polygonEnd();\\n      }\\n    };\\n\\n    function point(lambda, phi) {\\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\\n    }\\n\\n    function pointLine(lambda, phi) {\\n      line.point(lambda, phi);\\n    }\\n\\n    function lineStart() {\\n      clip.point = pointLine;\\n      line.lineStart();\\n    }\\n\\n    function lineEnd() {\\n      clip.point = point;\\n      line.lineEnd();\\n    }\\n\\n    function pointRing(lambda, phi) {\\n      ring.push([lambda, phi]);\\n      ringSink.point(lambda, phi);\\n    }\\n\\n    function ringStart() {\\n      ringSink.lineStart();\\n      ring = [];\\n    }\\n\\n    function ringEnd() {\\n      pointRing(ring[0][0], ring[0][1]);\\n      ringSink.lineEnd();\\n\\n      var clean = ringSink.clean(),\\n          ringSegments = ringBuffer.result(),\\n          i, n = ringSegments.length, m,\\n          segment,\\n          point;\\n\\n      ring.pop();\\n      polygon.push(ring);\\n      ring = null;\\n\\n      if (!n) return;\\n\\n      // No intersections.\\n      if (clean & 1) {\\n        segment = ringSegments[0];\\n        if ((m = segment.length - 1) > 0) {\\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\\n          sink.lineStart();\\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\\n          sink.lineEnd();\\n        }\\n        return;\\n      }\\n\\n      // Rejoin connected segments.\\n      // TODO reuse ringBuffer.rejoin()?\\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\\n\\n      segments.push(ringSegments.filter(validSegment));\\n    }\\n\\n    return clip;\\n  };\\n}\\n\\nfunction validSegment(segment) {\\n  return segment.length > 1;\\n}\\n\\n// Intersections are sorted along the clip edge. For both antimeridian cutting\\n// and circle clipping, the same comparison is used.\\nfunction compareIntersection(a, b) {\\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\\n}\\n\\nvar clipAntimeridian = clip(\\n  function() { return true; },\\n  clipAntimeridianLine,\\n  clipAntimeridianInterpolate,\\n  [-pi, -halfPi]\\n);\\n\\n// Takes a line and cuts into visible segments. Return values: 0 - there were\\n// intersections or the line was empty; 1 - no intersections; 2 - there were\\n// intersections, and the first and last segments should be rejoined.\\nfunction clipAntimeridianLine(stream) {\\n  var lambda0 = NaN,\\n      phi0 = NaN,\\n      sign0 = NaN,\\n      clean; // no intersections\\n\\n  return {\\n    lineStart: function() {\\n      stream.lineStart();\\n      clean = 1;\\n    },\\n    point: function(lambda1, phi1) {\\n      var sign1 = lambda1 > 0 ? pi : -pi,\\n          delta = abs(lambda1 - lambda0);\\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        stream.point(lambda1, phi0);\\n        clean = 0;\\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\\n        stream.point(sign0, phi0);\\n        stream.lineEnd();\\n        stream.lineStart();\\n        stream.point(sign1, phi0);\\n        clean = 0;\\n      }\\n      stream.point(lambda0 = lambda1, phi0 = phi1);\\n      sign0 = sign1;\\n    },\\n    lineEnd: function() {\\n      stream.lineEnd();\\n      lambda0 = phi0 = NaN;\\n    },\\n    clean: function() {\\n      return 2 - clean; // if intersections, rejoin first and last segments\\n    }\\n  };\\n}\\n\\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\\n  var cosPhi0,\\n      cosPhi1,\\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\\n  return abs(sinLambda0Lambda1) > epsilon\\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\\n      : (phi0 + phi1) / 2;\\n}\\n\\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\\n  var phi;\\n  if (from == null) {\\n    phi = direction * halfPi;\\n    stream.point(-pi, phi);\\n    stream.point(0, phi);\\n    stream.point(pi, phi);\\n    stream.point(pi, 0);\\n    stream.point(pi, -phi);\\n    stream.point(0, -phi);\\n    stream.point(-pi, -phi);\\n    stream.point(-pi, 0);\\n    stream.point(-pi, phi);\\n  } else if (abs(from[0] - to[0]) > epsilon) {\\n    var lambda = from[0] < to[0] ? pi : -pi;\\n    phi = direction * lambda / 2;\\n    stream.point(-lambda, phi);\\n    stream.point(0, phi);\\n    stream.point(lambda, phi);\\n  } else {\\n    stream.point(to[0], to[1]);\\n  }\\n}\\n\\nfunction clipCircle(radius) {\\n  var cr = cos(radius),\\n      delta = 6 * radians,\\n      smallRadius = cr > 0,\\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\\n\\n  function interpolate(from, to, direction, stream) {\\n    circleStream(stream, radius, delta, direction, from, to);\\n  }\\n\\n  function visible(lambda, phi) {\\n    return cos(lambda) * cos(phi) > cr;\\n  }\\n\\n  // Takes a line and cuts into visible segments. Return values used for polygon\\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\\n  // intersections 2 - there were intersections, and the first and last segments\\n  // should be rejoined.\\n  function clipLine(stream) {\\n    var point0, // previous point\\n        c0, // code for previous point\\n        v0, // visibility of previous point\\n        v00, // visibility of first point\\n        clean; // no intersections\\n    return {\\n      lineStart: function() {\\n        v00 = v0 = false;\\n        clean = 1;\\n      },\\n      point: function(lambda, phi) {\\n        var point1 = [lambda, phi],\\n            point2,\\n            v = visible(lambda, phi),\\n            c = smallRadius\\n              ? v ? 0 : code(lambda, phi)\\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\\n        // Handle degeneracies.\\n        // TODO ignore if not clipping polygons.\\n        if (v !== v0) {\\n          point2 = intersect(point0, point1);\\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\\n            point1[0] += epsilon;\\n            point1[1] += epsilon;\\n            v = visible(point1[0], point1[1]);\\n          }\\n        }\\n        if (v !== v0) {\\n          clean = 0;\\n          if (v) {\\n            // outside going in\\n            stream.lineStart();\\n            point2 = intersect(point1, point0);\\n            stream.point(point2[0], point2[1]);\\n          } else {\\n            // inside going out\\n            point2 = intersect(point0, point1);\\n            stream.point(point2[0], point2[1]);\\n            stream.lineEnd();\\n          }\\n          point0 = point2;\\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\\n          var t;\\n          // If the codes for two points are different, or are both zero,\\n          // and there this segment intersects with the small circle.\\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\\n            clean = 0;\\n            if (smallRadius) {\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n            } else {\\n              stream.point(t[1][0], t[1][1]);\\n              stream.lineEnd();\\n              stream.lineStart();\\n              stream.point(t[0][0], t[0][1]);\\n            }\\n          }\\n        }\\n        if (v && (!point0 || !pointEqual(point0, point1))) {\\n          stream.point(point1[0], point1[1]);\\n        }\\n        point0 = point1, v0 = v, c0 = c;\\n      },\\n      lineEnd: function() {\\n        if (v0) stream.lineEnd();\\n        point0 = null;\\n      },\\n      // Rejoin first and last segments if there were intersections and the first\\n      // and last points were visible.\\n      clean: function() {\\n        return clean | ((v00 && v0) << 1);\\n      }\\n    };\\n  }\\n\\n  // Intersects the great circle between a and b with the clip circle.\\n  function intersect(a, b, two) {\\n    var pa = cartesian(a),\\n        pb = cartesian(b);\\n\\n    // We have two planes, n1.p = d1 and n2.p = d2.\\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 \\u2a2f n2).\\n    var n1 = [1, 0, 0], // normal\\n        n2 = cartesianCross(pa, pb),\\n        n2n2 = cartesianDot(n2, n2),\\n        n1n2 = n2[0], // cartesianDot(n1, n2),\\n        determinant = n2n2 - n1n2 * n1n2;\\n\\n    // Two polar points.\\n    if (!determinant) return !two && a;\\n\\n    var c1 =  cr * n2n2 / determinant,\\n        c2 = -cr * n1n2 / determinant,\\n        n1xn2 = cartesianCross(n1, n2),\\n        A = cartesianScale(n1, c1),\\n        B = cartesianScale(n2, c2);\\n    cartesianAddInPlace(A, B);\\n\\n    // Solve |p(t)|^2 = 1.\\n    var u = n1xn2,\\n        w = cartesianDot(A, u),\\n        uu = cartesianDot(u, u),\\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\\n\\n    if (t2 < 0) return;\\n\\n    var t = sqrt(t2),\\n        q = cartesianScale(u, (-w - t) / uu);\\n    cartesianAddInPlace(q, A);\\n    q = spherical(q);\\n\\n    if (!two) return q;\\n\\n    // Two intersection points.\\n    var lambda0 = a[0],\\n        lambda1 = b[0],\\n        phi0 = a[1],\\n        phi1 = b[1],\\n        z;\\n\\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\\n\\n    var delta = lambda1 - lambda0,\\n        polar = abs(delta - pi) < epsilon,\\n        meridian = polar || delta < epsilon;\\n\\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\\n\\n    // Check that the first point is between a and b.\\n    if (meridian\\n        ? polar\\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\\n          : phi0 <= q[1] && q[1] <= phi1\\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\\n      var q1 = cartesianScale(u, (-w + t) / uu);\\n      cartesianAddInPlace(q1, A);\\n      return [q, spherical(q1)];\\n    }\\n  }\\n\\n  // Generates a 4-bit vector representing the location of a point relative to\\n  // the small circle's bounding box.\\n  function code(lambda, phi) {\\n    var r = smallRadius ? radius : pi - radius,\\n        code = 0;\\n    if (lambda < -r) code |= 1; // left\\n    else if (lambda > r) code |= 2; // right\\n    if (phi < -r) code |= 4; // below\\n    else if (phi > r) code |= 8; // above\\n    return code;\\n  }\\n\\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\\n}\\n\\nfunction clipLine(a, b, x0, y0, x1, y1) {\\n  var ax = a[0],\\n      ay = a[1],\\n      bx = b[0],\\n      by = b[1],\\n      t0 = 0,\\n      t1 = 1,\\n      dx = bx - ax,\\n      dy = by - ay,\\n      r;\\n\\n  r = x0 - ax;\\n  if (!dx && r > 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dx > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = x1 - ax;\\n  if (!dx && r < 0) return;\\n  r /= dx;\\n  if (dx < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dx > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  r = y0 - ay;\\n  if (!dy && r > 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  } else if (dy > 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  }\\n\\n  r = y1 - ay;\\n  if (!dy && r < 0) return;\\n  r /= dy;\\n  if (dy < 0) {\\n    if (r > t1) return;\\n    if (r > t0) t0 = r;\\n  } else if (dy > 0) {\\n    if (r < t0) return;\\n    if (r < t1) t1 = r;\\n  }\\n\\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\\n  return true;\\n}\\n\\nvar clipMax = 1e9, clipMin = -clipMax;\\n\\n// TODO Use d3-polygon\\u2019s polygonContains here for the ring check?\\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\\n\\nfunction clipRectangle(x0, y0, x1, y1) {\\n\\n  function visible(x, y) {\\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\\n  }\\n\\n  function interpolate(from, to, direction, stream) {\\n    var a = 0, a1 = 0;\\n    if (from == null\\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\\n        || comparePoint(from, to) < 0 ^ direction > 0) {\\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\\n      while ((a = (a + direction + 4) % 4) !== a1);\\n    } else {\\n      stream.point(to[0], to[1]);\\n    }\\n  }\\n\\n  function corner(p, direction) {\\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\\n  }\\n\\n  function compareIntersection(a, b) {\\n    return comparePoint(a.x, b.x);\\n  }\\n\\n  function comparePoint(a, b) {\\n    var ca = corner(a, 1),\\n        cb = corner(b, 1);\\n    return ca !== cb ? ca - cb\\n        : ca === 0 ? b[1] - a[1]\\n        : ca === 1 ? a[0] - b[0]\\n        : ca === 2 ? a[1] - b[1]\\n        : b[0] - a[0];\\n  }\\n\\n  return function(stream) {\\n    var activeStream = stream,\\n        bufferStream = clipBuffer(),\\n        segments,\\n        polygon,\\n        ring,\\n        x__, y__, v__, // first point\\n        x_, y_, v_, // previous point\\n        first,\\n        clean;\\n\\n    var clipStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: polygonStart,\\n      polygonEnd: polygonEnd\\n    };\\n\\n    function point(x, y) {\\n      if (visible(x, y)) activeStream.point(x, y);\\n    }\\n\\n    function polygonInside() {\\n      var winding = 0;\\n\\n      for (var i = 0, n = polygon.length; i < n; ++i) {\\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\\n        }\\n      }\\n\\n      return winding;\\n    }\\n\\n    // Buffer geometry within a polygon and then clip it en masse.\\n    function polygonStart() {\\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\\n    }\\n\\n    function polygonEnd() {\\n      var startInside = polygonInside(),\\n          cleanInside = clean && startInside,\\n          visible = (segments = d3Array.merge(segments)).length;\\n      if (cleanInside || visible) {\\n        stream.polygonStart();\\n        if (cleanInside) {\\n          stream.lineStart();\\n          interpolate(null, null, 1, stream);\\n          stream.lineEnd();\\n        }\\n        if (visible) {\\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\\n        }\\n        stream.polygonEnd();\\n      }\\n      activeStream = stream, segments = polygon = ring = null;\\n    }\\n\\n    function lineStart() {\\n      clipStream.point = linePoint;\\n      if (polygon) polygon.push(ring = []);\\n      first = true;\\n      v_ = false;\\n      x_ = y_ = NaN;\\n    }\\n\\n    // TODO rather than special-case polygons, simply handle them separately.\\n    // Ideally, coincident intersection points should be jittered to avoid\\n    // clipping issues.\\n    function lineEnd() {\\n      if (segments) {\\n        linePoint(x__, y__);\\n        if (v__ && v_) bufferStream.rejoin();\\n        segments.push(bufferStream.result());\\n      }\\n      clipStream.point = point;\\n      if (v_) activeStream.lineEnd();\\n    }\\n\\n    function linePoint(x, y) {\\n      var v = visible(x, y);\\n      if (polygon) ring.push([x, y]);\\n      if (first) {\\n        x__ = x, y__ = y, v__ = v;\\n        first = false;\\n        if (v) {\\n          activeStream.lineStart();\\n          activeStream.point(x, y);\\n        }\\n      } else {\\n        if (v && v_) activeStream.point(x, y);\\n        else {\\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\\n          if (clipLine(a, b, x0, y0, x1, y1)) {\\n            if (!v_) {\\n              activeStream.lineStart();\\n              activeStream.point(a[0], a[1]);\\n            }\\n            activeStream.point(b[0], b[1]);\\n            if (!v) activeStream.lineEnd();\\n            clean = false;\\n          } else if (v) {\\n            activeStream.lineStart();\\n            activeStream.point(x, y);\\n            clean = false;\\n          }\\n        }\\n      }\\n      x_ = x, y_ = y, v_ = v;\\n    }\\n\\n    return clipStream;\\n  };\\n}\\n\\nfunction extent() {\\n  var x0 = 0,\\n      y0 = 0,\\n      x1 = 960,\\n      y1 = 500,\\n      cache,\\n      cacheStream,\\n      clip;\\n\\n  return clip = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\\n    },\\n    extent: function(_) {\\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\\n    }\\n  };\\n}\\n\\nvar lengthSum = adder(),\\n    lambda0$2,\\n    sinPhi0$1,\\n    cosPhi0$1;\\n\\nvar lengthStream = {\\n  sphere: noop,\\n  point: noop,\\n  lineStart: lengthLineStart,\\n  lineEnd: noop,\\n  polygonStart: noop,\\n  polygonEnd: noop\\n};\\n\\nfunction lengthLineStart() {\\n  lengthStream.point = lengthPointFirst;\\n  lengthStream.lineEnd = lengthLineEnd;\\n}\\n\\nfunction lengthLineEnd() {\\n  lengthStream.point = lengthStream.lineEnd = noop;\\n}\\n\\nfunction lengthPointFirst(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\\n  lengthStream.point = lengthPoint;\\n}\\n\\nfunction lengthPoint(lambda, phi) {\\n  lambda *= radians, phi *= radians;\\n  var sinPhi = sin(phi),\\n      cosPhi = cos(phi),\\n      delta = abs(lambda - lambda0$2),\\n      cosDelta = cos(delta),\\n      sinDelta = sin(delta),\\n      x = cosPhi * sinDelta,\\n      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\\n      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\\n  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\\n}\\n\\nfunction length(object) {\\n  lengthSum.reset();\\n  geoStream(object, lengthStream);\\n  return +lengthSum;\\n}\\n\\nvar coordinates = [null, null],\\n    object = {type: \\\"LineString\\\", coordinates: coordinates};\\n\\nfunction distance(a, b) {\\n  coordinates[0] = a;\\n  coordinates[1] = b;\\n  return length(object);\\n}\\n\\nvar containsObjectType = {\\n  Feature: function(object, point) {\\n    return containsGeometry(object.geometry, point);\\n  },\\n  FeatureCollection: function(object, point) {\\n    var features = object.features, i = -1, n = features.length;\\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\\n    return false;\\n  }\\n};\\n\\nvar containsGeometryType = {\\n  Sphere: function() {\\n    return true;\\n  },\\n  Point: function(object, point) {\\n    return containsPoint(object.coordinates, point);\\n  },\\n  MultiPoint: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  LineString: function(object, point) {\\n    return containsLine(object.coordinates, point);\\n  },\\n  MultiLineString: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  Polygon: function(object, point) {\\n    return containsPolygon(object.coordinates, point);\\n  },\\n  MultiPolygon: function(object, point) {\\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\\n    return false;\\n  },\\n  GeometryCollection: function(object, point) {\\n    var geometries = object.geometries, i = -1, n = geometries.length;\\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\\n    return false;\\n  }\\n};\\n\\nfunction containsGeometry(geometry, point) {\\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\\n      ? containsGeometryType[geometry.type](geometry, point)\\n      : false;\\n}\\n\\nfunction containsPoint(coordinates, point) {\\n  return distance(coordinates, point) === 0;\\n}\\n\\nfunction containsLine(coordinates, point) {\\n  var ab = distance(coordinates[0], coordinates[1]),\\n      ao = distance(coordinates[0], point),\\n      ob = distance(point, coordinates[1]);\\n  return ao + ob <= ab + epsilon;\\n}\\n\\nfunction containsPolygon(coordinates, point) {\\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\\n}\\n\\nfunction ringRadians(ring) {\\n  return ring = ring.map(pointRadians), ring.pop(), ring;\\n}\\n\\nfunction pointRadians(point) {\\n  return [point[0] * radians, point[1] * radians];\\n}\\n\\nfunction contains(object, point) {\\n  return (object && containsObjectType.hasOwnProperty(object.type)\\n      ? containsObjectType[object.type]\\n      : containsGeometry)(object, point);\\n}\\n\\nfunction graticuleX(y0, y1, dy) {\\n  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);\\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\\n}\\n\\nfunction graticuleY(x0, x1, dx) {\\n  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);\\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\\n}\\n\\nfunction graticule() {\\n  var x1, x0, X1, X0,\\n      y1, y0, Y1, Y0,\\n      dx = 10, dy = dx, DX = 90, DY = 360,\\n      x, y, X, Y,\\n      precision = 2.5;\\n\\n  function graticule() {\\n    return {type: \\\"MultiLineString\\\", coordinates: lines()};\\n  }\\n\\n  function lines() {\\n    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)\\n        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\\n        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\\n        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\\n  }\\n\\n  graticule.lines = function() {\\n    return lines().map(function(coordinates) { return {type: \\\"LineString\\\", coordinates: coordinates}; });\\n  };\\n\\n  graticule.outline = function() {\\n    return {\\n      type: \\\"Polygon\\\",\\n      coordinates: [\\n        X(X0).concat(\\n        Y(Y1).slice(1),\\n        X(X1).reverse().slice(1),\\n        Y(Y0).reverse().slice(1))\\n      ]\\n    };\\n  };\\n\\n  graticule.extent = function(_) {\\n    if (!arguments.length) return graticule.extentMinor();\\n    return graticule.extentMajor(_).extentMinor(_);\\n  };\\n\\n  graticule.extentMajor = function(_) {\\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\\n    X0 = +_[0][0], X1 = +_[1][0];\\n    Y0 = +_[0][1], Y1 = +_[1][1];\\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.extentMinor = function(_) {\\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\\n    x0 = +_[0][0], x1 = +_[1][0];\\n    y0 = +_[0][1], y1 = +_[1][1];\\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\\n    return graticule.precision(precision);\\n  };\\n\\n  graticule.step = function(_) {\\n    if (!arguments.length) return graticule.stepMinor();\\n    return graticule.stepMajor(_).stepMinor(_);\\n  };\\n\\n  graticule.stepMajor = function(_) {\\n    if (!arguments.length) return [DX, DY];\\n    DX = +_[0], DY = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.stepMinor = function(_) {\\n    if (!arguments.length) return [dx, dy];\\n    dx = +_[0], dy = +_[1];\\n    return graticule;\\n  };\\n\\n  graticule.precision = function(_) {\\n    if (!arguments.length) return precision;\\n    precision = +_;\\n    x = graticuleX(y0, y1, 90);\\n    y = graticuleY(x0, x1, precision);\\n    X = graticuleX(Y0, Y1, 90);\\n    Y = graticuleY(X0, X1, precision);\\n    return graticule;\\n  };\\n\\n  return graticule\\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\\n}\\n\\nfunction graticule10() {\\n  return graticule()();\\n}\\n\\nfunction interpolate(a, b) {\\n  var x0 = a[0] * radians,\\n      y0 = a[1] * radians,\\n      x1 = b[0] * radians,\\n      y1 = b[1] * radians,\\n      cy0 = cos(y0),\\n      sy0 = sin(y0),\\n      cy1 = cos(y1),\\n      sy1 = sin(y1),\\n      kx0 = cy0 * cos(x0),\\n      ky0 = cy0 * sin(x0),\\n      kx1 = cy1 * cos(x1),\\n      ky1 = cy1 * sin(x1),\\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\\n      k = sin(d);\\n\\n  var interpolate = d ? function(t) {\\n    var B = sin(t *= d) / k,\\n        A = sin(d - t) / k,\\n        x = A * kx0 + B * kx1,\\n        y = A * ky0 + B * ky1,\\n        z = A * sy0 + B * sy1;\\n    return [\\n      atan2(y, x) * degrees,\\n      atan2(z, sqrt(x * x + y * y)) * degrees\\n    ];\\n  } : function() {\\n    return [x0 * degrees, y0 * degrees];\\n  };\\n\\n  interpolate.distance = d;\\n\\n  return interpolate;\\n}\\n\\nfunction identity(x) {\\n  return x;\\n}\\n\\nvar areaSum$1 = adder(),\\n    areaRingSum$1 = adder(),\\n    x00,\\n    y00,\\n    x0$1,\\n    y0$1;\\n\\nvar areaStream$1 = {\\n  point: noop,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: function() {\\n    areaStream$1.lineStart = areaRingStart$1;\\n    areaStream$1.lineEnd = areaRingEnd$1;\\n  },\\n  polygonEnd: function() {\\n    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\\n    areaSum$1.add(abs(areaRingSum$1));\\n    areaRingSum$1.reset();\\n  },\\n  result: function() {\\n    var area = areaSum$1 / 2;\\n    areaSum$1.reset();\\n    return area;\\n  }\\n};\\n\\nfunction areaRingStart$1() {\\n  areaStream$1.point = areaPointFirst$1;\\n}\\n\\nfunction areaPointFirst$1(x, y) {\\n  areaStream$1.point = areaPoint$1;\\n  x00 = x0$1 = x, y00 = y0$1 = y;\\n}\\n\\nfunction areaPoint$1(x, y) {\\n  areaRingSum$1.add(y0$1 * x - x0$1 * y);\\n  x0$1 = x, y0$1 = y;\\n}\\n\\nfunction areaRingEnd$1() {\\n  areaPoint$1(x00, y00);\\n}\\n\\nvar x0$2 = Infinity,\\n    y0$2 = x0$2,\\n    x1 = -x0$2,\\n    y1 = x1;\\n\\nvar boundsStream$1 = {\\n  point: boundsPoint$1,\\n  lineStart: noop,\\n  lineEnd: noop,\\n  polygonStart: noop,\\n  polygonEnd: noop,\\n  result: function() {\\n    var bounds = [[x0$2, y0$2], [x1, y1]];\\n    x1 = y1 = -(y0$2 = x0$2 = Infinity);\\n    return bounds;\\n  }\\n};\\n\\nfunction boundsPoint$1(x, y) {\\n  if (x < x0$2) x0$2 = x;\\n  if (x > x1) x1 = x;\\n  if (y < y0$2) y0$2 = y;\\n  if (y > y1) y1 = y;\\n}\\n\\n// TODO Enforce positive area for exterior, negative area for interior?\\n\\nvar X0$1 = 0,\\n    Y0$1 = 0,\\n    Z0$1 = 0,\\n    X1$1 = 0,\\n    Y1$1 = 0,\\n    Z1$1 = 0,\\n    X2$1 = 0,\\n    Y2$1 = 0,\\n    Z2$1 = 0,\\n    x00$1,\\n    y00$1,\\n    x0$3,\\n    y0$3;\\n\\nvar centroidStream$1 = {\\n  point: centroidPoint$1,\\n  lineStart: centroidLineStart$1,\\n  lineEnd: centroidLineEnd$1,\\n  polygonStart: function() {\\n    centroidStream$1.lineStart = centroidRingStart$1;\\n    centroidStream$1.lineEnd = centroidRingEnd$1;\\n  },\\n  polygonEnd: function() {\\n    centroidStream$1.point = centroidPoint$1;\\n    centroidStream$1.lineStart = centroidLineStart$1;\\n    centroidStream$1.lineEnd = centroidLineEnd$1;\\n  },\\n  result: function() {\\n    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\\n        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\\n        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\\n        : [NaN, NaN];\\n    X0$1 = Y0$1 = Z0$1 =\\n    X1$1 = Y1$1 = Z1$1 =\\n    X2$1 = Y2$1 = Z2$1 = 0;\\n    return centroid;\\n  }\\n};\\n\\nfunction centroidPoint$1(x, y) {\\n  X0$1 += x;\\n  Y0$1 += y;\\n  ++Z0$1;\\n}\\n\\nfunction centroidLineStart$1() {\\n  centroidStream$1.point = centroidPointFirstLine;\\n}\\n\\nfunction centroidPointFirstLine(x, y) {\\n  centroidStream$1.point = centroidPointLine;\\n  centroidPoint$1(x0$3 = x, y0$3 = y);\\n}\\n\\nfunction centroidPointLine(x, y) {\\n  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);\\n  X1$1 += z * (x0$3 + x) / 2;\\n  Y1$1 += z * (y0$3 + y) / 2;\\n  Z1$1 += z;\\n  centroidPoint$1(x0$3 = x, y0$3 = y);\\n}\\n\\nfunction centroidLineEnd$1() {\\n  centroidStream$1.point = centroidPoint$1;\\n}\\n\\nfunction centroidRingStart$1() {\\n  centroidStream$1.point = centroidPointFirstRing;\\n}\\n\\nfunction centroidRingEnd$1() {\\n  centroidPointRing(x00$1, y00$1);\\n}\\n\\nfunction centroidPointFirstRing(x, y) {\\n  centroidStream$1.point = centroidPointRing;\\n  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\\n}\\n\\nfunction centroidPointRing(x, y) {\\n  var dx = x - x0$3,\\n      dy = y - y0$3,\\n      z = sqrt(dx * dx + dy * dy);\\n\\n  X1$1 += z * (x0$3 + x) / 2;\\n  Y1$1 += z * (y0$3 + y) / 2;\\n  Z1$1 += z;\\n\\n  z = y0$3 * x - x0$3 * y;\\n  X2$1 += z * (x0$3 + x);\\n  Y2$1 += z * (y0$3 + y);\\n  Z2$1 += z * 3;\\n  centroidPoint$1(x0$3 = x, y0$3 = y);\\n}\\n\\nfunction PathContext(context) {\\n  this._context = context;\\n}\\n\\nPathContext.prototype = {\\n  _radius: 4.5,\\n  pointRadius: function(_) {\\n    return this._radius = _, this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._context.closePath();\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._context.moveTo(x, y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._context.lineTo(x, y);\\n        break;\\n      }\\n      default: {\\n        this._context.moveTo(x + this._radius, y);\\n        this._context.arc(x, y, this._radius, 0, tau);\\n        break;\\n      }\\n    }\\n  },\\n  result: noop\\n};\\n\\nvar lengthSum$1 = adder(),\\n    lengthRing,\\n    x00$2,\\n    y00$2,\\n    x0$4,\\n    y0$4;\\n\\nvar lengthStream$1 = {\\n  point: noop,\\n  lineStart: function() {\\n    lengthStream$1.point = lengthPointFirst$1;\\n  },\\n  lineEnd: function() {\\n    if (lengthRing) lengthPoint$1(x00$2, y00$2);\\n    lengthStream$1.point = noop;\\n  },\\n  polygonStart: function() {\\n    lengthRing = true;\\n  },\\n  polygonEnd: function() {\\n    lengthRing = null;\\n  },\\n  result: function() {\\n    var length = +lengthSum$1;\\n    lengthSum$1.reset();\\n    return length;\\n  }\\n};\\n\\nfunction lengthPointFirst$1(x, y) {\\n  lengthStream$1.point = lengthPoint$1;\\n  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\\n}\\n\\nfunction lengthPoint$1(x, y) {\\n  x0$4 -= x, y0$4 -= y;\\n  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\\n  x0$4 = x, y0$4 = y;\\n}\\n\\nfunction PathString() {\\n  this._string = [];\\n}\\n\\nPathString.prototype = {\\n  _radius: 4.5,\\n  _circle: circle$1(4.5),\\n  pointRadius: function(_) {\\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\\n    return this;\\n  },\\n  polygonStart: function() {\\n    this._line = 0;\\n  },\\n  polygonEnd: function() {\\n    this._line = NaN;\\n  },\\n  lineStart: function() {\\n    this._point = 0;\\n  },\\n  lineEnd: function() {\\n    if (this._line === 0) this._string.push(\\\"Z\\\");\\n    this._point = NaN;\\n  },\\n  point: function(x, y) {\\n    switch (this._point) {\\n      case 0: {\\n        this._string.push(\\\"M\\\", x, \\\",\\\", y);\\n        this._point = 1;\\n        break;\\n      }\\n      case 1: {\\n        this._string.push(\\\"L\\\", x, \\\",\\\", y);\\n        break;\\n      }\\n      default: {\\n        if (this._circle == null) this._circle = circle$1(this._radius);\\n        this._string.push(\\\"M\\\", x, \\\",\\\", y, this._circle);\\n        break;\\n      }\\n    }\\n  },\\n  result: function() {\\n    if (this._string.length) {\\n      var result = this._string.join(\\\"\\\");\\n      this._string = [];\\n      return result;\\n    } else {\\n      return null;\\n    }\\n  }\\n};\\n\\nfunction circle$1(radius) {\\n  return \\\"m0,\\\" + radius\\n      + \\\"a\\\" + radius + \\\",\\\" + radius + \\\" 0 1,1 0,\\\" + -2 * radius\\n      + \\\"a\\\" + radius + \\\",\\\" + radius + \\\" 0 1,1 0,\\\" + 2 * radius\\n      + \\\"z\\\";\\n}\\n\\nfunction index(projection, context) {\\n  var pointRadius = 4.5,\\n      projectionStream,\\n      contextStream;\\n\\n  function path(object) {\\n    if (object) {\\n      if (typeof pointRadius === \\\"function\\\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\\n      geoStream(object, projectionStream(contextStream));\\n    }\\n    return contextStream.result();\\n  }\\n\\n  path.area = function(object) {\\n    geoStream(object, projectionStream(areaStream$1));\\n    return areaStream$1.result();\\n  };\\n\\n  path.measure = function(object) {\\n    geoStream(object, projectionStream(lengthStream$1));\\n    return lengthStream$1.result();\\n  };\\n\\n  path.bounds = function(object) {\\n    geoStream(object, projectionStream(boundsStream$1));\\n    return boundsStream$1.result();\\n  };\\n\\n  path.centroid = function(object) {\\n    geoStream(object, projectionStream(centroidStream$1));\\n    return centroidStream$1.result();\\n  };\\n\\n  path.projection = function(_) {\\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\\n  };\\n\\n  path.context = function(_) {\\n    if (!arguments.length) return context;\\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\\n    if (typeof pointRadius !== \\\"function\\\") contextStream.pointRadius(pointRadius);\\n    return path;\\n  };\\n\\n  path.pointRadius = function(_) {\\n    if (!arguments.length) return pointRadius;\\n    pointRadius = typeof _ === \\\"function\\\" ? _ : (contextStream.pointRadius(+_), +_);\\n    return path;\\n  };\\n\\n  return path.projection(projection).context(context);\\n}\\n\\nfunction transform(methods) {\\n  return {\\n    stream: transformer(methods)\\n  };\\n}\\n\\nfunction transformer(methods) {\\n  return function(stream) {\\n    var s = new TransformStream;\\n    for (var key in methods) s[key] = methods[key];\\n    s.stream = stream;\\n    return s;\\n  };\\n}\\n\\nfunction TransformStream() {}\\n\\nTransformStream.prototype = {\\n  constructor: TransformStream,\\n  point: function(x, y) { this.stream.point(x, y); },\\n  sphere: function() { this.stream.sphere(); },\\n  lineStart: function() { this.stream.lineStart(); },\\n  lineEnd: function() { this.stream.lineEnd(); },\\n  polygonStart: function() { this.stream.polygonStart(); },\\n  polygonEnd: function() { this.stream.polygonEnd(); }\\n};\\n\\nfunction fit(projection, fitBounds, object) {\\n  var clip = projection.clipExtent && projection.clipExtent();\\n  projection.scale(150).translate([0, 0]);\\n  if (clip != null) projection.clipExtent(null);\\n  geoStream(object, projection.stream(boundsStream$1));\\n  fitBounds(boundsStream$1.result());\\n  if (clip != null) projection.clipExtent(clip);\\n  return projection;\\n}\\n\\nfunction fitExtent(projection, extent, object) {\\n  return fit(projection, function(b) {\\n    var w = extent[1][0] - extent[0][0],\\n        h = extent[1][1] - extent[0][1],\\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\nfunction fitSize(projection, size, object) {\\n  return fitExtent(projection, [[0, 0], size], object);\\n}\\n\\nfunction fitWidth(projection, width, object) {\\n  return fit(projection, function(b) {\\n    var w = +width,\\n        k = w / (b[1][0] - b[0][0]),\\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\\n        y = -k * b[0][1];\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\nfunction fitHeight(projection, height, object) {\\n  return fit(projection, function(b) {\\n    var h = +height,\\n        k = h / (b[1][1] - b[0][1]),\\n        x = -k * b[0][0],\\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\\n    projection.scale(150 * k).translate([x, y]);\\n  }, object);\\n}\\n\\nvar maxDepth = 16, // maximum depth of subdivision\\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\\n\\nfunction resample(project, delta2) {\\n  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\\n}\\n\\nfunction resampleNone(project) {\\n  return transformer({\\n    point: function(x, y) {\\n      x = project(x, y);\\n      this.stream.point(x[0], x[1]);\\n    }\\n  });\\n}\\n\\nfunction resample$1(project, delta2) {\\n\\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\\n    var dx = x1 - x0,\\n        dy = y1 - y0,\\n        d2 = dx * dx + dy * dy;\\n    if (d2 > 4 * delta2 && depth--) {\\n      var a = a0 + a1,\\n          b = b0 + b1,\\n          c = c0 + c1,\\n          m = sqrt(a * a + b * b + c * c),\\n          phi2 = asin(c /= m),\\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\\n          p = project(lambda2, phi2),\\n          x2 = p[0],\\n          y2 = p[1],\\n          dx2 = x2 - x0,\\n          dy2 = y2 - y0,\\n          dz = dy * dx2 - dx * dy2;\\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\\n        stream.point(x2, y2);\\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\\n      }\\n    }\\n  }\\n  return function(stream) {\\n    var lambda00, x00, y00, a00, b00, c00, // first point\\n        lambda0, x0, y0, a0, b0, c0; // previous point\\n\\n    var resampleStream = {\\n      point: point,\\n      lineStart: lineStart,\\n      lineEnd: lineEnd,\\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\\n    };\\n\\n    function point(x, y) {\\n      x = project(x, y);\\n      stream.point(x[0], x[1]);\\n    }\\n\\n    function lineStart() {\\n      x0 = NaN;\\n      resampleStream.point = linePoint;\\n      stream.lineStart();\\n    }\\n\\n    function linePoint(lambda, phi) {\\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\\n      stream.point(x0, y0);\\n    }\\n\\n    function lineEnd() {\\n      resampleStream.point = point;\\n      stream.lineEnd();\\n    }\\n\\n    function ringStart() {\\n      lineStart();\\n      resampleStream.point = ringPoint;\\n      resampleStream.lineEnd = ringEnd;\\n    }\\n\\n    function ringPoint(lambda, phi) {\\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\\n      resampleStream.point = linePoint;\\n    }\\n\\n    function ringEnd() {\\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\\n      resampleStream.lineEnd = lineEnd;\\n      lineEnd();\\n    }\\n\\n    return resampleStream;\\n  };\\n}\\n\\nvar transformRadians = transformer({\\n  point: function(x, y) {\\n    this.stream.point(x * radians, y * radians);\\n  }\\n});\\n\\nfunction transformRotate(rotate) {\\n  return transformer({\\n    point: function(x, y) {\\n      var r = rotate(x, y);\\n      return this.stream.point(r[0], r[1]);\\n    }\\n  });\\n}\\n\\nfunction scaleTranslate(k, dx, dy) {\\n  function transform$$1(x, y) {\\n    return [dx + k * x, dy - k * y];\\n  }\\n  transform$$1.invert = function(x, y) {\\n    return [(x - dx) / k, (dy - y) / k];\\n  };\\n  return transform$$1;\\n}\\n\\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\\n  var cosAlpha = cos(alpha),\\n      sinAlpha = sin(alpha),\\n      a = cosAlpha * k,\\n      b = sinAlpha * k,\\n      ai = cosAlpha / k,\\n      bi = sinAlpha / k,\\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\\n  function transform$$1(x, y) {\\n    return [a * x - b * y + dx, dy - b * x - a * y];\\n  }\\n  transform$$1.invert = function(x, y) {\\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\\n  };\\n  return transform$$1;\\n}\\n\\nfunction projection(project) {\\n  return projectionMutator(function() { return project; })();\\n}\\n\\nfunction projectionMutator(projectAt) {\\n  var project,\\n      k = 150, // scale\\n      x = 480, y = 250, // translate\\n      lambda = 0, phi = 0, // center\\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\\n      alpha = 0, // post-rotate\\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\\n      delta2 = 0.5, // precision\\n      projectResample,\\n      projectTransform,\\n      projectRotateTransform,\\n      cache,\\n      cacheStream;\\n\\n  function projection(point) {\\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\\n  }\\n\\n  function invert(point) {\\n    point = projectRotateTransform.invert(point[0], point[1]);\\n    return point && [point[0] * degrees, point[1] * degrees];\\n  }\\n\\n  projection.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\\n  };\\n\\n  projection.preclip = function(_) {\\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\\n  };\\n\\n  projection.postclip = function(_) {\\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\\n  };\\n\\n  projection.clipAngle = function(_) {\\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\\n  };\\n\\n  projection.clipExtent = function(_) {\\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  projection.scale = function(_) {\\n    return arguments.length ? (k = +_, recenter()) : k;\\n  };\\n\\n  projection.translate = function(_) {\\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\\n  };\\n\\n  projection.center = function(_) {\\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\\n  };\\n\\n  projection.rotate = function(_) {\\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\\n  };\\n\\n  projection.angle = function(_) {\\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\\n  };\\n\\n  projection.precision = function(_) {\\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\\n  };\\n\\n  projection.fitExtent = function(extent, object) {\\n    return fitExtent(projection, extent, object);\\n  };\\n\\n  projection.fitSize = function(size, object) {\\n    return fitSize(projection, size, object);\\n  };\\n\\n  projection.fitWidth = function(width, object) {\\n    return fitWidth(projection, width, object);\\n  };\\n\\n  projection.fitHeight = function(height, object) {\\n    return fitHeight(projection, height, object);\\n  };\\n\\n  function recenter() {\\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\\n        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\\n    projectTransform = compose(project, transform$$1);\\n    projectRotateTransform = compose(rotate, projectTransform);\\n    projectResample = resample(projectTransform, delta2);\\n    return reset();\\n  }\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return function() {\\n    project = projectAt.apply(this, arguments);\\n    projection.invert = project.invert && invert;\\n    return recenter();\\n  };\\n}\\n\\nfunction conicProjection(projectAt) {\\n  var phi0 = 0,\\n      phi1 = pi / 3,\\n      m = projectionMutator(projectAt),\\n      p = m(phi0, phi1);\\n\\n  p.parallels = function(_) {\\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\\n  };\\n\\n  return p;\\n}\\n\\nfunction cylindricalEqualAreaRaw(phi0) {\\n  var cosPhi0 = cos(phi0);\\n\\n  function forward(lambda, phi) {\\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\\n  }\\n\\n  forward.invert = function(x, y) {\\n    return [x / cosPhi0, asin(y * cosPhi0)];\\n  };\\n\\n  return forward;\\n}\\n\\nfunction conicEqualAreaRaw(y0, y1) {\\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\\n\\n  // Are the parallels symmetrical around the Equator?\\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\\n\\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\\n\\n  function project(x, y) {\\n    var r = sqrt(c - 2 * n * sin(y)) / n;\\n    return [r * sin(x *= n), r0 - r * cos(x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var r0y = r0 - y;\\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\\n  };\\n\\n  return project;\\n}\\n\\nfunction conicEqualArea() {\\n  return conicProjection(conicEqualAreaRaw)\\n      .scale(155.424)\\n      .center([0, 33.6442]);\\n}\\n\\nfunction albers() {\\n  return conicEqualArea()\\n      .parallels([29.5, 45.5])\\n      .scale(1070)\\n      .translate([480, 250])\\n      .rotate([96, 0])\\n      .center([-0.6, 38.7]);\\n}\\n\\n// The projections must have mutually exclusive clip regions on the sphere,\\n// as this will avoid emitting interleaving lines and polygons.\\nfunction multiplex(streams) {\\n  var n = streams.length;\\n  return {\\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\\n  };\\n}\\n\\n// A composite projection for the United States, configured by default for\\n// 960\\u00d7500. The projection also works quite well at 960\\u00d7600 if you change the\\n// scale to 1285 and adjust the translate accordingly. The set of standard\\n// parallels for each region comes from USGS, which is published here:\\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\\nfunction albersUsa() {\\n  var cache,\\n      cacheStream,\\n      lower48 = albers(), lower48Point,\\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\\n\\n  function albersUsa(coordinates) {\\n    var x = coordinates[0], y = coordinates[1];\\n    return point = null,\\n        (lower48Point.point(x, y), point)\\n        || (alaskaPoint.point(x, y), point)\\n        || (hawaiiPoint.point(x, y), point);\\n  }\\n\\n  albersUsa.invert = function(coordinates) {\\n    var k = lower48.scale(),\\n        t = lower48.translate(),\\n        x = (coordinates[0] - t[0]) / k,\\n        y = (coordinates[1] - t[1]) / k;\\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\\n        : lower48).invert(coordinates);\\n  };\\n\\n  albersUsa.stream = function(stream) {\\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\\n  };\\n\\n  albersUsa.precision = function(_) {\\n    if (!arguments.length) return lower48.precision();\\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\\n    return reset();\\n  };\\n\\n  albersUsa.scale = function(_) {\\n    if (!arguments.length) return lower48.scale();\\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\\n    return albersUsa.translate(lower48.translate());\\n  };\\n\\n  albersUsa.translate = function(_) {\\n    if (!arguments.length) return lower48.translate();\\n    var k = lower48.scale(), x = +_[0], y = +_[1];\\n\\n    lower48Point = lower48\\n        .translate(_)\\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\\n        .stream(pointStream);\\n\\n    alaskaPoint = alaska\\n        .translate([x - 0.307 * k, y + 0.201 * k])\\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\\n        .stream(pointStream);\\n\\n    hawaiiPoint = hawaii\\n        .translate([x - 0.205 * k, y + 0.212 * k])\\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\\n        .stream(pointStream);\\n\\n    return reset();\\n  };\\n\\n  albersUsa.fitExtent = function(extent, object) {\\n    return fitExtent(albersUsa, extent, object);\\n  };\\n\\n  albersUsa.fitSize = function(size, object) {\\n    return fitSize(albersUsa, size, object);\\n  };\\n\\n  albersUsa.fitWidth = function(width, object) {\\n    return fitWidth(albersUsa, width, object);\\n  };\\n\\n  albersUsa.fitHeight = function(height, object) {\\n    return fitHeight(albersUsa, height, object);\\n  };\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return albersUsa;\\n  }\\n\\n  return albersUsa.scale(1070);\\n}\\n\\nfunction azimuthalRaw(scale) {\\n  return function(x, y) {\\n    var cx = cos(x),\\n        cy = cos(y),\\n        k = scale(cx * cy);\\n    return [\\n      k * cy * sin(x),\\n      k * sin(y)\\n    ];\\n  }\\n}\\n\\nfunction azimuthalInvert(angle) {\\n  return function(x, y) {\\n    var z = sqrt(x * x + y * y),\\n        c = angle(z),\\n        sc = sin(c),\\n        cc = cos(c);\\n    return [\\n      atan2(x * sc, z * cc),\\n      asin(z && y * sc / z)\\n    ];\\n  }\\n}\\n\\nvar azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\\n  return sqrt(2 / (1 + cxcy));\\n});\\n\\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\\n  return 2 * asin(z / 2);\\n});\\n\\nfunction azimuthalEqualArea() {\\n  return projection(azimuthalEqualAreaRaw)\\n      .scale(124.75)\\n      .clipAngle(180 - 1e-3);\\n}\\n\\nvar azimuthalEquidistantRaw = azimuthalRaw(function(c) {\\n  return (c = acos(c)) && c / sin(c);\\n});\\n\\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\\n  return z;\\n});\\n\\nfunction azimuthalEquidistant() {\\n  return projection(azimuthalEquidistantRaw)\\n      .scale(79.4188)\\n      .clipAngle(180 - 1e-3);\\n}\\n\\nfunction mercatorRaw(lambda, phi) {\\n  return [lambda, log(tan((halfPi + phi) / 2))];\\n}\\n\\nmercatorRaw.invert = function(x, y) {\\n  return [x, 2 * atan(exp(y)) - halfPi];\\n};\\n\\nfunction mercator() {\\n  return mercatorProjection(mercatorRaw)\\n      .scale(961 / tau);\\n}\\n\\nfunction mercatorProjection(project) {\\n  var m = projection(project),\\n      center = m.center,\\n      scale = m.scale,\\n      translate = m.translate,\\n      clipExtent = m.clipExtent,\\n      x0 = null, y0, x1, y1; // clip extent\\n\\n  m.scale = function(_) {\\n    return arguments.length ? (scale(_), reclip()) : scale();\\n  };\\n\\n  m.translate = function(_) {\\n    return arguments.length ? (translate(_), reclip()) : translate();\\n  };\\n\\n  m.center = function(_) {\\n    return arguments.length ? (center(_), reclip()) : center();\\n  };\\n\\n  m.clipExtent = function(_) {\\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n  };\\n\\n  function reclip() {\\n    var k = pi * scale(),\\n        t = m(rotation(m.rotate()).invert([0, 0]));\\n    return clipExtent(x0 == null\\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\\n  }\\n\\n  return reclip();\\n}\\n\\nfunction tany(y) {\\n  return tan((halfPi + y) / 2);\\n}\\n\\nfunction conicConformalRaw(y0, y1) {\\n  var cy0 = cos(y0),\\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\\n      f = cy0 * pow(tany(y0), n) / n;\\n\\n  if (!n) return mercatorRaw;\\n\\n  function project(x, y) {\\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\\n    var r = f / pow(tany(y), n);\\n    return [r * sin(n * x), f - r * cos(n * x)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\\n  };\\n\\n  return project;\\n}\\n\\nfunction conicConformal() {\\n  return conicProjection(conicConformalRaw)\\n      .scale(109.5)\\n      .parallels([30, 30]);\\n}\\n\\nfunction equirectangularRaw(lambda, phi) {\\n  return [lambda, phi];\\n}\\n\\nequirectangularRaw.invert = equirectangularRaw;\\n\\nfunction equirectangular() {\\n  return projection(equirectangularRaw)\\n      .scale(152.63);\\n}\\n\\nfunction conicEquidistantRaw(y0, y1) {\\n  var cy0 = cos(y0),\\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\\n      g = cy0 / n + y0;\\n\\n  if (abs(n) < epsilon) return equirectangularRaw;\\n\\n  function project(x, y) {\\n    var gy = g - y, nx = n * x;\\n    return [gy * sin(nx), g - gy * cos(nx)];\\n  }\\n\\n  project.invert = function(x, y) {\\n    var gy = g - y;\\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\\n  };\\n\\n  return project;\\n}\\n\\nfunction conicEquidistant() {\\n  return conicProjection(conicEquidistantRaw)\\n      .scale(131.154)\\n      .center([0, 13.9389]);\\n}\\n\\nvar A1 = 1.340264,\\n    A2 = -0.081106,\\n    A3 = 0.000893,\\n    A4 = 0.003796,\\n    M = sqrt(3) / 2,\\n    iterations = 12;\\n\\nfunction equalEarthRaw(lambda, phi) {\\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\\n  return [\\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\\n  ];\\n}\\n\\nequalEarthRaw.invert = function(x, y) {\\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\\n    if (abs(delta) < epsilon2) break;\\n  }\\n  return [\\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\\n    asin(sin(l) / M)\\n  ];\\n};\\n\\nfunction equalEarth() {\\n  return projection(equalEarthRaw)\\n      .scale(177.158);\\n}\\n\\nfunction gnomonicRaw(x, y) {\\n  var cy = cos(y), k = cos(x) * cy;\\n  return [cy * sin(x) / k, sin(y) / k];\\n}\\n\\ngnomonicRaw.invert = azimuthalInvert(atan);\\n\\nfunction gnomonic() {\\n  return projection(gnomonicRaw)\\n      .scale(144.049)\\n      .clipAngle(60);\\n}\\n\\nfunction scaleTranslate$1(kx, ky, tx, ty) {\\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\\n    point: function(x, y) {\\n      this.stream.point(x * kx + tx, y * ky + ty);\\n    }\\n  });\\n}\\n\\nfunction identity$1() {\\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect\\n      x0 = null, y0, x1, y1, // clip extent\\n      postclip = identity,\\n      cache,\\n      cacheStream,\\n      projection;\\n\\n  function reset() {\\n    cache = cacheStream = null;\\n    return projection;\\n  }\\n\\n  return projection = {\\n    stream: function(stream) {\\n      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));\\n    },\\n    postclip: function(_) {\\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\\n    },\\n    clipExtent: function(_) {\\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\\n    },\\n    scale: function(_) {\\n      return arguments.length ? (transform$$1 = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;\\n    },\\n    translate: function(_) {\\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\\n    },\\n    reflectX: function(_) {\\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\\n    },\\n    reflectY: function(_) {\\n      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\\n    },\\n    fitExtent: function(extent, object) {\\n      return fitExtent(projection, extent, object);\\n    },\\n    fitSize: function(size, object) {\\n      return fitSize(projection, size, object);\\n    },\\n    fitWidth: function(width, object) {\\n      return fitWidth(projection, width, object);\\n    },\\n    fitHeight: function(height, object) {\\n      return fitHeight(projection, height, object);\\n    }\\n  };\\n}\\n\\nfunction naturalEarth1Raw(lambda, phi) {\\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\\n  return [\\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\\n  ];\\n}\\n\\nnaturalEarth1Raw.invert = function(x, y) {\\n  var phi = y, i = 25, delta;\\n  do {\\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\\n  } while (abs(delta) > epsilon && --i > 0);\\n  return [\\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\\n    phi\\n  ];\\n};\\n\\nfunction naturalEarth1() {\\n  return projection(naturalEarth1Raw)\\n      .scale(175.295);\\n}\\n\\nfunction orthographicRaw(x, y) {\\n  return [cos(y) * sin(x), sin(y)];\\n}\\n\\northographicRaw.invert = azimuthalInvert(asin);\\n\\nfunction orthographic() {\\n  return projection(orthographicRaw)\\n      .scale(249.5)\\n      .clipAngle(90 + epsilon);\\n}\\n\\nfunction stereographicRaw(x, y) {\\n  var cy = cos(y), k = 1 + cos(x) * cy;\\n  return [cy * sin(x) / k, sin(y) / k];\\n}\\n\\nstereographicRaw.invert = azimuthalInvert(function(z) {\\n  return 2 * atan(z);\\n});\\n\\nfunction stereographic() {\\n  return projection(stereographicRaw)\\n      .scale(250)\\n      .clipAngle(142);\\n}\\n\\nfunction transverseMercatorRaw(lambda, phi) {\\n  return [log(tan((halfPi + phi) / 2)), -lambda];\\n}\\n\\ntransverseMercatorRaw.invert = function(x, y) {\\n  return [-y, 2 * atan(exp(x)) - halfPi];\\n};\\n\\nfunction transverseMercator() {\\n  var m = mercatorProjection(transverseMercatorRaw),\\n      center = m.center,\\n      rotate = m.rotate;\\n\\n  m.center = function(_) {\\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\\n  };\\n\\n  m.rotate = function(_) {\\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\\n  };\\n\\n  return rotate([0, 0, 90])\\n      .scale(159.155);\\n}\\n\\nexports.geoArea = area;\\nexports.geoBounds = bounds;\\nexports.geoCentroid = centroid;\\nexports.geoCircle = circle;\\nexports.geoClipAntimeridian = clipAntimeridian;\\nexports.geoClipCircle = clipCircle;\\nexports.geoClipExtent = extent;\\nexports.geoClipRectangle = clipRectangle;\\nexports.geoContains = contains;\\nexports.geoDistance = distance;\\nexports.geoGraticule = graticule;\\nexports.geoGraticule10 = graticule10;\\nexports.geoInterpolate = interpolate;\\nexports.geoLength = length;\\nexports.geoPath = index;\\nexports.geoAlbers = albers;\\nexports.geoAlbersUsa = albersUsa;\\nexports.geoAzimuthalEqualArea = azimuthalEqualArea;\\nexports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\\nexports.geoAzimuthalEquidistant = azimuthalEquidistant;\\nexports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\\nexports.geoConicConformal = conicConformal;\\nexports.geoConicConformalRaw = conicConformalRaw;\\nexports.geoConicEqualArea = conicEqualArea;\\nexports.geoConicEqualAreaRaw = conicEqualAreaRaw;\\nexports.geoConicEquidistant = conicEquidistant;\\nexports.geoConicEquidistantRaw = conicEquidistantRaw;\\nexports.geoEqualEarth = equalEarth;\\nexports.geoEqualEarthRaw = equalEarthRaw;\\nexports.geoEquirectangular = equirectangular;\\nexports.geoEquirectangularRaw = equirectangularRaw;\\nexports.geoGnomonic = gnomonic;\\nexports.geoGnomonicRaw = gnomonicRaw;\\nexports.geoIdentity = identity$1;\\nexports.geoProjection = projection;\\nexports.geoProjectionMutator = projectionMutator;\\nexports.geoMercator = mercator;\\nexports.geoMercatorRaw = mercatorRaw;\\nexports.geoNaturalEarth1 = naturalEarth1;\\nexports.geoNaturalEarth1Raw = naturalEarth1Raw;\\nexports.geoOrthographic = orthographic;\\nexports.geoOrthographicRaw = orthographicRaw;\\nexports.geoStereographic = stereographic;\\nexports.geoStereographicRaw = stereographicRaw;\\nexports.geoTransverseMercator = transverseMercator;\\nexports.geoTransverseMercatorRaw = transverseMercatorRaw;\\nexports.geoRotation = rotation;\\nexports.geoStream = geoStream;\\nexports.geoTransform = transform;\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"d3\",\"d3Array\",\"Adder\",\"reset\",\"add\",\"adder\",\"a\",\"b\",\"x\",\"s\",\"bv\",\"t\",\"acos\",\"pi\",\"Math\",\"asin\",\"halfPi\",\"haversin\",\"sin\",\"noop\",\"streamGeometry\",\"geometry\",\"stream\",\"streamGeometryType\",\"hasOwnProperty\",\"type\",\"streamLine\",\"coordinates\",\"closed\",\"i\",\"n\",\"length\",\"lineStart\",\"coordinate\",\"point\",\"lineEnd\",\"streamPolygon\",\"polygonStart\",\"polygonEnd\",\"geoStream\",\"object\",\"streamObjectType\",\"areaRingStart\",\"areaStream\",\"areaPointFirst\",\"areaRingEnd\",\"areaPoint\",\"lambda00\",\"phi00\",\"lambda\",\"phi\",\"radians\",\"lambda0\",\"cosPhi0\",\"cos\",\"quarterPi\",\"sinPhi0\",\"dLambda\",\"sdLambda\",\"adLambda\",\"cosPhi\",\"sinPhi\",\"k\",\"u\",\"v\",\"areaRingSum\",\"atan2\",\"spherical\",\"cartesian\",\"cartesianDot\",\"cartesianCross\",\"cartesianAddInPlace\",\"cartesianScale\",\"vector\",\"cartesianNormalizeInPlace\",\"d\",\"l\",\"sqrt\",\"boundsPoint\",\"ranges\",\"push\",\"range\",\"lambda0$1\",\"lambda1\",\"phi0\",\"phi1\",\"linePoint\",\"p\",\"p0\",\"normal\",\"inflection\",\"equatorial\",\"delta\",\"lambda2\",\"sign$$1\",\"lambdai\",\"degrees\",\"antimeridian\",\"abs\",\"phii\",\"angle\",\"boundsLineStart\",\"boundsStream\",\"boundsLineEnd\",\"boundsRingPoint\",\"deltaSum\",\"lambda00$1\",\"phi00$1\",\"boundsRingStart\",\"boundsRingEnd\",\"epsilon\",\"rangeCompare\",\"rangeContains\",\"centroidPoint\",\"centroidPointCartesian\",\"y\",\"z\",\"W0\",\"X0\",\"Y0\",\"Z0\",\"centroidLineStart\",\"centroidStream\",\"centroidLinePointFirst\",\"x0\",\"y0\",\"z0\",\"centroidLinePoint\",\"w\",\"W1\",\"X1\",\"Y1\",\"Z1\",\"centroidLineEnd\",\"centroidRingStart\",\"centroidRingPointFirst\",\"centroidRingEnd\",\"centroidRingPoint\",\"lambda00$2\",\"phi00$2\",\"cx\",\"cy\",\"cz\",\"m\",\"X2\",\"Y2\",\"Z2\",\"constant\",\"compose\",\"invert\",\"compose.invert\",\"rotationIdentity\",\"tau\",\"rotateRadians\",\"deltaLambda\",\"deltaPhi\",\"deltaGamma\",\"rotationLambda\",\"rotationPhiGamma\",\"forwardRotationLambda\",\"rotation\",\"cosDeltaPhi\",\"sinDeltaPhi\",\"cosDeltaGamma\",\"sinDeltaGamma\",\"rotation.invert\",\"rotate\",\"forward\",\"forward.invert\",\"circleStream\",\"radius\",\"direction\",\"t0\",\"t1\",\"cosRadius\",\"sinRadius\",\"step\",\"circleRadius\",\"clipBuffer\",\"lines\",\"line\",\"rejoin\",\"pop\",\"concat\",\"shift\",\"result\",\"pointEqual\",\"Intersection\",\"points\",\"other\",\"entry\",\"o\",\"e\",\"clipRejoin\",\"segments\",\"compareIntersection\",\"startInside\",\"interpolate\",\"subject\",\"clip\",\"forEach\",\"segment\",\"p1\",\"sort\",\"link\",\"start\",\"current\",\"isSubject\",\"array\",\"polygonContains\",\"polygon\",\"winding\",\"sum\",\"ring\",\"point0\",\"j\",\"sinPhi1\",\"cosPhi1\",\"point1\",\"absDelta\",\"arc\",\"intersection\",\"phiArc\",\"pointVisible\",\"clipLine\",\"sink\",\"pointLine\",\"pointRing\",\"ringSink\",\"ringStart\",\"ringEnd\",\"clean\",\"ringSegments\",\"ringBuffer\",\"polygonStarted\",\"filter\",\"validSegment\",\"merge\",\"sphere\",\"clipCircle\",\"visible\",\"cr\",\"intersect\",\"two\",\"pa\",\"pb\",\"n1\",\"n2\",\"n2n2\",\"n1n2\",\"determinant\",\"c1\",\"c2\",\"n1xn2\",\"A\",\"B\",\"uu\",\"t2\",\"q\",\"polar\",\"q1\",\"code\",\"r\",\"smallRadius\",\"notHemisphere\",\"c0\",\"v0\",\"v00\",\"c\",\"point2\",\"from\",\"to\",\"x1\",\"y1\",\"ax\",\"ay\",\"dx\",\"bx\",\"dy\",\"by\",\"clipRectangle\",\"a1\",\"corner\",\"comparePoint\",\"ca\",\"cb\",\"activeStream\",\"first\",\"x__\",\"y__\",\"v__\",\"v_\",\"x_\",\"max\",\"clipMin\",\"min\",\"clipMax\",\"y_\",\"bufferStream\",\"clipStream\",\"NaN\",\"b0\",\"b1\",\"a0\",\"cleanInside\",\"lengthLineEnd\",\"lengthStream\",\"lengthPointFirst\",\"lambda0$2\",\"sinPhi0$1\",\"cosPhi0$1\",\"lengthPoint\",\"cosDelta\",\"sinDelta\",\"lengthSum\",\"distance\",\"containsGeometry\",\"containsGeometryType\",\"containsLine\",\"ab\",\"ao\",\"ob\",\"containsPolygon\",\"map\",\"ringRadians\",\"pointRadians\",\"graticuleX\",\"graticuleY\",\"graticule\",\"ceil\",\"DX\",\"X\",\"DY\",\"Y\",\"precision\",\"graticule.lines\",\"outline\",\"graticule.outline\",\"slice\",\"reverse\",\"extent\",\"graticule.extent\",\"_\",\"arguments\",\"extentMajor\",\"extentMinor\",\"graticule.extentMajor\",\"graticule.extentMinor\",\"graticule.step\",\"stepMajor\",\"stepMinor\",\"graticule.stepMajor\",\"graticule.stepMinor\",\"graticule.precision\",\"identity\",\"areaRingStart$1\",\"areaStream$1\",\"areaPointFirst$1\",\"areaPoint$1\",\"x00\",\"x0$1\",\"y00\",\"y0$1\",\"areaRingSum$1\",\"areaRingEnd$1\",\"centroidPoint$1\",\"X0$1\",\"Y0$1\",\"Z0$1\",\"centroidLineStart$1\",\"centroidStream$1\",\"centroidPointFirstLine\",\"centroidPointLine\",\"x0$3\",\"y0$3\",\"X1$1\",\"Y1$1\",\"Z1$1\",\"centroidLineEnd$1\",\"centroidRingStart$1\",\"centroidPointFirstRing\",\"centroidRingEnd$1\",\"centroidPointRing\",\"x00$1\",\"y00$1\",\"X2$1\",\"Y2$1\",\"Z2$1\",\"PathContext\",\"context\",\"_context\",\"lengthPointFirst$1\",\"lengthStream$1\",\"lengthPoint$1\",\"x00$2\",\"x0$4\",\"y00$2\",\"y0$4\",\"lengthSum$1\",\"PathString\",\"_string\",\"circle$1\",\"transformer\",\"methods\",\"TransformStream\",\"key\",\"fit\",\"projection\",\"fitBounds\",\"clipExtent\",\"scale\",\"translate\",\"boundsStream$1\",\"fitExtent\",\"h\",\"fitWidth\",\"width\",\"fitHeight\",\"height\",\"resampleNone\",\"project\",\"resample$1\",\"delta2\",\"resampleLineTo\",\"depth\",\"d2\",\"phi2\",\"x2\",\"y2\",\"dx2\",\"dy2\",\"dz\",\"cosMinDistance\",\"resampleStream\",\"maxDepth\",\"ringPoint\",\"a00\",\"b00\",\"c00\",\"transformRotate\",\"scaleTranslate\",\"transform$$1\",\"transform$$1.invert\",\"scaleTranslateRotate\",\"alpha\",\"cosAlpha\",\"sinAlpha\",\"ai\",\"bi\",\"ci\",\"fi\",\"projectionMutator\",\"projectAt\",\"projectRotateTransform\",\"recenter\",\"center\",\"apply\",\"projectTransform\",\"cache\",\"cacheStream\",\"theta\",\"preclip\",\"clipAntimeridian\",\"postclip\",\"projectResample\",\"projection.stream\",\"transformRadians\",\"projection.preclip\",\"undefined\",\"projection.postclip\",\"clipAngle\",\"projection.clipAngle\",\"projection.clipExtent\",\"projection.scale\",\"projection.translate\",\"projection.center\",\"projection.rotate\",\"projection.angle\",\"projection.precision\",\"projection.fitExtent\",\"fitSize\",\"projection.fitSize\",\"size\",\"projection.fitWidth\",\"projection.fitHeight\",\"conicProjection\",\"parallels\",\"p.parallels\",\"cylindricalEqualAreaRaw\",\"conicEqualAreaRaw\",\"r0\",\"sy0\",\"project.invert\",\"r0y\",\"sign\",\"conicEqualArea\",\"albers\",\"multiplex\",\"streams\",\"azimuthalRaw\",\"azimuthalInvert\",\"sc\",\"cc\",\"mercatorRaw\",\"log\",\"tan\",\"mercatorProjection\",\"reclip\",\"m.scale\",\"m.translate\",\"m.center\",\"m.clipExtent\",\"conicConformalRaw\",\"f\",\"pow\",\"cy0\",\"fy\",\"atan\",\"equirectangularRaw\",\"conicEquidistantRaw\",\"gy\",\"g\",\"nx\",\"equalEarthRaw\",\"M\",\"l2\",\"l6\",\"A1\",\"A2\",\"A3\",\"A4\",\"gnomonicRaw\",\"scaleTranslate$1\",\"kx\",\"ky\",\"tx\",\"ty\",\"naturalEarth1Raw\",\"phi4\",\"orthographicRaw\",\"stereographicRaw\",\"transverseMercatorRaw\",\"prototype\",\"constructor\",\"temp\",\"valueOf\",\"PI\",\"exp\",\"Feature\",\"FeatureCollection\",\"features\",\"Sphere\",\"Point\",\"MultiPoint\",\"LineString\",\"MultiLineString\",\"Polygon\",\"MultiPolygon\",\"GeometryCollection\",\"geometries\",\"areaSum\",\"areaRing\",\"clipAntimeridianLine\",\"sign0\",\"sign1\",\"sinLambda0Lambda1\",\"clipAntimeridianInterpolate\",\"lengthLineStart\",\"containsObjectType\",\"areaSum$1\",\"area\",\"x0$2\",\"Infinity\",\"y0$2\",\"boundsPoint$1\",\"bounds\",\"centroid\",\"_radius\",\"pointRadius\",\"_line\",\"_point\",\"closePath\",\"moveTo\",\"lineTo\",\"lengthRing\",\"_circle\",\"join\",\"azimuthalEqualAreaRaw\",\"cxcy\",\"azimuthalEquidistantRaw\",\"mercatorRaw.invert\",\"equalEarthRaw.invert\",\"iterations\",\"fpy\",\"epsilon2\",\"naturalEarth1Raw.invert\",\"transverseMercatorRaw.invert\",\"geoArea\",\"geoBounds\",\"feature\",\"merged\",\"deltaMax\",\"geoCentroid\",\"geoCircle\",\"circle\",\"circle.center\",\"circle.radius\",\"circle.precision\",\"geoClipAntimeridian\",\"geoClipCircle\",\"geoClipExtent\",\"geoClipRectangle\",\"geoContains\",\"contains\",\"geoDistance\",\"geoGraticule\",\"geoGraticule10\",\"graticule10\",\"geoInterpolate\",\"cy1\",\"sy1\",\"kx0\",\"ky0\",\"kx1\",\"ky1\",\"geoLength\",\"geoPath\",\"index\",\"path\",\"contextStream\",\"projectionStream\",\"path.area\",\"measure\",\"path.measure\",\"path.bounds\",\"path.centroid\",\"path.projection\",\"path.context\",\"path.pointRadius\",\"geoAlbers\",\"geoAlbersUsa\",\"albersUsa\",\"lower48Point\",\"alaskaPoint\",\"hawaiiPoint\",\"lower48\",\"alaska\",\"hawaii\",\"pointStream\",\"albersUsa.invert\",\"albersUsa.stream\",\"albersUsa.precision\",\"albersUsa.scale\",\"albersUsa.translate\",\"albersUsa.fitExtent\",\"albersUsa.fitSize\",\"albersUsa.fitWidth\",\"albersUsa.fitHeight\",\"geoAzimuthalEqualArea\",\"azimuthalEqualArea\",\"geoAzimuthalEqualAreaRaw\",\"geoAzimuthalEquidistant\",\"azimuthalEquidistant\",\"geoAzimuthalEquidistantRaw\",\"geoConicConformal\",\"conicConformal\",\"geoConicConformalRaw\",\"geoConicEqualArea\",\"geoConicEqualAreaRaw\",\"geoConicEquidistant\",\"conicEquidistant\",\"geoConicEquidistantRaw\",\"geoEqualEarth\",\"equalEarth\",\"geoEqualEarthRaw\",\"geoEquirectangular\",\"equirectangular\",\"geoEquirectangularRaw\",\"geoGnomonic\",\"gnomonic\",\"geoGnomonicRaw\",\"geoIdentity\",\"identity$1\",\"sx\",\"sy\",\"reflectX\",\"reflectY\",\"geoProjection\",\"geoProjectionMutator\",\"geoMercator\",\"mercator\",\"geoMercatorRaw\",\"geoNaturalEarth1\",\"naturalEarth1\",\"geoNaturalEarth1Raw\",\"geoOrthographic\",\"orthographic\",\"geoOrthographicRaw\",\"geoStereographic\",\"stereographic\",\"geoStereographicRaw\",\"geoTransverseMercator\",\"transverseMercator\",\"m.rotate\",\"geoTransverseMercatorRaw\",\"geoRotation\",\"geoTransform\",\"transform\",\"Object\",\"defineProperty\",\"value\"]\n}\n"]